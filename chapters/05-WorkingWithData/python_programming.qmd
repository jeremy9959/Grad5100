---
title: "Basics of Programming in Python"
subtitle: "Fundamentals of Data Science"
author: "Jeremy Teitelbaum"
format: html
title-block-style: plain
---

## Basics of programming in python

Key ingredients of programming language:

- data types and data structures
- functions
- control flow (iteration and logical branches)

## Key data types in python

- numbers (integers and floating point)
- strings
- lists
- numpy arrays (*)
- dictionaries
- pandas dataframes (*)

## Basic examples

From before, remember:

```{python}
n = 56  # integer
m = 1234.48  # floating point
L = [1, 2, 3, 4]  # list
name = "Jeremy"  # string
```

The `typeof` operator tells you what something is.

```{python}
print("type of n is {}, type of name is {}".format(type(n), type(name)))
```

## Dictionaries

A dictionary (or a HashMap, or an associative array) is like an array with arbitrary subscripts.
```{python}
D = {"first_name": "Jeremy", "last_name": "Teitelbaum"}
D["middle_name"] = "Thau"
print(D["first_name"])
D["Title"] = "Emperor"
print(D)
# D["Subtitle"]
```

## Arrays

```{python}
import numpy as np

x=np.array([1,2,3,4])
x=np.linspace(-5,5,10)
```

## Booleans

```{python}
T = True
F = False
print(T or F) # or
print(T and F) # and 
3 == 5 # equality
3 > 5 # 
3 < 5 #
x = (3 <= 5) #
print(x)
y = (3 != 5) #
print(y)
```

## Functions

```{python}
import scipy.stats as sps

def my_function(n,mu,s):
    x = sps.norm.rvs(mu,s,size=n)
    return x
```

Important concepts:
- arguments
- scope
- return values

## Scope

Basic rule of scope:  Variables created inside functions are completely separate from those outside
the function, changing them has no effect.

Exception: some operations (such as list append) modify an element in place and in these cases
you may end up modifying something. 

```{python}
def f(a,b):
    x=a+b
    return x


x=3
print("before executing f, x={}".format(x))
print(f(2,5))
print("after executing f, x={}".format(x))
```

```{python}
def f(x):
    x=x+["d"]
    return x

L=["a","b","c"]
print("L before is {}".format(L))
print("result of f(L) is {}".format(f(L)))
print("L after is {}".format(L))
```

```{python}

def f(x):
    x.append("d") #
    return x

# Warning
x = ["a","b","c"]
print(f(x))
print(x)
```

```{python}
x = 55

def f(n):
    n = n+x
    return n

f(24)
```

## Iteration

```{python}

for x in range(10):
    print(x,end=',')
print('\n---')

for x in ["a","b","c"]:
    print(x,end=',')

# Also available: while
```

## logic

```{python}
if 3<5:
    print("ha")
else:
    print("ba")
```

## A few other tricks

- default arguments
- docstrings

## Some examples

Take a string and make its first character upper case and the rest lower. 

```{python}

def f(s):
    l = s[0].upper()+s[1:].lower()
    return l

print(f("hello"),f("Hello"),f("HELLO"))
```

Now do this for each element of a list. 

```{python}

def h(L):
    N=[]
    for x in L:
        N = N + [f(x)]
    return N

h(["hello","HELLO","jeremy","JEREMY","jerEmy"])
```

