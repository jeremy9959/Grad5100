---
title: SQL and Databases - Joins (R version)
subtitle: Fundamentals of Data Science
author: Jeremy Teitelbaum
format: html
---

Now let's take a look at how joins work in R and the `tidyverse` library.
Before bringing the database into it, let's work with some local tibbles. 

As with our python discussion, we'll make some tiny tibbles to experiment on.

```{r message=FALSE}
library(tidyverse)
```


```{r message=FALSE}
T1 <- tibble(K = c(1, 1, 2, 3, 4), D = c("A", "B", "C", "D", "E"))
T2 <- tibble(K = c(1, 2, 3, 6), D2 = c("U", "V", "W", "Y"))
print(T1)
print(T2)

```

**Inner Join:**  The `inner_join` function does an inner join.  The "by=" keyword
tells which key to join on.  

```{r}
inner_join(T1, T2, by = c("K"), suffix = c("_T1", "_T2"))
```

If the key fields have different names in the two tables,
you use a named vector.  In other words, if the key in `T1` were called `K1` and in `T2`
were `K2` you would say `by=c("K1"="K2")`.  

Suffixes are only attached in the column names are the same.   For example:


```{r}
T1 <- tibble(K1 = c(1, 1, 2, 3, 4), D = c("A", "B", "C", "D", "E"))
T2 <- tibble(K2 = c(1, 2, 3, 6), D = c("U", "V", "W", "Y"))
print(T1)
print(T2)
print(inner_join(T1, T2, by = c("K1" = "K2"), suffix = c("_T1", "_T2")))
```

There are similar functions `left_join`, `right_join`, and `full_join` (meaning outer join).

```{r}

leftT1_T2 <- left_join(T1, T2, by = c("K1" = "K2"), suffix = c("_T1", "_T2"))
rightT1_T2 <- right_join(T1, T2, by = c("K1" = "K2"), suffix = c("_T1", "_T2"))
fullT1_T2 <- full_join(T1, T2, by = c("K1" = "K2"), suffix = c("_T1", "_T2"))
print(leftT1_T2)
print(rightT1_T2)
print(fullT1_T2)
```

Now let's see what happens when we bring the database into it. 

```{r message=FALSE}

library(dbplyr)
library(DBI) # this is the general DB interface library.
library(RMariaDB) # this is the library for MySQL databases.
```

```{r echo=FALSE, message=FALSE}

info <- read_csv(paste0(fs::path_expand("~"), "/.rds"), col_names = c("user", "password", "resource"))
awsresource <- info$resource
username <- info$user
password <- info$password
```

```{r}
con <- DBI::dbConnect(RMariaDB::MariaDB(),
    host = awsresource, # get this from the instructor
    user = username, # get this from the instructor
    password = password, # get this from the instructor
    dbname = "sakila"
)
```

Let's open the `actor`, `film`, and `film_actor` tables.

```{r}
actor <- tbl(con, "actor")
film <- tbl(con, "film")
film_actor <- tbl(con, "film_actor")
```

The syntax looks the same as in the usual `dplyr` case. 

```{r}
actor_to_film_actor <- left_join(actor, film_actor, by = c("actor_id"))
actor_to_film_actor
```

To put the film titles together, we can then join on `film_id`.

```{r}
actors_and_titles <- left_join(actor_to_film_actor, film, by = c("film_id"))
actors_and_titles <- actors_and_titles |> select(`first_name`, `last_name`, `title`, `length`, `rating`)
actors_and_titles
```

The pipe notation also works.

```{r}
actors_and_titles_2 <- actor_to_film_actor |>
    left_join(film, by = c("film_id")) |>
    select(`first_name`, `last_name`, `title`, `length`, `rating`)
actors_and_titles_2
```


What's fun about doing this in `R` is that you can retrieve the actual SQL used to do these manipulations.

```{r}
actors_and_titles |> show_query()
```

Finally, you can "pull down" the full table using `collect`.

```{r}
actors_and_titles_local <- actors_and_titles |> collect()
actors_and_titles_local
```