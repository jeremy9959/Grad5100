---
title: The Curse of Dimensionality
subtitle: Fundamentals of Data Science
author: Jeremy Teitelbaum
layout: default
jupyter: 
    kernelspec: 
        name: "base"
        language: "python"
        display_name: "python3"
---

Suppose we sample 1000 points uniformly from the square in $\mathbf{R}^{2}$.

```{python}
import numpy as np
import matplotlib.pyplot as plt

rng = np.random.default_rng()


def hypercube(n,d):
    data = rng.uniform(-1,1,size=(n,d))
    r = np.linalg.norm(data,axis=1)
    hist, edges = np.histogram(r,bins=20,density=True)
    fig = plt.figure()
    axes = fig.subplots()
    axes.bar(x=edges[:-1], height=hist,align='edge',width=edges[1]-edges[0],edgecolor='white')
    axes.set_title("Distance to zero for {} points\n in the hypercube in {} dimensions".format(n,d))
hypercube(10000,2)
hypercube(10000,20)
```

```{python}
data = rng.uniform(-1,1,size=(10000,20))
r = np.linalg.norm(data,axis=1)
k = r.reshape(500,20)
m = np.min(k,axis=1)
plt.hist(m)
```

