[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Fundamentals of Machine Learning",
    "section": "",
    "text": "Preface\nNotes and resources"
  },
  {
    "objectID": "01-SettingUp/setting-up.html",
    "href": "01-SettingUp/setting-up.html",
    "title": "1  Key Tools",
    "section": "",
    "text": "2 Key Software Tools"
  },
  {
    "objectID": "01-SettingUp/setting-up.html#anaconda-install-for-python",
    "href": "01-SettingUp/setting-up.html#anaconda-install-for-python",
    "title": "1  Key Tools",
    "section": "2.1 Anaconda Install for Python",
    "text": "2.1 Anaconda Install for Python\n\nDownload from https://www.anaconda.com\n\nAnaconda includes:\n\npython\njupyter: notebook working environment\npython libraries: ML, visualization, I/O and others\nconda package manager: for dealing with multiple versions of libraries\nanaconda navigator: a GUI gateway to anaconda tools\nlots of other stuff"
  },
  {
    "objectID": "01-SettingUp/setting-up.html#verify-anaconda",
    "href": "01-SettingUp/setting-up.html#verify-anaconda",
    "title": "1  Key Tools",
    "section": "2.2 Verify Anaconda",
    "text": "2.2 Verify Anaconda\n\nVerify JupyterLab\n\nFrom a command line\n$ jupyter lab \nor use anaconda navigator to launch jupyterlab.\n\n\nVerify python version\n\nFrom a command line\n$ python --version\nor inside a jupyter notebook cell:\nimport sys\n\nprint(sys.version)"
  },
  {
    "objectID": "01-SettingUp/setting-up.html#r-and-rstudio-install-for-r",
    "href": "01-SettingUp/setting-up.html#r-and-rstudio-install-for-r",
    "title": "1  Key Tools",
    "section": "2.3 R and Rstudio Install for R",
    "text": "2.3 R and Rstudio Install for R\n\nR is an open source language for statistical computations.\nRstudio is a working environment for the R language.\nR and Rstudio need to be installed separately.\nR is available at https://cran.r-project.org\nRstudio is available at https://posit.co/download/rstudio-desktop"
  },
  {
    "objectID": "01-SettingUp/setting-up.html#verify-r-and-rstudio",
    "href": "01-SettingUp/setting-up.html#verify-r-and-rstudio",
    "title": "1  Key Tools",
    "section": "2.4 Verify R and Rstudio",
    "text": "2.4 Verify R and Rstudio\nFor R, From a command line:\n$ R \nFor Rstudio, use the icon/shortcut or from a command line:\n$ rstudio"
  },
  {
    "objectID": "01-SettingUp/setting-up.html#vscode",
    "href": "01-SettingUp/setting-up.html#vscode",
    "title": "1  Key Tools",
    "section": "2.5 VSCode",
    "text": "2.5 VSCode\n\nvscode is a very powerful “IDE” (integrated development environment).\nit can integrate jupyter notebooks and r workbooks, though it takes some setting up\nvscode is integrated with GitHub copilot, a version of ChatGPT-3 that helps write code.\nvscode is available at http://code.visualstudio.com for windows, linux, and macOS."
  },
  {
    "objectID": "01-SettingUp/setting-up.html#setting-up-a-project",
    "href": "01-SettingUp/setting-up.html#setting-up-a-project",
    "title": "1  Key Tools",
    "section": "2.10 Setting up a Project",
    "text": "2.10 Setting up a Project\n\nCreate a project directory\nSubdirectories\n\ndata for data files\ndocs for notes and documentation\nothers?\n\nCreate a README.md file"
  },
  {
    "objectID": "01-SettingUp/setting-up.html#tools",
    "href": "01-SettingUp/setting-up.html#tools",
    "title": "1  Key Tools",
    "section": "2.11 Tools",
    "text": "2.11 Tools\nFor the directories:\n\nthe finder or File Manager\nthe command line\n\nFor the README file:\n\na text editor such as nano or notepad\njupyter or Rstudio (as we will see soon)\nvscode"
  },
  {
    "objectID": "01-SettingUp/setting-up.html#using-vscode",
    "href": "01-SettingUp/setting-up.html#using-vscode",
    "title": "1  Key Tools",
    "section": "2.6 Using vscode",
    "text": "2.6 Using vscode\nVSCode (visual studio code) is a freely distributed code editor/IDE distributed by microsoft.\nIt is extremely capable and well-suited for software development in python and other languages.\nIt is perhaps not as optimized for R as Rstudio but it does work.\nYou can access github copilot a version of chatGPT optimized for code, inside vscode in a straightforward way."
  },
  {
    "objectID": "01-SettingUp/setting-up.html#installing-vscode",
    "href": "01-SettingUp/setting-up.html#installing-vscode",
    "title": "1  Key Tools",
    "section": "2.7 Installing vscode",
    "text": "2.7 Installing vscode\nThe software is available here.\nYou need a github account to use github copilot, and you need to sign in to that account from inside vscode. GitHub copilot is free to students, but you need to sign up for the student developer pack.."
  },
  {
    "objectID": "01-SettingUp/setting-up.html#overview-of-vscode",
    "href": "01-SettingUp/setting-up.html#overview-of-vscode",
    "title": "1  Key Tools",
    "section": "2.8 Overview of vscode",
    "text": "2.8 Overview of vscode\n\nOpening folders (as projects)\nOpening files\nInstall Extensions:\n\npython\nR\nmany others\n\nThe command palette"
  },
  {
    "objectID": "01-SettingUp/setting-up.html#more-on-vscode",
    "href": "01-SettingUp/setting-up.html#more-on-vscode",
    "title": "1  Key Tools",
    "section": "2.9 More on vscode",
    "text": "2.9 More on vscode\n\njupyter notebooks inside vscode with github copilot\nInteractive python with code cells (# %%)\nThe terminal"
  },
  {
    "objectID": "01-SettingUp/setting-up.html#setting-up-a-project-1",
    "href": "01-SettingUp/setting-up.html#setting-up-a-project-1",
    "title": "1  Key Tools",
    "section": "2.12 Setting up a Project",
    "text": "2.12 Setting up a Project\n\nCreate a project directory\nSubdirectories\n\ndata for data files\ndocs for notes and documentation\nothers?\n\nCreate a README.md file"
  },
  {
    "objectID": "01-SettingUp/setting-up.html#tools-1",
    "href": "01-SettingUp/setting-up.html#tools-1",
    "title": "1  Key Tools",
    "section": "2.13 Tools",
    "text": "2.13 Tools\nFor the directories:\n\nthe finder or File Manager\nthe command line\n\nFor the README file:\n\na text editor such as nano or notepad\njupyter or Rstudio (as we will see soon)\nvscode"
  },
  {
    "objectID": "02-JupyterBasics/jupyter-walkthrough.html",
    "href": "02-JupyterBasics/jupyter-walkthrough.html",
    "title": "3  Jupyter Lab Project Walkthrough",
    "section": "",
    "text": "4 Jupyter Lab Project Walkthrough"
  },
  {
    "objectID": "02-JupyterBasics/jupyter-walkthrough.html#markdown-cells",
    "href": "02-JupyterBasics/jupyter-walkthrough.html#markdown-cells",
    "title": "2  Jupyter Lab Project Walkthrough",
    "section": "2.1 Markdown cells",
    "text": "2.1 Markdown cells\nThis is a markdown cell:\n\nHeadings are #, ##, etc.\nBold is marked **make me bold** like this.\nItalics are marked *make me italic* like this.\nMath can be typeset with if you know it: \\[f(x)=e^{-x}\\cos(x)\\]\nBulleted lists are marked with -.\n\n\n# code cells\n## Code cells contain python code that gets executed.\n# indicates a comment that is ignored.\nprint(\"Hello World!\")\n\nHello World!\n\n\nIn this walkthrough we will look at the following elements of Python in a jupyter notebook.\nThe print statement\n\nprint(\"hello world!\")\n\nhello world!\n\n\nVariables, variable names, and assignment/datatypes\n\ncount = 5  # an integer\nname = \"Jeremy Teitelbaum\"  # a string\nparagraph = \"\"\"This is how you enter a multiline string\nin python. It is enclosed in triple quotes.\"\"\"\npi = 3.14159  # a float\nepsilon = 1.0e-6  # a float\nstudents = [\"Jeremy\", \"Phillip\", \"Sara\", \"Molly\"]  # a list\nHotDog = True\n\n\nprint(students)\n\n['Jeremy', 'Phillip', 'Sara', 'Molly']\n\n\nCompare print for multiline strings with the string value. (\\n means newline)\n\nprint(paragraph)\n\nThis is how you enter a multiline string\nin python. It is enclosed in triple quotes.\n\n\n\nparagraph\n\n'This is how you enter a multiline string\\nin python. It is enclosed in triple quotes.'\n\n\nArithmetic operations\n\nprint(count)\ncount = count + 1\nprint(count)\n\n5\n6\n\n\n\n1 / pi\n\n0.31831015504887655\n\n\n\nprint(2**3)  # exponent\nprint(1 / 2)  # division (converts integer to float)\nprint(1 / (1 / 2))  # 2 becomes 2.0\n\n8\n0.5\n2.0\n\n\n\nquotient = 5 // 3  # integer division\nremainder = 5 % 3  # remainder\nprint(quotient, remainder)\n\n1 2\n\n\nOperations on strings and lists\n\n\"Jeremy\" + \" Teitelbaum\"\n\n'Jeremy Teitelbaum'\n\n\n\n[\"a\", \"b\", \"c\"] + [\"d\"]\n\n['a', 'b', 'c', 'd']\n\n\n\nlen(\"Jeremy\")\n\n6\n\n\n\nlen([\"Jeremy\", \"Teitelbaum\"])\n\n2\n\n\n\nfirstName = \"Jeremy\"\nlastName = \"Teitelbaum\"\nfullName = firstName + \" \" + lastName\n\nSome fancier printing\n\nprint(f\"The first name is {firstName}\")\nprint(f\"The last name is {lastName}\")\nprint(f\"The full name is {firstName} {lastName}\")\nprint(firstName, lastName, sep=\",\")\nprint(firstName, lastName, sep=\":\")\n\nThe first name is Jeremy\nThe last name is Teitelbaum\nThe full name is Jeremy Teitelbaum\nJeremy,Teitelbaum\nJeremy:Teitelbaum\n\n\nSlicing\nIn python, we always count from zero!!!\n\nfirstName[0]\n\n'J'\n\n\n\nlastName[1]\n\n'e'\n\n\n\n# [a:b] means from a to b-1 inclusive\n\nprint(firstName[0:3])\nprint(firstName[3:])\nprint(firstName[3:5])\n\nJer\nemy\nem\n\n\n\n# negative indices count from the end\nprint(firstName[-1])  # the last element\nprint(firstName[-3:-1])  # elements -3 and -2, but not -1\n\ny\nem\n\n\n\n# [a:b:c] means from a to b-1 in steps of c\n# missing numbers mean (beginnging):(end)\nprint(firstName[:5:2])\nprint(firstName[::2])\nprint(firstName[::-1])  # reverse the string\nprint(firstName[3::-1])  # 3,2,1,0\nprint(firstName[3:0:-1])  # 3,2,1\n\nJrm\nJrm\nymereJ\nereJ\nere\n\n\nSlices work the same on list elements\n\nprint(students[0])\nprint(students[-1])\nevery_other_student = students[::2]\nprint(every_other_student)\n\nJeremy\nMolly\n['Jeremy', 'Sara']\n\n\nLibraries\n\nimport math\n\n\nmath.log(23)\n\n3.1354942159291497\n\n\n\nmath.pi\n\n3.141592653589793\n\n\n\nmath.cos(math.pi / 2)  # should be zero\n\n6.123233995736766e-17\n\n\n\nmath.cos(math.pi / 2) == 0\n\nFalse\n\n\n\nabs(math.cos(math.pi / 2)) < 1e-6\n\nTrue\n\n\n\nmath.pi == pi\n\nFalse\n\n\n\nimport numpy as np\n\n\nprint(np.random.randint(0, 10))\n\n5\n\n\n\nprint(np.__version__)\n\n1.24.3\n\n\n\nfrom numpy.random import randint\n\n\nrandint(1, 10)\n\n9"
  },
  {
    "objectID": "02-JupyterBasics/jupyter-walkthrough.html#code-cells",
    "href": "02-JupyterBasics/jupyter-walkthrough.html#code-cells",
    "title": "3  Jupyter Lab Project Walkthrough",
    "section": "4.2 Code Cells",
    "text": "4.2 Code Cells\n# code cells\n## Code cells contain python code that gets executed.  \n# indicates a comment that is ignored.\nprint(\"Hello World!\")\nHello World!"
  },
  {
    "objectID": "02-JupyterBasics/jupyter-walkthrough.html#ingredients",
    "href": "02-JupyterBasics/jupyter-walkthrough.html#ingredients",
    "title": "3  Jupyter Lab Project Walkthrough",
    "section": "4.3 Ingredients",
    "text": "4.3 Ingredients\n\nThe print statement\nBasic datatypes:\n\nnumbers (integers and floats)\nstrings\nlists\nTrue, False, and None\n\nVariables, variable names, and assignment\n\ncaution: order of cell execution is what matters\n\nFormatted print with variables"
  },
  {
    "objectID": "02-JupyterBasics/jupyter-walkthrough.html#ingredients-continued",
    "href": "02-JupyterBasics/jupyter-walkthrough.html#ingredients-continued",
    "title": "3  Jupyter Lab Project Walkthrough",
    "section": "4.4 Ingredients continued",
    "text": "4.4 Ingredients continued\n\nArithmetic operations\nLogical operations\nOperations on strings and lists\nSlicing\nLibraries\nmatplotlib plotting (bare minimum)"
  },
  {
    "objectID": "02-JupyterBasics/jupyter-walkthrough.html#some-other-things-to-look-at",
    "href": "02-JupyterBasics/jupyter-walkthrough.html#some-other-things-to-look-at",
    "title": "3  Jupyter Lab Project Walkthrough",
    "section": "4.5 Some other things to look at",
    "text": "4.5 Some other things to look at\n\ns.upper(), s.isupper(); s.lower(), s.islower()"
  },
  {
    "objectID": "02-JupyterBasics/jupyter-walkthrough.html#numpy-arrays",
    "href": "02-JupyterBasics/jupyter-walkthrough.html#numpy-arrays",
    "title": "2  Jupyter Lab Project Walkthrough",
    "section": "2.2 Numpy arrays",
    "text": "2.2 Numpy arrays\nA numpy array is like a list, but:\n- it's itended for use with numbers\n- it's designed for fast arithmetic and numerical operations\n- it can be multi-dimensional -- like a table or matrix -- although we won't use that here.\n\nx = np.array([1, 2, 3, 4, 5, 6])\nprint(x)\n\n[1 2 3 4 5 6]\n\n\nYou access arrays like lists, and can use slices; indices start at zero.\n\nx[2:4]\n\narray([3, 4])\n\n\nWhen you apply an operation to an array, it gets applied to every element of the array.\n\nprint(f\"Square of x is {x**2}\")\nprint(f\"1/x is {1/x}\")\nprint(f\"cos(x) is {np.cos(x)}\")\n\nSquare of x is [ 1  4  9 16 25 36]\n1/x is [1.         0.5        0.33333333 0.25       0.2        0.16666667]\ncos(x) is [ 0.54030231 -0.41614684 -0.9899925  -0.65364362  0.28366219  0.96017029]\n\n\nSome special arrays.\n\nx = np.zeros(10)  # 10 zeros\ny = np.ones(20)  # 20 ones\nz = np.linspace(0, 10, 100)  # 100 equally spaced numbers from 0 to 10 **inclusive**\nw = np.array(list(range(-10, 10, 2)))\n\n\nprint(w)\n\n[-10  -8  -6  -4  -2   0   2   4   6   8]\n\n\n\nprint(z)\n\n[ 0.          0.1010101   0.2020202   0.3030303   0.4040404   0.50505051\n  0.60606061  0.70707071  0.80808081  0.90909091  1.01010101  1.11111111\n  1.21212121  1.31313131  1.41414141  1.51515152  1.61616162  1.71717172\n  1.81818182  1.91919192  2.02020202  2.12121212  2.22222222  2.32323232\n  2.42424242  2.52525253  2.62626263  2.72727273  2.82828283  2.92929293\n  3.03030303  3.13131313  3.23232323  3.33333333  3.43434343  3.53535354\n  3.63636364  3.73737374  3.83838384  3.93939394  4.04040404  4.14141414\n  4.24242424  4.34343434  4.44444444  4.54545455  4.64646465  4.74747475\n  4.84848485  4.94949495  5.05050505  5.15151515  5.25252525  5.35353535\n  5.45454545  5.55555556  5.65656566  5.75757576  5.85858586  5.95959596\n  6.06060606  6.16161616  6.26262626  6.36363636  6.46464646  6.56565657\n  6.66666667  6.76767677  6.86868687  6.96969697  7.07070707  7.17171717\n  7.27272727  7.37373737  7.47474747  7.57575758  7.67676768  7.77777778\n  7.87878788  7.97979798  8.08080808  8.18181818  8.28282828  8.38383838\n  8.48484848  8.58585859  8.68686869  8.78787879  8.88888889  8.98989899\n  9.09090909  9.19191919  9.29292929  9.39393939  9.49494949  9.5959596\n  9.6969697   9.7979798   9.8989899  10.        ]\n\n\n\n## Plotting with matplotlib\n\n\nimport matplotlib.pyplot as plt\n\n\nplt.plot(z, z**2)\n\n\n\n\n\nz = np.linspace(-10, 10, 100)\nplt.axes()\nplt.plot(z, np.cos(z), color=\"red\")\nplt.title(\"A cosine curve\")\nplt.grid()\nplt.xlim(-10, 10)\nplt.ylim(-10, 10)\nplt.xticks(list(range(-10, 11)))\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\n\nText(0, 0.5, 'y')"
  }
]