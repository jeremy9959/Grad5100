[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Fundamentals of Machine Learning",
    "section": "",
    "text": "Fundamentals of Machine Learning\nThis site contains resources for UConn’s “Fundamentals of Machine Learning” Course."
  },
  {
    "objectID": "chapters/01-SettingUp/setting-up.html",
    "href": "chapters/01-SettingUp/setting-up.html",
    "title": "Key Tools for Data Science",
    "section": "",
    "text": "Download from https://www.anaconda.com\n\nAnaconda includes:\n\npython\njupyter: notebook working environment\npython libraries: ML, visualization, I/O and others\nconda package manager: for dealing with multiple versions of libraries\nanaconda navigator: a GUI gateway to anaconda tools\nlots of other stuff\n\n\n\n\n\nVerify JupyterLab\n\nFrom a command line\n$ jupyter lab \nor use anaconda navigator to launch jupyterlab.\n\n\nVerify python version\n\nFrom a command line\n$ python --version\nor inside a jupyter notebook cell:\nimport sys\n\nprint(sys.version)\n\n\n\n\nR is an open source language for statistical computations.\nRstudio is a working environment for the R language.\nR and Rstudio need to be installed separately.\nR is available at https://cran.r-project.org\nRstudio is available at https://posit.co/download/rstudio-desktop\n\n\n\n\nFor R, From a command line:\n$ R \nFor Rstudio, use the icon/shortcut or from a command line:\n$ rstudio \n\n\n\n\nvscode is a very powerful “IDE” (integrated development environment).\nit can integrate jupyter notebooks and r workbooks, though it takes some setting up\nvscode is integrated with GitHub copilot, a version of ChatGPT-3 that helps write code.\nvscode is available at http://code.visualstudio.com for windows, linux, and macOS.\n\n\n\n\nVSCode (visual studio code) is a freely distributed code editor/IDE distributed by microsoft.\nIt is extremely capable and well-suited for software development in python and other languages.\nIt is perhaps not as optimized for R as Rstudio but it does work.\nYou can access github copilot a version of chatGPT optimized for code, inside vscode in a straightforward way.\n\n\n\nThe software is available here.\nYou need a github account to use github copilot, and you need to sign in to that account from inside vscode. GitHub copilot is free to students, but you need to sign up for the student developer pack..\n\n\n\n\n\nOpening folders (as projects)\nOpening files\nInstall Extensions:\n\npython\nR\nmany others\n\nThe command palette\n\n\n\n\n\njupyter notebooks inside vscode with github copilot\nInteractive python with code cells (# %%)\nThe terminal\n\n\n\n\n\nCreate a project directory\nSubdirectories\n\ndata for data files\ndocs for notes and documentation\nothers?\n\nCreate a README.md file\n\n\n\n\nFor the directories:\n\nthe finder or File Manager\nthe command line\n\nFor the README file:\n\na text editor such as nano or notepad\njupyter or Rstudio (as we will see soon)\nvscode"
  },
  {
    "objectID": "chapters/01-SettingUp/setting-up.html#anaconda-install-for-python",
    "href": "chapters/01-SettingUp/setting-up.html#anaconda-install-for-python",
    "title": "Key Tools for Data Science",
    "section": "",
    "text": "Download from https://www.anaconda.com\n\nAnaconda includes:\n\npython\njupyter: notebook working environment\npython libraries: ML, visualization, I/O and others\nconda package manager: for dealing with multiple versions of libraries\nanaconda navigator: a GUI gateway to anaconda tools\nlots of other stuff"
  },
  {
    "objectID": "chapters/01-SettingUp/setting-up.html#verify-anaconda",
    "href": "chapters/01-SettingUp/setting-up.html#verify-anaconda",
    "title": "Key Tools for Data Science",
    "section": "",
    "text": "Verify JupyterLab\n\nFrom a command line\n$ jupyter lab \nor use anaconda navigator to launch jupyterlab.\n\n\nVerify python version\n\nFrom a command line\n$ python --version\nor inside a jupyter notebook cell:\nimport sys\n\nprint(sys.version)"
  },
  {
    "objectID": "chapters/01-SettingUp/setting-up.html#r-and-rstudio-install-for-r",
    "href": "chapters/01-SettingUp/setting-up.html#r-and-rstudio-install-for-r",
    "title": "Key Tools for Data Science",
    "section": "",
    "text": "R is an open source language for statistical computations.\nRstudio is a working environment for the R language.\nR and Rstudio need to be installed separately.\nR is available at https://cran.r-project.org\nRstudio is available at https://posit.co/download/rstudio-desktop"
  },
  {
    "objectID": "chapters/01-SettingUp/setting-up.html#verify-r-and-rstudio",
    "href": "chapters/01-SettingUp/setting-up.html#verify-r-and-rstudio",
    "title": "Key Tools for Data Science",
    "section": "",
    "text": "For R, From a command line:\n$ R \nFor Rstudio, use the icon/shortcut or from a command line:\n$ rstudio"
  },
  {
    "objectID": "chapters/01-SettingUp/setting-up.html#vscode",
    "href": "chapters/01-SettingUp/setting-up.html#vscode",
    "title": "Key Tools for Data Science",
    "section": "",
    "text": "vscode is a very powerful “IDE” (integrated development environment).\nit can integrate jupyter notebooks and r workbooks, though it takes some setting up\nvscode is integrated with GitHub copilot, a version of ChatGPT-3 that helps write code.\nvscode is available at http://code.visualstudio.com for windows, linux, and macOS."
  },
  {
    "objectID": "chapters/01-SettingUp/setting-up.html#using-vscode",
    "href": "chapters/01-SettingUp/setting-up.html#using-vscode",
    "title": "Key Tools for Data Science",
    "section": "",
    "text": "VSCode (visual studio code) is a freely distributed code editor/IDE distributed by microsoft.\nIt is extremely capable and well-suited for software development in python and other languages.\nIt is perhaps not as optimized for R as Rstudio but it does work.\nYou can access github copilot a version of chatGPT optimized for code, inside vscode in a straightforward way."
  },
  {
    "objectID": "chapters/01-SettingUp/setting-up.html#installing-vscode",
    "href": "chapters/01-SettingUp/setting-up.html#installing-vscode",
    "title": "Key Tools for Data Science",
    "section": "",
    "text": "The software is available here.\nYou need a github account to use github copilot, and you need to sign in to that account from inside vscode. GitHub copilot is free to students, but you need to sign up for the student developer pack.."
  },
  {
    "objectID": "chapters/01-SettingUp/setting-up.html#overview-of-vscode",
    "href": "chapters/01-SettingUp/setting-up.html#overview-of-vscode",
    "title": "Key Tools for Data Science",
    "section": "",
    "text": "Opening folders (as projects)\nOpening files\nInstall Extensions:\n\npython\nR\nmany others\n\nThe command palette"
  },
  {
    "objectID": "chapters/01-SettingUp/setting-up.html#more-on-vscode",
    "href": "chapters/01-SettingUp/setting-up.html#more-on-vscode",
    "title": "Key Tools for Data Science",
    "section": "",
    "text": "jupyter notebooks inside vscode with github copilot\nInteractive python with code cells (# %%)\nThe terminal"
  },
  {
    "objectID": "chapters/01-SettingUp/setting-up.html#setting-up-a-project",
    "href": "chapters/01-SettingUp/setting-up.html#setting-up-a-project",
    "title": "Key Tools for Data Science",
    "section": "",
    "text": "Create a project directory\nSubdirectories\n\ndata for data files\ndocs for notes and documentation\nothers?\n\nCreate a README.md file"
  },
  {
    "objectID": "chapters/01-SettingUp/setting-up.html#tools",
    "href": "chapters/01-SettingUp/setting-up.html#tools",
    "title": "Key Tools for Data Science",
    "section": "",
    "text": "For the directories:\n\nthe finder or File Manager\nthe command line\n\nFor the README file:\n\na text editor such as nano or notepad\njupyter or Rstudio (as we will see soon)\nvscode"
  },
  {
    "objectID": "chapters/02-JupyterBasics/jupyter-walkthrough.html",
    "href": "chapters/02-JupyterBasics/jupyter-walkthrough.html",
    "title": "Jupyter Lab and Python Walkthrough",
    "section": "",
    "text": "Use the ‘text editor’ feature in Jupyter Lab to create your README.md file.\nRENAME YOUR NOTEBOOK FILE IMMEDIATELY to something relevant\nCTRL-ENTER executes a cell.\n\n\n\nThis is a markdown cell:\n\nHeadings are #, ##, etc.\nBold is marked **make me bold** like this.\nItalics are marked *make me italic* like this.\nMath can be typeset with if you know it: \\[f(x)=e^{-x}\\cos(x)\\]\nBulleted lists are marked with -.\n\n\n# code cells\n## Code cells contain python code that gets executed.\n# indicates a comment that is ignored.\nprint(\"Hello World!\")\n\nHello World!\n\n\nIn this walkthrough we will look at the following elements of Python in a jupyter notebook.\nThe print statement\n\nprint(\"hello world!\")\n\nhello world!\n\n\nVariables, variable names, and assignment/datatypes\n\ncount = 5  # an integer\nname = \"Jeremy Teitelbaum\"  # a string\nparagraph = \"\"\"This is how you enter a multiline string\nin python. It is enclosed in triple quotes.\"\"\"\npi = 3.14159  # a float\nepsilon = 1.0e-6  # a float\nstudents = [\"Jeremy\", \"Phillip\", \"Sara\", \"Molly\"]  # a list\nHotDog = True\n\n\nprint(students)\n\n['Jeremy', 'Phillip', 'Sara', 'Molly']\n\n\nCompare print for multiline strings with the string value. (\\n means newline)\n\nprint(paragraph)\n\nThis is how you enter a multiline string\nin python. It is enclosed in triple quotes.\n\n\n\nparagraph\n\n'This is how you enter a multiline string\\nin python. It is enclosed in triple quotes.'\n\n\nArithmetic operations\n\nprint(count)\ncount = count + 1\nprint(count)\n\n5\n6\n\n\n\n1 / pi\n\n0.31831015504887655\n\n\n\nprint(2**3)  # exponent\nprint(1 / 2)  # division (converts integer to float)\nprint(1 / (1 / 2))  # 2 becomes 2.0\n\n8\n0.5\n2.0\n\n\n\nquotient = 5 // 3  # integer division\nremainder = 5 % 3  # remainder\nprint(quotient, remainder)\n\n1 2\n\n\nOperations on strings and lists\n\n\"Jeremy\" + \" Teitelbaum\"\n\n'Jeremy Teitelbaum'\n\n\n\n[\"a\", \"b\", \"c\"] + [\"d\"]\n\n['a', 'b', 'c', 'd']\n\n\n\nlen(\"Jeremy\")\n\n6\n\n\n\nlen([\"Jeremy\", \"Teitelbaum\"])\n\n2\n\n\n\nfirstName = \"Jeremy\"\nlastName = \"Teitelbaum\"\nfullName = firstName + \" \" + lastName\n\nSome fancier printing\n\nprint(f\"The first name is {firstName}\")\nprint(f\"The last name is {lastName}\")\nprint(f\"The full name is {firstName} {lastName}\")\nprint(firstName, lastName, sep=\",\")\nprint(firstName, lastName, sep=\":\")\n\nThe first name is Jeremy\nThe last name is Teitelbaum\nThe full name is Jeremy Teitelbaum\nJeremy,Teitelbaum\nJeremy:Teitelbaum\n\n\nSlicing\nIn python, we always count from zero!!!\n\nfirstName[0]\n\n'J'\n\n\n\nlastName[1]\n\n'e'\n\n\n\n# [a:b] means from a to b-1 inclusive\n\nprint(firstName[0:3])\nprint(firstName[3:])\nprint(firstName[3:5])\n\nJer\nemy\nem\n\n\n\n# negative indices count from the end\nprint(firstName[-1])  # the last element\nprint(firstName[-3:-1])  # elements -3 and -2, but not -1\n\ny\nem\n\n\n\n# [a:b:c] means from a to b-1 in steps of c\n# missing numbers mean (beginnging):(end)\nprint(firstName[:5:2])\nprint(firstName[::2])\nprint(firstName[::-1])  # reverse the string\nprint(firstName[3::-1])  # 3,2,1,0\nprint(firstName[3:0:-1])  # 3,2,1\n\nJrm\nJrm\nymereJ\nereJ\nere\n\n\nSlices work the same on list elements\n\nprint(students[0])\nprint(students[-1])\nevery_other_student = students[::2]\nprint(every_other_student)\n\nJeremy\nMolly\n['Jeremy', 'Sara']\n\n\nLibraries\n\nimport math\n\n\nmath.log(23)\n\n3.1354942159291497\n\n\n\nmath.pi\n\n3.141592653589793\n\n\n\nmath.cos(math.pi / 2)  # should be zero\n\n6.123233995736766e-17\n\n\n\nmath.cos(math.pi / 2) == 0\n\nFalse\n\n\n\nabs(math.cos(math.pi / 2)) &lt; 1e-6\n\nTrue\n\n\n\nmath.pi == pi\n\nFalse\n\n\n\nimport numpy as np\n\n\nprint(np.random.randint(0, 10))\n\n1\n\n\n\nprint(np.__version__)\n\n1.24.2\n\n\n\nfrom numpy.random import randint\n\n\nrandint(1, 10)\n\n5\n\n\n\n\n\nA numpy array is like a list, but:\n- it's itended for use with numbers\n- it's designed for fast arithmetic and numerical operations\n- it can be multi-dimensional -- like a table or matrix -- although we won't use that here.\n\nx = np.array([1, 2, 3, 4, 5, 6])\nprint(x)\n\n[1 2 3 4 5 6]\n\n\nYou access arrays like lists, and can use slices; indices start at zero.\n\nx[2:4]\n\narray([3, 4])\n\n\nWhen you apply an operation to an array, it gets applied to every element of the array.\n\nprint(f\"Square of x is {x**2}\")\nprint(f\"1/x is {1/x}\")\nprint(f\"cos(x) is {np.cos(x)}\")\n\nSquare of x is [ 1  4  9 16 25 36]\n1/x is [1.         0.5        0.33333333 0.25       0.2        0.16666667]\ncos(x) is [ 0.54030231 -0.41614684 -0.9899925  -0.65364362  0.28366219  0.96017029]\n\n\nSome special arrays.\n\nx = np.zeros(10)  # 10 zeros\ny = np.ones(20)  # 20 ones\nz = np.linspace(0, 10, 100)  # 100 equally spaced numbers from 0 to 10 **inclusive**\nw = np.array(list(range(-10, 10, 2)))\n\n\nprint(w)\n\n[-10  -8  -6  -4  -2   0   2   4   6   8]\n\n\n\nprint(z)\n\n[ 0.          0.1010101   0.2020202   0.3030303   0.4040404   0.50505051\n  0.60606061  0.70707071  0.80808081  0.90909091  1.01010101  1.11111111\n  1.21212121  1.31313131  1.41414141  1.51515152  1.61616162  1.71717172\n  1.81818182  1.91919192  2.02020202  2.12121212  2.22222222  2.32323232\n  2.42424242  2.52525253  2.62626263  2.72727273  2.82828283  2.92929293\n  3.03030303  3.13131313  3.23232323  3.33333333  3.43434343  3.53535354\n  3.63636364  3.73737374  3.83838384  3.93939394  4.04040404  4.14141414\n  4.24242424  4.34343434  4.44444444  4.54545455  4.64646465  4.74747475\n  4.84848485  4.94949495  5.05050505  5.15151515  5.25252525  5.35353535\n  5.45454545  5.55555556  5.65656566  5.75757576  5.85858586  5.95959596\n  6.06060606  6.16161616  6.26262626  6.36363636  6.46464646  6.56565657\n  6.66666667  6.76767677  6.86868687  6.96969697  7.07070707  7.17171717\n  7.27272727  7.37373737  7.47474747  7.57575758  7.67676768  7.77777778\n  7.87878788  7.97979798  8.08080808  8.18181818  8.28282828  8.38383838\n  8.48484848  8.58585859  8.68686869  8.78787879  8.88888889  8.98989899\n  9.09090909  9.19191919  9.29292929  9.39393939  9.49494949  9.5959596\n  9.6969697   9.7979798   9.8989899  10.        ]\n\n\n\n## Plotting with matplotlib\n\n\nimport matplotlib.pyplot as plt\n\n\nplt.plot(z, z**2)\n\n\n\n\n\nz = np.linspace(-10, 10, 100)\nplt.axes()\nplt.plot(z, np.cos(z), color=\"red\")\nplt.title(\"A cosine curve\")\nplt.grid()\nplt.xlim(-10, 10)\nplt.ylim(-10, 10)\nplt.xticks(list(range(-10, 11)))\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\n\nText(0, 0.5, 'y')"
  },
  {
    "objectID": "chapters/02-JupyterBasics/jupyter-walkthrough.html#markdown-cells",
    "href": "chapters/02-JupyterBasics/jupyter-walkthrough.html#markdown-cells",
    "title": "Jupyter Lab and Python Walkthrough",
    "section": "",
    "text": "This is a markdown cell:\n\nHeadings are #, ##, etc.\nBold is marked **make me bold** like this.\nItalics are marked *make me italic* like this.\nMath can be typeset with if you know it: \\[f(x)=e^{-x}\\cos(x)\\]\nBulleted lists are marked with -.\n\n\n# code cells\n## Code cells contain python code that gets executed.\n# indicates a comment that is ignored.\nprint(\"Hello World!\")\n\nHello World!\n\n\nIn this walkthrough we will look at the following elements of Python in a jupyter notebook.\nThe print statement\n\nprint(\"hello world!\")\n\nhello world!\n\n\nVariables, variable names, and assignment/datatypes\n\ncount = 5  # an integer\nname = \"Jeremy Teitelbaum\"  # a string\nparagraph = \"\"\"This is how you enter a multiline string\nin python. It is enclosed in triple quotes.\"\"\"\npi = 3.14159  # a float\nepsilon = 1.0e-6  # a float\nstudents = [\"Jeremy\", \"Phillip\", \"Sara\", \"Molly\"]  # a list\nHotDog = True\n\n\nprint(students)\n\n['Jeremy', 'Phillip', 'Sara', 'Molly']\n\n\nCompare print for multiline strings with the string value. (\\n means newline)\n\nprint(paragraph)\n\nThis is how you enter a multiline string\nin python. It is enclosed in triple quotes.\n\n\n\nparagraph\n\n'This is how you enter a multiline string\\nin python. It is enclosed in triple quotes.'\n\n\nArithmetic operations\n\nprint(count)\ncount = count + 1\nprint(count)\n\n5\n6\n\n\n\n1 / pi\n\n0.31831015504887655\n\n\n\nprint(2**3)  # exponent\nprint(1 / 2)  # division (converts integer to float)\nprint(1 / (1 / 2))  # 2 becomes 2.0\n\n8\n0.5\n2.0\n\n\n\nquotient = 5 // 3  # integer division\nremainder = 5 % 3  # remainder\nprint(quotient, remainder)\n\n1 2\n\n\nOperations on strings and lists\n\n\"Jeremy\" + \" Teitelbaum\"\n\n'Jeremy Teitelbaum'\n\n\n\n[\"a\", \"b\", \"c\"] + [\"d\"]\n\n['a', 'b', 'c', 'd']\n\n\n\nlen(\"Jeremy\")\n\n6\n\n\n\nlen([\"Jeremy\", \"Teitelbaum\"])\n\n2\n\n\n\nfirstName = \"Jeremy\"\nlastName = \"Teitelbaum\"\nfullName = firstName + \" \" + lastName\n\nSome fancier printing\n\nprint(f\"The first name is {firstName}\")\nprint(f\"The last name is {lastName}\")\nprint(f\"The full name is {firstName} {lastName}\")\nprint(firstName, lastName, sep=\",\")\nprint(firstName, lastName, sep=\":\")\n\nThe first name is Jeremy\nThe last name is Teitelbaum\nThe full name is Jeremy Teitelbaum\nJeremy,Teitelbaum\nJeremy:Teitelbaum\n\n\nSlicing\nIn python, we always count from zero!!!\n\nfirstName[0]\n\n'J'\n\n\n\nlastName[1]\n\n'e'\n\n\n\n# [a:b] means from a to b-1 inclusive\n\nprint(firstName[0:3])\nprint(firstName[3:])\nprint(firstName[3:5])\n\nJer\nemy\nem\n\n\n\n# negative indices count from the end\nprint(firstName[-1])  # the last element\nprint(firstName[-3:-1])  # elements -3 and -2, but not -1\n\ny\nem\n\n\n\n# [a:b:c] means from a to b-1 in steps of c\n# missing numbers mean (beginnging):(end)\nprint(firstName[:5:2])\nprint(firstName[::2])\nprint(firstName[::-1])  # reverse the string\nprint(firstName[3::-1])  # 3,2,1,0\nprint(firstName[3:0:-1])  # 3,2,1\n\nJrm\nJrm\nymereJ\nereJ\nere\n\n\nSlices work the same on list elements\n\nprint(students[0])\nprint(students[-1])\nevery_other_student = students[::2]\nprint(every_other_student)\n\nJeremy\nMolly\n['Jeremy', 'Sara']\n\n\nLibraries\n\nimport math\n\n\nmath.log(23)\n\n3.1354942159291497\n\n\n\nmath.pi\n\n3.141592653589793\n\n\n\nmath.cos(math.pi / 2)  # should be zero\n\n6.123233995736766e-17\n\n\n\nmath.cos(math.pi / 2) == 0\n\nFalse\n\n\n\nabs(math.cos(math.pi / 2)) &lt; 1e-6\n\nTrue\n\n\n\nmath.pi == pi\n\nFalse\n\n\n\nimport numpy as np\n\n\nprint(np.random.randint(0, 10))\n\n1\n\n\n\nprint(np.__version__)\n\n1.24.2\n\n\n\nfrom numpy.random import randint\n\n\nrandint(1, 10)\n\n5"
  },
  {
    "objectID": "chapters/02-JupyterBasics/jupyter-walkthrough.html#numpy-arrays",
    "href": "chapters/02-JupyterBasics/jupyter-walkthrough.html#numpy-arrays",
    "title": "Jupyter Lab and Python Walkthrough",
    "section": "",
    "text": "A numpy array is like a list, but:\n- it's itended for use with numbers\n- it's designed for fast arithmetic and numerical operations\n- it can be multi-dimensional -- like a table or matrix -- although we won't use that here.\n\nx = np.array([1, 2, 3, 4, 5, 6])\nprint(x)\n\n[1 2 3 4 5 6]\n\n\nYou access arrays like lists, and can use slices; indices start at zero.\n\nx[2:4]\n\narray([3, 4])\n\n\nWhen you apply an operation to an array, it gets applied to every element of the array.\n\nprint(f\"Square of x is {x**2}\")\nprint(f\"1/x is {1/x}\")\nprint(f\"cos(x) is {np.cos(x)}\")\n\nSquare of x is [ 1  4  9 16 25 36]\n1/x is [1.         0.5        0.33333333 0.25       0.2        0.16666667]\ncos(x) is [ 0.54030231 -0.41614684 -0.9899925  -0.65364362  0.28366219  0.96017029]\n\n\nSome special arrays.\n\nx = np.zeros(10)  # 10 zeros\ny = np.ones(20)  # 20 ones\nz = np.linspace(0, 10, 100)  # 100 equally spaced numbers from 0 to 10 **inclusive**\nw = np.array(list(range(-10, 10, 2)))\n\n\nprint(w)\n\n[-10  -8  -6  -4  -2   0   2   4   6   8]\n\n\n\nprint(z)\n\n[ 0.          0.1010101   0.2020202   0.3030303   0.4040404   0.50505051\n  0.60606061  0.70707071  0.80808081  0.90909091  1.01010101  1.11111111\n  1.21212121  1.31313131  1.41414141  1.51515152  1.61616162  1.71717172\n  1.81818182  1.91919192  2.02020202  2.12121212  2.22222222  2.32323232\n  2.42424242  2.52525253  2.62626263  2.72727273  2.82828283  2.92929293\n  3.03030303  3.13131313  3.23232323  3.33333333  3.43434343  3.53535354\n  3.63636364  3.73737374  3.83838384  3.93939394  4.04040404  4.14141414\n  4.24242424  4.34343434  4.44444444  4.54545455  4.64646465  4.74747475\n  4.84848485  4.94949495  5.05050505  5.15151515  5.25252525  5.35353535\n  5.45454545  5.55555556  5.65656566  5.75757576  5.85858586  5.95959596\n  6.06060606  6.16161616  6.26262626  6.36363636  6.46464646  6.56565657\n  6.66666667  6.76767677  6.86868687  6.96969697  7.07070707  7.17171717\n  7.27272727  7.37373737  7.47474747  7.57575758  7.67676768  7.77777778\n  7.87878788  7.97979798  8.08080808  8.18181818  8.28282828  8.38383838\n  8.48484848  8.58585859  8.68686869  8.78787879  8.88888889  8.98989899\n  9.09090909  9.19191919  9.29292929  9.39393939  9.49494949  9.5959596\n  9.6969697   9.7979798   9.8989899  10.        ]\n\n\n\n## Plotting with matplotlib\n\n\nimport matplotlib.pyplot as plt\n\n\nplt.plot(z, z**2)\n\n\n\n\n\nz = np.linspace(-10, 10, 100)\nplt.axes()\nplt.plot(z, np.cos(z), color=\"red\")\nplt.title(\"A cosine curve\")\nplt.grid()\nplt.xlim(-10, 10)\nplt.ylim(-10, 10)\nplt.xticks(list(range(-10, 11)))\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\n\nText(0, 0.5, 'y')"
  },
  {
    "objectID": "chapters/03-RBasics/r-walkthrough.html",
    "href": "chapters/03-RBasics/r-walkthrough.html",
    "title": "R Notebook Walkthrough",
    "section": "",
    "text": "Start out with a code cell saying “Hello World”\nprint(\"Hello World\")\n\n[1] \"Hello World\"\nThe cat command is actually probably more useful than print:\ncat(\"hello world\")\n\nhello world"
  },
  {
    "objectID": "chapters/03-RBasics/r-walkthrough.html#variables-types-and-assignment",
    "href": "chapters/03-RBasics/r-walkthrough.html#variables-types-and-assignment",
    "title": "R Notebook Walkthrough",
    "section": "Variables, Types, and Assignment",
    "text": "Variables, Types, and Assignment\nIn R, the assignment operator is &lt;-, not =. This takes some getting used to.\n\ncount &lt;- 5\nname &lt;- \"Jeremy Teitelbaum\" # string types are called chr for character\nparagraph &lt;- \"Far across the misty mountains cold,\nto dungeons deep and caverns cold,\nwe must away,\nere break of day\nto seek our long forgotten gold.\"\npi &lt;- 3.14159 # R doesn't use integer types unless you force it to, numbers are \"num\" # nolint: line_length_linter.\nepsilon &lt;- 1e-6\ncount &lt;- 5L # this forces an integer\nstudents &lt;- c(\"Jeremy\", \"Phillip\", \"Sara\", \"Molly\")\nhot_dog &lt;- TRUE # note all caps unlike Python; false is FALSE\n\nIn R, you can give names to the elements of a vector.\n\nprint(\"hello\")\n\n[1] \"hello\"\n\n\n\nnames(students) &lt;- c(\"President\", \"Vice President\", \"Treasurer\", \"Secretary\")\nprint(names(students))\n\n[1] \"President\"      \"Vice President\" \"Treasurer\"      \"Secretary\"     \n\nprint(students[\"President\"])\n\nPresident \n \"Jeremy\" \n\nprint(students)\n\n     President Vice President      Treasurer      Secretary \n      \"Jeremy\"      \"Phillip\"         \"Sara\"        \"Molly\" \n\n\nThe cat command is a print command that “concatenates” its arguments; it needs an explicit newline.\n\nprint(students)\n\n     President Vice President      Treasurer      Secretary \n      \"Jeremy\"      \"Phillip\"         \"Sara\"        \"Molly\" \n\nprint(count)\n\n[1] 5\n\ncat(\"Students:\", students, \"\\n\")\n\nStudents: Jeremy Phillip Sara Molly \n\nprint(epsilon)\n\n[1] 1e-06\n\ncat(\"The value of epsilon is:\", epsilon, \"\\n\")\n\nThe value of epsilon is: 1e-06 \n\nprint(paragraph)\n\n[1] \"Far across the misty mountains cold,\\nto dungeons deep and caverns cold,\\nwe must away,\\nere break of day\\nto seek our long forgotten gold.\"\n\ncat(paragraph)\n\nFar across the misty mountains cold,\nto dungeons deep and caverns cold,\nwe must away,\nere break of day\nto seek our long forgotten gold.\n\n\nThe [1] at the beginning of each of these things reflects the fact that in R everything is a vector. So it is telling you that the first thing there is element 1 of the vector.\nThe c() command makes a vector of its arguments. It forces everything to be of the same type.\n\nstr_list &lt;- c(\"Jeremy\", 25, 1.34, FALSE) # everything becomes a string\nint_list &lt;- c(1, 2, 3, 4, 5)\nfloat_list &lt;- c(1, 2, 3.5, 4)"
  },
  {
    "objectID": "chapters/03-RBasics/r-walkthrough.html#arithmetic",
    "href": "chapters/03-RBasics/r-walkthrough.html#arithmetic",
    "title": "R Notebook Walkthrough",
    "section": "Arithmetic",
    "text": "Arithmetic\nR does all arithmetic on vectors/lists. It one is shorter than the other, it repeats the shorter one, but the length of the longer has to be a multiple of the shorter.\n\na &lt;- 1\nb &lt;- 2\na + b\n\n[1] 3\n\n\n\na &lt;- c(1, 2, 3, 4, 5)\nb &lt;- 4\na + b\n\n[1] 5 6 7 8 9\n\n\n\na &lt;- c(1, 2, 3, 4, 5, 6)\nb &lt;- c(10, 11)\na + b\n\n[1] 11 13 13 15 15 17\n\n\n\na &lt;- c(1, 2, 3, 4, 5)\nb &lt;- c(1, 2)\na + b\n\nWarning in a + b: longer object length is not a multiple of shorter object\nlength\n\n\n[1] 2 4 4 6 6\n\n\n\na / 5\n\n[1] 0.2 0.4 0.6 0.8 1.0\n\n\n\n# integer division (// in python)\na &lt;- 5L\nb &lt;- 3\na %/% b\n\n[1] 1\n\n\n\n# remainder (% in python)\na &lt;- 5\nb &lt;- 3\na %% b\n\n[1] 2\n\n\n\na &lt;- c(1, 2, 3, 4, 5)\na^2\n\n[1]  1  4  9 16 25\n\n\n\nprint(a^2 == a)\n\n[1]  TRUE FALSE FALSE FALSE FALSE\n\nprint(a^2 &gt; a)\n\n[1] FALSE  TRUE  TRUE  TRUE  TRUE\n\nprint(a^2 == 4)\n\n[1] FALSE  TRUE FALSE FALSE FALSE"
  },
  {
    "objectID": "chapters/03-RBasics/r-walkthrough.html#operations-on-strings-and-lists",
    "href": "chapters/03-RBasics/r-walkthrough.html#operations-on-strings-and-lists",
    "title": "R Notebook Walkthrough",
    "section": "Operations on strings and lists",
    "text": "Operations on strings and lists\n\nfirst_name &lt;- \"Jeremy\"\nlast_name &lt;- \"Teitelbaum\"\nnchar(first_name)\n\n[1] 6\n\n\n\npaste(first_name, last_name) # spaces by default\n\n[1] \"Jeremy Teitelbaum\"\n\n\n\npaste(first_name, last_name, sep = \"\") # no space\n\n[1] \"JeremyTeitelbaum\"\n\n\n\npaste(c(1, 2, 3), \"Jeremy\") # remember functions work across vectors\n\n[1] \"1 Jeremy\" \"2 Jeremy\" \"3 Jeremy\""
  },
  {
    "objectID": "chapters/03-RBasics/r-walkthrough.html#substrings",
    "href": "chapters/03-RBasics/r-walkthrough.html#substrings",
    "title": "R Notebook Walkthrough",
    "section": "Substrings",
    "text": "Substrings\nIn R, you always count from 1 (big difference from python)\n\nfirst_name[1] # another difference from Python\n\n[1] \"Jeremy\"\n\n\n\na &lt;- substr(\"Jeremy\", 1, 1)\nb &lt;- substr(\"Jeremy\", 1, 3)\ncat(a, b, paste(a, b, sep = \"\"))\n\nJ Jer JJer"
  },
  {
    "objectID": "chapters/03-RBasics/r-walkthrough.html#slicing-lists",
    "href": "chapters/03-RBasics/r-walkthrough.html#slicing-lists",
    "title": "R Notebook Walkthrough",
    "section": "Slicing lists",
    "text": "Slicing lists\n\nnums &lt;- 0:10 # generates a sequence from 0 to 10 INCLUSIVE (compare python)\nprint(nums)\n\n [1]  0  1  2  3  4  5  6  7  8  9 10\n\nprint(nums[c(1, 3)]) # you can pass a list of indices to a subscript\n\n[1] 0 2\n\n\n\nsqrs &lt;- nums^2\nsqrs[seq(1, 10, 2)]\n\n[1]  0  4 16 36 64\n\n\nIn R, negative numbers in seq mean “omit” so this means omit entries 2 through 5. You can’t mix positive and negative numbers\n\nrev &lt;- nums[seq(-2, -5)]\nprint(rev)\n\n[1]  0  5  6  7  8  9 10\n\n\n\nrev(nums) # reverses the list\n\n [1] 10  9  8  7  6  5  4  3  2  1  0"
  },
  {
    "objectID": "chapters/03-RBasics/r-walkthrough.html#libraries-and-packages",
    "href": "chapters/03-RBasics/r-walkthrough.html#libraries-and-packages",
    "title": "R Notebook Walkthrough",
    "section": "Libraries and packages",
    "text": "Libraries and packages\nUse the Rstudio package manager to add libraries to your installation, but to use them you need to use the library function. The tidyverse library is something we will use a lot.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.1     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "chapters/03-RBasics/r-walkthrough.html#plotting",
    "href": "chapters/03-RBasics/r-walkthrough.html#plotting",
    "title": "R Notebook Walkthrough",
    "section": "Plotting",
    "text": "Plotting\n\nlibrary(ggplot2)\n\n\nx &lt;- seq(-10, 10, .1)\ny &lt;- x**2\ndata &lt;- tibble(\"x\" = x, \"y\" = y)\n\n\nggplot(data = data, aes(x = x)) +\n    geom_point(aes(y = y), color = \"red\") +\n    ggtitle(\"A Parabola\") +\n    scale_x_continuous(breaks = seq(-10, 10, 1)) +\n    scale_y_continuous(breaks = seq(0, 100, 20))\n\n\n\n\n\nx &lt;- seq(-10, 10, .1)\ny &lt;- cos(x)\ndata &lt;- tibble(\"x\" = x, \"y\" = y)\nggplot(data = data, aes(x = x)) +\n    geom_line(aes(y = y), color = \"darkgreen\") +\n    ggtitle(\"A Cosine Curve\") +\n    scale_x_continuous(breaks = seq(-10, 10, 1)) +\n    scale_y_continuous(breaks = seq(-1, 1, 5))"
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html",
    "href": "chapters/04-StatBasics/stat-basics.html",
    "title": "Statistical Basics",
    "section": "",
    "text": "── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.1     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#probability-theory",
    "href": "chapters/04-StatBasics/stat-basics.html#probability-theory",
    "title": "Statistical Basics",
    "section": "Probability Theory",
    "text": "Probability Theory\nProbability theory is based on:\n\nAn underlying collection \\(S\\) of all possible outcomes (a population or sample space) of an experiment.\nA rule \\(P\\) that assigns a number between zero and one to each subset of the sample space satisfying certain rules."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#sample-space",
    "href": "chapters/04-StatBasics/stat-basics.html#sample-space",
    "title": "Statistical Basics",
    "section": "Sample Space",
    "text": "Sample Space\nFor example:\n\nFor a flip of a single coin, the possible outcomes are Heads and Tails and the sample space has two elements. For multiple flips, the outcomes are sequences of Heads and Tails.\nFor a measurement of temperature, we might model the possible outcomes, or the sample space, as all real numbers, recognizing that only some of them are actually possible results of the experiment."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#simple-events",
    "href": "chapters/04-StatBasics/stat-basics.html#simple-events",
    "title": "Statistical Basics",
    "section": "Simple Events",
    "text": "Simple Events\nThe elements of the sample space or population are the outcomes or simple events or sample points.\n\nFor a flip of a coin, the possible outcomes are Heads or Tails. For multiple flips, the possible outcomes are particular sequences of Heads or Tails.\nFor a measurement of temperature, a simple event would be a particular number obtained at a particular time."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#events",
    "href": "chapters/04-StatBasics/stat-basics.html#events",
    "title": "Statistical Basics",
    "section": "Events",
    "text": "Events\nSubsets of the population make up events or outcomes.\n\nAmong the population made up of sequences of 10 coin flips, the subset consisting of sequences containing at least 3 heads is an event.\nAmong the measurements of temperature, a measurement lying between say 22 and 25 degrees celsius would be an event."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#probability-measure",
    "href": "chapters/04-StatBasics/stat-basics.html#probability-measure",
    "title": "Statistical Basics",
    "section": "Probability Measure",
    "text": "Probability Measure\nThe last element of probability theory is the function P that assigns a number between 0 and 1 to every event such that\n\n\\(P(\\emptyset)=0\\)\n\\(P(S)=1\\).\nIf \\(A\\cap B=\\emptyset\\) then \\(P(A\\cup B)=P(A)+P(B)\\). This is also required to hold for infinite collections of disjoint sets but we won’t worry much about the foundations of probability."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#random-variables",
    "href": "chapters/04-StatBasics/stat-basics.html#random-variables",
    "title": "Statistical Basics",
    "section": "Random Variables",
    "text": "Random Variables\nA random variable is a rule that assigns a number to an event.\n\nWe can assign the value 1 to heads and 0 to tails. This is a bernoulli random variable.\nOur sample space can be sets of 10 coin flips. The number of heads is a random variable.\nThe measurement of temperature yields a number.\n\nIf we pick a person at random, we can assign the value 1 if they wear glasses and 0 if not."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#discrete-vs-continuous-random-variables",
    "href": "chapters/04-StatBasics/stat-basics.html#discrete-vs-continuous-random-variables",
    "title": "Statistical Basics",
    "section": "Discrete vs Continuous Random Variables",
    "text": "Discrete vs Continuous Random Variables\nA discrete random variables takes “separate” values depending on the event. A continuous random variable takes values in a range.\n\nBernoulli random variable is discrete (0/1)\nNumber of heads in 10 flips is discrete (takes values 0,…,10)\nTemperature is continuous (in principle can get any reading)\nMass of a penguin is continuous\nSpecies of penguin is discrete"
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#events-and-random-variables",
    "href": "chapters/04-StatBasics/stat-basics.html#events-and-random-variables",
    "title": "Statistical Basics",
    "section": "Events and Random Variables",
    "text": "Events and Random Variables\nSpecifying a value, or a range of values, for a random variable defines an event."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#bernoulli-example",
    "href": "chapters/04-StatBasics/stat-basics.html#bernoulli-example",
    "title": "Statistical Basics",
    "section": "Bernoulli example",
    "text": "Bernoulli example\n\nSample space is \\(\\{H,T\\}\\)\n\\(P(H)=p\\)\n\\(X\\) is the random variable with \\(X(H)=1\\) and \\(X(T)=0\\)\n\nThen:\n\n\\(X=1\\) is the same as the event \\(H\\)\n\\(P(X=1)\\)=p"
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#binomial-example",
    "href": "chapters/04-StatBasics/stat-basics.html#binomial-example",
    "title": "Statistical Basics",
    "section": "Binomial Example",
    "text": "Binomial Example\nA binomial random variable (with parameters \\(n\\) and \\(p\\)) is the sum of \\(n\\) bernoulli random variables with probability \\(p\\). It corresponds to flipping a coin (with \\(P(H)=p\\)) \\(n\\) times and counting up the heads.\nThe probability of getting \\(k\\) heads is \\[\nP(k)=\\binom{n}{k}p^k(1-p)^{n-k}\n\\]"
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#binomial-distribution",
    "href": "chapters/04-StatBasics/stat-basics.html#binomial-distribution",
    "title": "Statistical Basics",
    "section": "Binomial Distribution",
    "text": "Binomial Distribution\n\nlibrary(ggplot2)\nx &lt;- dbinom(seq(0, 10), 10, .3)\nggplot() +\n    geom_bar(aes(x = seq(0, 10), y = x), stat = \"identity\") +\n    scale_x_continuous(breaks = seq(0, 10)) +\n    xlab(\"Number of Heads\") +\n    ylab(\"Probability\") +\n    ggtitle(\"10 Flips, P(H)=.3\")"
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#continuous-example",
    "href": "chapters/04-StatBasics/stat-basics.html#continuous-example",
    "title": "Statistical Basics",
    "section": "Continuous example",
    "text": "Continuous example\n\nSample space is the possible temperatures at a particular point in space and time.\nRandom variable \\(T\\) is a measure of temperature.\n\\(P(21&lt;T&lt;22)\\) is the probability that the temperature is between 21 and 22 degrees."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#probability-density-functions",
    "href": "chapters/04-StatBasics/stat-basics.html#probability-density-functions",
    "title": "Statistical Basics",
    "section": "Probability density functions",
    "text": "Probability density functions\nIn the continuous case, probability is measured by a probability density function \\(P(x)\\). The classic example is the normal (bell-shaped) curve."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#density-functions",
    "href": "chapters/04-StatBasics/stat-basics.html#density-functions",
    "title": "Statistical Basics",
    "section": "Density Functions",
    "text": "Density Functions\nIf \\(P(x)\\) is the density function, then:\n\nthe probability that \\(x\\) lies between \\(a\\) and \\(b\\) is the area under density function between \\(a\\) and \\(b\\)."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#area-gives-probability",
    "href": "chapters/04-StatBasics/stat-basics.html#area-gives-probability",
    "title": "Statistical Basics",
    "section": "Area gives probability",
    "text": "Area gives probability\n\n\n\n\n\nThe shaded area gives probability 0.87 for temp between 21.7 and 22.3."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#standard-normal",
    "href": "chapters/04-StatBasics/stat-basics.html#standard-normal",
    "title": "Statistical Basics",
    "section": "Standard Normal",
    "text": "Standard Normal\nA normal curve is defined by two parameters:\n\nthe mean \\(\\mu\\), which sets the location\nthe standard deviation \\(\\sigma\\) or its square, the variance \\(\\sigma^2\\), which sets the scale."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#z-score",
    "href": "chapters/04-StatBasics/stat-basics.html#z-score",
    "title": "Statistical Basics",
    "section": "Z-score",
    "text": "Z-score\nIf \\(x\\) is a normal random variable with mean \\(\\mu\\) and variance \\(\\sigma^2\\), then \\[\nz = \\frac{x-\\mu}{\\sigma}\n\\] is a normal random variable with mean \\(0\\) and variance \\(1\\). This is called a \\(z\\)-score or a standard normal variable."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#cumulative-distribution",
    "href": "chapters/04-StatBasics/stat-basics.html#cumulative-distribution",
    "title": "Statistical Basics",
    "section": "Cumulative Distribution",
    "text": "Cumulative Distribution\nThe cumulative distribution is a function \\(f(x)\\) such that \\(f(x)\\) is the the percentage of samples that are less than \\(x\\)."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#cumulative-distribution-1",
    "href": "chapters/04-StatBasics/stat-basics.html#cumulative-distribution-1",
    "title": "Statistical Basics",
    "section": "Cumulative Distribution",
    "text": "Cumulative Distribution\n\n\n\n\n\nSo the median of the samples occurs where the \\(y\\)-axis is \\(.5\\)."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#quantiles",
    "href": "chapters/04-StatBasics/stat-basics.html#quantiles",
    "title": "Statistical Basics",
    "section": "Quantiles",
    "text": "Quantiles\n\nIf \\(q\\) is between \\(0\\) and \\(1\\), then the \\(q^{th}\\) quantile \\(Q\\) of a random variable \\(x\\) is the value of \\(x\\) such that the fraction of the population with \\(x&lt;Q\\) is \\(q\\).\nThe median of \\(x\\) is the \\(.5\\) quantile for \\(x\\) because half of the population has values less than the median.\nOne can read quantiles from the cumulative distribution."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#order-statistics",
    "href": "chapters/04-StatBasics/stat-basics.html#order-statistics",
    "title": "Statistical Basics",
    "section": "Order Statistics",
    "text": "Order Statistics\nThe sample median and the sample quantiles (such as the 25th percentile or 75th percentile) are examples of order statistics.\nThe smallest element, the second smallest element, and so on are other examples of order statistics."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#order-statistics-example",
    "href": "chapters/04-StatBasics/stat-basics.html#order-statistics-example",
    "title": "Statistical Basics",
    "section": "Order Statistics example",
    "text": "Order Statistics example\nWe take 100 samples from a normal distribution and compute the median, minimum, and maximum. Then we do that 10000 times and produce a histogram."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#order-statistics-histogram",
    "href": "chapters/04-StatBasics/stat-basics.html#order-statistics-histogram",
    "title": "Statistical Basics",
    "section": "Order Statistics Histogram",
    "text": "Order Statistics Histogram"
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#the-multinomial-distribution",
    "href": "chapters/04-StatBasics/stat-basics.html#the-multinomial-distribution",
    "title": "Statistical Basics",
    "section": "The multinomial distribution",
    "text": "The multinomial distribution\nThe multinomial distribution arises when you have \\(n\\) outcomes for your experiment, say \\(x_1,\\ldots, x_n\\); and the probability of getting \\(x_i\\) is \\(p_i\\). Here we have to have \\[\n\\sum p_{i}=1.\n\\]\nThis generalizes the bernoulli distribution."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#mean",
    "href": "chapters/04-StatBasics/stat-basics.html#mean",
    "title": "Statistical Basics",
    "section": "Mean",
    "text": "Mean\nThe mean of a random variable is perhaps the most important statistic associated with a probability space.\nThe mean is the “average value” of the random variable.\nThe mean of \\(x\\) is denoted \\(\\overline{x}\\) .\nExpectation or expected value is another name for the mean, and so the mean is also denoted \\(E(x)\\)."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#mean-discrete-case",
    "href": "chapters/04-StatBasics/stat-basics.html#mean-discrete-case",
    "title": "Statistical Basics",
    "section": "Mean – discrete case",
    "text": "Mean – discrete case\nIn the discrete case:\n\\[\n\\overline{x}=\\sum_{a\\in X} x(a)p(a)\n\\]\nIn other words, the mean of \\(\\overline{x}\\) is the sum of \\(x\\) at each event, weighted by the probability of that event."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#mean-of-a-bernoulli-random-variable",
    "href": "chapters/04-StatBasics/stat-basics.html#mean-of-a-bernoulli-random-variable",
    "title": "Statistical Basics",
    "section": "Mean of a bernoulli random variable",
    "text": "Mean of a bernoulli random variable\nIf \\(x\\) is bernoulli, with \\(p(x=1)=p\\), then the mean of \\(x\\) is \\[\np(1)+(1-p)(0)=p.\n\\]"
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#mean-of-a-binomial-random-variable",
    "href": "chapters/04-StatBasics/stat-basics.html#mean-of-a-binomial-random-variable",
    "title": "Statistical Basics",
    "section": "Mean of a binomial random variable",
    "text": "Mean of a binomial random variable\nIf \\(x\\) is binomial, corresponding to the sum of \\(N\\) bernoulli random variables with probability \\(p\\), then \\[\n\\overline{x} = \\sum_{0\\le i\\le N} i\\binom{N}{i}p^{i}(1-p)^{N-i}=Np\n\\]"
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#mean-continuous-case",
    "href": "chapters/04-StatBasics/stat-basics.html#mean-continuous-case",
    "title": "Statistical Basics",
    "section": "Mean – continuous case",
    "text": "Mean – continuous case\nThe mean of a continuous random variable is given by an integral:\n\\[\n\\overline{x} = \\int_{X} xp(x) dx\n\\]\nwhere \\(p(x)\\) is the probability density. This is the limiting case of the formula in the discrete case."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#mean-of-standard-normal",
    "href": "chapters/04-StatBasics/stat-basics.html#mean-of-standard-normal",
    "title": "Statistical Basics",
    "section": "Mean of standard normal",
    "text": "Mean of standard normal\nThe mean of the standard normal is zero."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#variance-and-standard-deviation",
    "href": "chapters/04-StatBasics/stat-basics.html#variance-and-standard-deviation",
    "title": "Statistical Basics",
    "section": "Variance and standard deviation",
    "text": "Variance and standard deviation\nThe variance of a random variable measures how it is distributed around its mean value.\nThe variance is the average value of the difference between \\(x\\) and its mean.\n\\[\n\\sigma^2=E((x-\\overline{x})^2)\n\\]\nIn the case of a discrete random variable with outcomes values \\(x\\) having probability \\(p(x)\\), the variance is \\[\n\\sum_{x} (x-\\overline{x})^2p(x)\n\\]"
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#variance-alternative-formula",
    "href": "chapters/04-StatBasics/stat-basics.html#variance-alternative-formula",
    "title": "Statistical Basics",
    "section": "Variance alternative formula",
    "text": "Variance alternative formula\nThis is the same as\n\\[\n\\sigma^2 = \\overline{x^2}-(\\overline{x})^2\n\\]\nThe standard deviation is the square root of the variance."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#variance-of-bernoulli",
    "href": "chapters/04-StatBasics/stat-basics.html#variance-of-bernoulli",
    "title": "Statistical Basics",
    "section": "Variance of Bernoulli",
    "text": "Variance of Bernoulli\nIn the Bernoulli case, the variance is \\[\n(1-p)^2p+p^2(1-p)=p(1-p).\n\\]\nNotice that the maximum variance happens when \\(p=1/2\\)."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#variance-of-binomial",
    "href": "chapters/04-StatBasics/stat-basics.html#variance-of-binomial",
    "title": "Statistical Basics",
    "section": "Variance of Binomial",
    "text": "Variance of Binomial\nA binomial random variable with probability \\(p\\) and \\(n\\) trials is a sum of \\(n\\) bernoulli random variables with probability \\(p\\). Using the formula you get \\[\n\\sigma^2 = \\sum_{i=0}^{n}(i-np)^2\\binom{n}{i}p^{i}(1-p)^{n-i}\n\\]\nThis turns out to be \\[\n\\sigma^2 = np(1-p).\n\\]\nNote: there are easier ways to get this formula."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#sampling",
    "href": "chapters/04-StatBasics/stat-basics.html#sampling",
    "title": "Statistical Basics",
    "section": "Sampling",
    "text": "Sampling\nIn practice we study random variables through samples. A sample of a random variable is a choice of values distributed according to the associated probability. So for example a sample of a Bernoulli random variable is a coin flip where \\(P(H)=p\\)."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#sampling-1",
    "href": "chapters/04-StatBasics/stat-basics.html#sampling-1",
    "title": "Statistical Basics",
    "section": "Sampling",
    "text": "Sampling\nIf we draw \\(N\\) sample values \\(x_i\\) ofa random variable, then the mean and variance of those sampled values, computed by\n\\[\n\\overline{x} = \\frac{1}{N}\\sum x_{i}\n\\]\nand \\[\n\\overline{x} = \\frac{1}{N-1}\\sum (x_{i}-\\overline{x})^2\n\\]\nare called the sample mean and variance; they are estimates of the mean and variance of the underlying random variable.\nThe law of large numbers says that, as \\(N\\to\\infty\\), these estimates converge to the true values.\nIn general these values are also random (they depend on the particular choices drawn from the distribution) and follow their own probabilility distribution.\nSo for example, if you sample a Bernoulli random variable \\(10\\) times, the mean is \\[\n\\frac{k}{N}\n\\] where \\(k\\) is the number of heads.\nThis mean follows a binomial distribution.\n\np &lt;- dbinom(seq(0,10),10,.3)\nggplot()+geom_bar(aes(x=seq(0,1,1/10),y=10*p),stat=\"identity\")+xlab(\"x\")+ylab(\"P(x)\")+ggtitle(\"Distribution of sample mean for 10 bernoulli flips with p=.3\")\n\n\n\n\n)\nBy looking at sample means (or other sample statistics) we can try to uncover information about the underlying probability distribution."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#hypothesis-testing",
    "href": "chapters/04-StatBasics/stat-basics.html#hypothesis-testing",
    "title": "Statistical Basics",
    "section": "Hypothesis Testing",
    "text": "Hypothesis Testing\nA statistical hypothesis is a claim about a particular population. A hypothesis test is a method to determine which of two contradictory hypotheses is supported by the data.\nUnderlying idea: a lot of surprising things happen by chance. If you do an experiment and observe an effect, that might be the result of pure chance. Can you quantify that?"
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#an-example",
    "href": "chapters/04-StatBasics/stat-basics.html#an-example",
    "title": "Statistical Basics",
    "section": "An example",
    "text": "An example\nSuppose we have a coin and we’d like to do some testing to determine if we have reason to suspect that the coin is biased. Put another way, you’d like to know if this coin behaves differently from a reference, standard coin that is fair.\nNote this is more common than you might think. It might arise in the following circumstance in “real life.” You have two web pages, your current one and a proposed new one. You’d like to know if seeing the proposed one increases the chance of a viewer clicking through to something. This is called A/B testing and it amounts to comparing the probability of click-through in the reference case to the proposed case."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#null-and-alternative-hypotheses",
    "href": "chapters/04-StatBasics/stat-basics.html#null-and-alternative-hypotheses",
    "title": "Statistical Basics",
    "section": "Null (and alternative) hypotheses",
    "text": "Null (and alternative) hypotheses\nThe Null hypothesis is the hypotheses that our coin is fair, or that our two web pages yield the same results, or more generally that the observations we make are accounted for only by chance and not by some underlying effect. So our null hypothesis for our coin is “P=.5”.\nAn alternative hypothesis is a statement that contradicts the null hypothesis. For example, “P&gt;.5” or “P&lt;.5” or “P is different from .5.”"
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#test-statistic",
    "href": "chapters/04-StatBasics/stat-basics.html#test-statistic",
    "title": "Statistical Basics",
    "section": "Test statistic",
    "text": "Test statistic\nA test statistic is a measurement of the data used to draw conclusions about the sample."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#back-to-our-example",
    "href": "chapters/04-StatBasics/stat-basics.html#back-to-our-example",
    "title": "Statistical Basics",
    "section": "Back to our example",
    "text": "Back to our example\nFor our test statistic, we are going to use the fraction of times we get a head in N flips.\nIn the A/B testing situation, our test statistic would be the fraction of times a person “clicked through” when given the proposed web site.\nIntuitively, if the fraction of heads differs significantly from the expected fraction of heads (.5) then we take that as strong evidence for the unfairness of our coin (or the increased value of our proposed web page).\nHow can we quantify this?"
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#rejection-region-and-significance",
    "href": "chapters/04-StatBasics/stat-basics.html#rejection-region-and-significance",
    "title": "Statistical Basics",
    "section": "Rejection region and “significance”",
    "text": "Rejection region and “significance”\nTo make things concrete, suppose the coin is fair (in other words, the null hypothesis is true) we flip the coin \\(10\\) times. If the coin is far, we expect to get roughly 5 heads.\nThere’s a long tradition of saying something unlikely is “significant” if the chance of it occurring, assuming the null hypothesis, is less than .05 or one in twenty.\nThe chance of getting \\(0\\), \\(1\\), \\(9\\), or \\(10\\) heads is \\(.02\\). If we allow \\(2\\) or \\(8\\) heads in addition, the chance is about \\(11%\\), so if we set our significance level at \\(.05\\) we reject the null hypothesis if our experiment yields \\(0\\), \\(1\\), \\(9\\), or \\(10\\) heads.\nThis is the “rejection region.”"
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#rejection-region-plot-code",
    "href": "chapters/04-StatBasics/stat-basics.html#rejection-region-plot-code",
    "title": "Statistical Basics",
    "section": "Rejection Region (plot code)",
    "text": "Rejection Region (plot code)\n\nlibrary(ggplot2)\n# two-sided\nrejection2 &lt;- function(n,d=10) {\n    results &lt;- data.frame(\n            x=seq(0,n),\n            y=dbinom(seq(0,n),n,.5),\n            keep=sapply(seq(0,n),\n                function(x) \n                    (x&lt;qbinom(.025,n,.5)) | (x&gt;qbinom(.975,n,.5))))\n    ggplot(\n        data=results,aes(x=x,y=y,fill=keep))+ \n        geom_bar(stat=\"identity\")+\n        scale_x_continuous(breaks=seq(0,n,d))+\n        ggtitle(\"Two sided rejection region at alpha=.05\")\n    \n}"
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#more-code",
    "href": "chapters/04-StatBasics/stat-basics.html#more-code",
    "title": "Statistical Basics",
    "section": "More code",
    "text": "More code\n\nrejection1 &lt;-function(n,d=10) {\n    results &lt;- data.frame(\n        x=seq(0,n),\n        y=dbinom(seq(0,n),n,.5),\n        keep=sapply(seq(0,n),function(x) (x&gt;qbinom(.95,n,.5))))\n    ggplot(data=results,aes(x=x,y=y,fill=keep))+\n    geom_bar(stat=\"identity\")+\n    scale_x_continuous(breaks=seq(0,n,d))+\n    ggtitle(\"One sided rejection region at alpha=.05\")\n}"
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#rejection-region-plotted",
    "href": "chapters/04-StatBasics/stat-basics.html#rejection-region-plotted",
    "title": "Statistical Basics",
    "section": "Rejection Region (plotted)",
    "text": "Rejection Region (plotted)\n\nrejection2(10, 1)"
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#one-sided-test",
    "href": "chapters/04-StatBasics/stat-basics.html#one-sided-test",
    "title": "Statistical Basics",
    "section": "One-sided test",
    "text": "One-sided test\nSuppose you want evidence that your coin is more likely to get heads.\n-Your null hypothesis is that your coin has \\(p=.5\\). Your alternative hypothesis is \\(p&gt;.5\\).\n\nThe probability of getting 0,1,2 heads is \\(.054\\), which is a bit larger than \\(.05\\). So the one-sided test would reach significance only at 0 or 1 heads same as the two-sided test.\nBut suppose we did 50 flips? Then the one- and two-sided limits are slightly different on the right."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#one-sided-rejection-region",
    "href": "chapters/04-StatBasics/stat-basics.html#one-sided-rejection-region",
    "title": "Statistical Basics",
    "section": "One-sided rejection region",
    "text": "One-sided rejection region\n\nrejection2(50, 1)"
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#one-sided-rejection-region-1",
    "href": "chapters/04-StatBasics/stat-basics.html#one-sided-rejection-region-1",
    "title": "Statistical Basics",
    "section": "One-sided rejection region",
    "text": "One-sided rejection region\n\nrejection1(50, 1)"
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#normal-approximation",
    "href": "chapters/04-StatBasics/stat-basics.html#normal-approximation",
    "title": "Statistical Basics",
    "section": "Normal approximation",
    "text": "Normal approximation\nFor large \\(n\\), the binomial distribution distribution with probability \\(p\\) becomes a version of the normal distribution with mean \\(Np\\) and standard deviation \\(\\sqrt{Np(1-p)}\\)."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#normal-and-binomial-distribution",
    "href": "chapters/04-StatBasics/stat-basics.html#normal-and-binomial-distribution",
    "title": "Statistical Basics",
    "section": "Normal and binomial distribution",
    "text": "Normal and binomial distribution\n\ncompare &lt;- function(n, p = .5) {\n    results &lt;- data.frame(x = seq(0, n), y = dbinom(seq(0, n), n, p), z = dnorm(seq(0, n), mean = p * n, sd = sqrt(n * p * (1 - p))))\n    ggplot(data = results) +\n        geom_bar(aes(x = x, y = y), stat = \"identity\", fill = \"lightgreen\") +\n        geom_line(aes(x = x, y = z), color = \"red\", size = 2) +\n        ggtitle(glue(\"Normal Approximation to the binomial with n={n} and p={p}\"))\n}\ncompare(100, .3)\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\nSo one can use the normal distribution to determine the rejection region if \\(n\\) is large."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#errors",
    "href": "chapters/04-StatBasics/stat-basics.html#errors",
    "title": "Statistical Basics",
    "section": "Errors",
    "text": "Errors\nTwo things can go wrong:\n\nType I error: You reject the null hypothesis, but the null hypothesis is true. The probability of a Type I error is something you choose when you set the significance level. This is usually called \\(\\alpha\\).\nType II error: You accept the null hypothesis when it is false. In this case, you’ve missed an actual effect. This probability of this is called \\(\\beta\\)."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#tradeoff-between-error-types",
    "href": "chapters/04-StatBasics/stat-basics.html#tradeoff-between-error-types",
    "title": "Statistical Basics",
    "section": "Tradeoff between error types",
    "text": "Tradeoff between error types\nOther things equal, if you make \\(\\alpha\\) smaller (thus reducing the chance of a Type I error) you make \\(\\beta\\) bigger (increasing the chance of a type II error)."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#statistical-power",
    "href": "chapters/04-StatBasics/stat-basics.html#statistical-power",
    "title": "Statistical Basics",
    "section": "Statistical Power",
    "text": "Statistical Power\nInformally, statistical power measures the ability of an experiment to detect a real effect. If a study has high power, then you are very unlikely to make a Type II error.\nFor example, return to the coin flipping problem (or the A/B testing problem)."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#power",
    "href": "chapters/04-StatBasics/stat-basics.html#power",
    "title": "Statistical Basics",
    "section": "Power",
    "text": "Power\nSuppose we flip our coin \\(20\\) times and our null hypothesis is that \\(p=.5\\) If our significance level is \\(.05\\), we will reject the null hypothesis and conclude that the coin is not fair (and biased towards heads) provided we get \\(15\\) or more heads."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#power-computations",
    "href": "chapters/04-StatBasics/stat-basics.html#power-computations",
    "title": "Statistical Basics",
    "section": "Power Computations",
    "text": "Power Computations\n\n# look at the probability density for this case\nprobs &lt;- dbinom(seq(0, 20), 20, .5)\n# The qbinom function tells us the threshold\nrejection &lt;- qbinom(.95, 20, .5)\n# We check this by comparing the probability of $15-20$ vs $14-20$ heads:\nsum(probs[16:21]) # remember probs[i] is the chance of i-1 heads\n\n[1] 0.02069473\n\nsum(probs[15:21])\n\n[1] 0.05765915\n\n# The chance of $15-20$ heads is greater than $.05$."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#power-1",
    "href": "chapters/04-StatBasics/stat-basics.html#power-1",
    "title": "Statistical Basics",
    "section": "Power",
    "text": "Power\nNow suppose the coin is not fair and \\(p=.6\\). What is the chance that we accept the null hypothesis and conclude, falsely, that the coin is fair? It is the chance that we get \\(14\\) or fewer heads when \\(p=.6\\).\n\nprobs6 &lt;- dbinom(seq(0, 20), 20, .6)\nsum(probs6[1:15])\n\n[1] 0.874401\n\n\nThis is \\(87\\) percent! In other words, our experiment is very unlikely to detect the unfairness of the coin if the unfairness is only the difference between \\(p=.6\\) and \\(p=.5\\)"
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#power-2",
    "href": "chapters/04-StatBasics/stat-basics.html#power-2",
    "title": "Statistical Basics",
    "section": "Power",
    "text": "Power\nBut if the coin is very unfair, with, say \\(p=.8\\), then we find:\n\nprobs8 &lt;- dbinom(seq(0, 20), 20, .8)\nsum(probs8[1:15])\n\n[1] 0.1957922\n\n\nWe have only a 20% chance of a Type II error so there’s an 80% chance we’ll detect the difference.\nNow suppose we use \\(100\\) flips.\n\nrejection &lt;- qbinom(.95, 100, .5)\nprobs6 &lt;- dbinom(seq(0, 100), 100, .6)\nsum(probs6[1:rejection])\n\n[1] 0.3032601\n\n\nNow we have a 70% chance of detecting the difference unfairness of \\(p=.6\\)."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#more-on-ab-example",
    "href": "chapters/04-StatBasics/stat-basics.html#more-on-ab-example",
    "title": "Statistical Basics",
    "section": "More on AB example",
    "text": "More on AB example\nNull hypothesis: the two ads are the same, and of the 9400 who see an ad, 2108 click through. This is a probabiility of 22.4%.\nThe .95 quantile for the binomial distribution with n=4600 and p=.224 is 1077. Thus the 1133 click through rate is significantly higher. Similarly the 975 out of 4800 is significantly lower.\nSo ad B is better than ad A at the .05 significance level. In fact the odds of getting a number as high as 1133 is more like 1 in 10^4 so the evidence for ad b is overwhelming."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#simulation",
    "href": "chapters/04-StatBasics/stat-basics.html#simulation",
    "title": "Statistical Basics",
    "section": "Simulation",
    "text": "Simulation\nBy simulation:\n\nsimulated &lt;- rbinom(10000, 4600, .224)\nsum(simulated &gt;= 1133)\n\n[1] 1"
  },
  {
    "objectID": "chapters/05-WorkingWithData/pythonAndR.html",
    "href": "chapters/05-WorkingWithData/pythonAndR.html",
    "title": "Data Structures in R and Python",
    "section": "",
    "text": "Both R and Python have data structures like excel spreadsheets that are the basic way to organize tabular data.\nIn R, these tools are packaged together in a family of libraries called the tidyverse.\nIn Python they are packaged in two closely related libraries, numpy (which handles numerical linear algebra) and pandas which handles tabular data.\nIn Python, these tabular data structures are called dataframes; in R they are called tibbles (there are dataframes in R as well but the tidyverse package mainly uses tibbles.)"
  },
  {
    "objectID": "chapters/05-WorkingWithData/pythonAndR.html#basic-data-structures-for-analysis",
    "href": "chapters/05-WorkingWithData/pythonAndR.html#basic-data-structures-for-analysis",
    "title": "Data Structures in R and Python",
    "section": "",
    "text": "Both R and Python have data structures like excel spreadsheets that are the basic way to organize tabular data.\nIn R, these tools are packaged together in a family of libraries called the tidyverse.\nIn Python they are packaged in two closely related libraries, numpy (which handles numerical linear algebra) and pandas which handles tabular data.\nIn Python, these tabular data structures are called dataframes; in R they are called tibbles (there are dataframes in R as well but the tidyverse package mainly uses tibbles.)"
  },
  {
    "objectID": "chapters/05-WorkingWithData/pythonAndR.html#features",
    "href": "chapters/05-WorkingWithData/pythonAndR.html#features",
    "title": "Data Structures in R and Python",
    "section": "Features",
    "text": "Features\nThe basic operations that both R and Python offer are\n\nmapping a function to a column of data and creating a new column\nselecting a particular column\nfiltering to select rows where column entries meet a condition\ngrouping rows by keys\nsummarizing data by computing sums, counts, averages, variances, and so on."
  },
  {
    "objectID": "chapters/05-WorkingWithData/pythonAndR.html#visualization",
    "href": "chapters/05-WorkingWithData/pythonAndR.html#visualization",
    "title": "Data Structures in R and Python",
    "section": "Visualization",
    "text": "Visualization\nIn addition, both R and Python have plotting libraries that rely on dataframes/tibbles as input and libraries that apply ML algorithms to tabular data stored in dataframes/tibbles."
  },
  {
    "objectID": "chapters/05-WorkingWithData/pythonAndR.html#walkthroughs",
    "href": "chapters/05-WorkingWithData/pythonAndR.html#walkthroughs",
    "title": "Data Structures in R and Python",
    "section": "Walkthroughs",
    "text": "Walkthroughs\n\nPython/pandas walkthrough\nR/tidyverse walkthrough"
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html",
    "href": "chapters/05-WorkingWithData/r_penguins.html",
    "title": "Working with data in R",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.1     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\ncat(paste(R.version$version.string, \"\\n\"))\n\nR version 4.2.3 (2023-03-15)"
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html#load-the-required-libraries",
    "href": "chapters/05-WorkingWithData/r_penguins.html#load-the-required-libraries",
    "title": "Working with data in R",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.1     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\ncat(paste(R.version$version.string, \"\\n\"))\n\nR version 4.2.3 (2023-03-15)"
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html#read-the-penguins-data-from-a-csv-file",
    "href": "chapters/05-WorkingWithData/r_penguins.html#read-the-penguins-data-from-a-csv-file",
    "title": "Working with data in R",
    "section": "read the penguins data from a csv file",
    "text": "read the penguins data from a csv file\n\npenguins &lt;- read_csv(\"data/penguins-raw.csv\")\n\nRows: 344 Columns: 17\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (9): studyName, Species, Region, Island, Stage, Individual ID, Clutch C...\ndbl  (7): Sample Number, Culmen Length (mm), Culmen Depth (mm), Flipper Leng...\ndate (1): Date Egg\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html#print-the-number-of-rows-and-columns-in-the-data-frame",
    "href": "chapters/05-WorkingWithData/r_penguins.html#print-the-number-of-rows-and-columns-in-the-data-frame",
    "title": "Working with data in R",
    "section": "print the number of rows and columns in the data frame",
    "text": "print the number of rows and columns in the data frame\n\ncat(\"Rows:\", nrow(penguins), \", Columns:\", ncol(penguins), \"\\n\")\n\nRows: 344 , Columns: 17"
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html#print-the-column-names",
    "href": "chapters/05-WorkingWithData/r_penguins.html#print-the-column-names",
    "title": "Working with data in R",
    "section": "print the column names",
    "text": "print the column names\n\ncat(\"Columns:\\n\")\n\nColumns:\n\nprint(colnames(penguins))\n\n [1] \"studyName\"           \"Sample Number\"       \"Species\"            \n [4] \"Region\"              \"Island\"              \"Stage\"              \n [7] \"Individual ID\"       \"Clutch Completion\"   \"Date Egg\"           \n[10] \"Culmen Length (mm)\"  \"Culmen Depth (mm)\"   \"Flipper Length (mm)\"\n[13] \"Body Mass (g)\"       \"Sex\"                 \"Delta 15 N (o/oo)\"  \n[16] \"Delta 13 C (o/oo)\"   \"Comments\""
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html#select-a-subset-of-columns",
    "href": "chapters/05-WorkingWithData/r_penguins.html#select-a-subset-of-columns",
    "title": "Working with data in R",
    "section": "select a subset of columns",
    "text": "select a subset of columns\n\nsimpler &lt;- penguins |&gt; select(Species, `Body Mass (g)`, `Flipper Length (mm)`)\nhead(simpler)\n\n# A tibble: 6 × 3\n  Species                             `Body Mass (g)` `Flipper Length (mm)`\n  &lt;chr&gt;                                         &lt;dbl&gt;                 &lt;dbl&gt;\n1 Adelie Penguin (Pygoscelis adeliae)            3750                   181\n2 Adelie Penguin (Pygoscelis adeliae)            3800                   186\n3 Adelie Penguin (Pygoscelis adeliae)            3250                   195\n4 Adelie Penguin (Pygoscelis adeliae)              NA                    NA\n5 Adelie Penguin (Pygoscelis adeliae)            3450                   193\n6 Adelie Penguin (Pygoscelis adeliae)            3650                   190"
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html#print-the-index",
    "href": "chapters/05-WorkingWithData/r_penguins.html#print-the-index",
    "title": "Working with data in R",
    "section": "print the index",
    "text": "print the index\n\nprint(rownames(penguins))\n\n  [1] \"1\"   \"2\"   \"3\"   \"4\"   \"5\"   \"6\"   \"7\"   \"8\"   \"9\"   \"10\"  \"11\"  \"12\" \n [13] \"13\"  \"14\"  \"15\"  \"16\"  \"17\"  \"18\"  \"19\"  \"20\"  \"21\"  \"22\"  \"23\"  \"24\" \n [25] \"25\"  \"26\"  \"27\"  \"28\"  \"29\"  \"30\"  \"31\"  \"32\"  \"33\"  \"34\"  \"35\"  \"36\" \n [37] \"37\"  \"38\"  \"39\"  \"40\"  \"41\"  \"42\"  \"43\"  \"44\"  \"45\"  \"46\"  \"47\"  \"48\" \n [49] \"49\"  \"50\"  \"51\"  \"52\"  \"53\"  \"54\"  \"55\"  \"56\"  \"57\"  \"58\"  \"59\"  \"60\" \n [61] \"61\"  \"62\"  \"63\"  \"64\"  \"65\"  \"66\"  \"67\"  \"68\"  \"69\"  \"70\"  \"71\"  \"72\" \n [73] \"73\"  \"74\"  \"75\"  \"76\"  \"77\"  \"78\"  \"79\"  \"80\"  \"81\"  \"82\"  \"83\"  \"84\" \n [85] \"85\"  \"86\"  \"87\"  \"88\"  \"89\"  \"90\"  \"91\"  \"92\"  \"93\"  \"94\"  \"95\"  \"96\" \n [97] \"97\"  \"98\"  \"99\"  \"100\" \"101\" \"102\" \"103\" \"104\" \"105\" \"106\" \"107\" \"108\"\n[109] \"109\" \"110\" \"111\" \"112\" \"113\" \"114\" \"115\" \"116\" \"117\" \"118\" \"119\" \"120\"\n[121] \"121\" \"122\" \"123\" \"124\" \"125\" \"126\" \"127\" \"128\" \"129\" \"130\" \"131\" \"132\"\n[133] \"133\" \"134\" \"135\" \"136\" \"137\" \"138\" \"139\" \"140\" \"141\" \"142\" \"143\" \"144\"\n[145] \"145\" \"146\" \"147\" \"148\" \"149\" \"150\" \"151\" \"152\" \"153\" \"154\" \"155\" \"156\"\n[157] \"157\" \"158\" \"159\" \"160\" \"161\" \"162\" \"163\" \"164\" \"165\" \"166\" \"167\" \"168\"\n[169] \"169\" \"170\" \"171\" \"172\" \"173\" \"174\" \"175\" \"176\" \"177\" \"178\" \"179\" \"180\"\n[181] \"181\" \"182\" \"183\" \"184\" \"185\" \"186\" \"187\" \"188\" \"189\" \"190\" \"191\" \"192\"\n[193] \"193\" \"194\" \"195\" \"196\" \"197\" \"198\" \"199\" \"200\" \"201\" \"202\" \"203\" \"204\"\n[205] \"205\" \"206\" \"207\" \"208\" \"209\" \"210\" \"211\" \"212\" \"213\" \"214\" \"215\" \"216\"\n[217] \"217\" \"218\" \"219\" \"220\" \"221\" \"222\" \"223\" \"224\" \"225\" \"226\" \"227\" \"228\"\n[229] \"229\" \"230\" \"231\" \"232\" \"233\" \"234\" \"235\" \"236\" \"237\" \"238\" \"239\" \"240\"\n[241] \"241\" \"242\" \"243\" \"244\" \"245\" \"246\" \"247\" \"248\" \"249\" \"250\" \"251\" \"252\"\n[253] \"253\" \"254\" \"255\" \"256\" \"257\" \"258\" \"259\" \"260\" \"261\" \"262\" \"263\" \"264\"\n[265] \"265\" \"266\" \"267\" \"268\" \"269\" \"270\" \"271\" \"272\" \"273\" \"274\" \"275\" \"276\"\n[277] \"277\" \"278\" \"279\" \"280\" \"281\" \"282\" \"283\" \"284\" \"285\" \"286\" \"287\" \"288\"\n[289] \"289\" \"290\" \"291\" \"292\" \"293\" \"294\" \"295\" \"296\" \"297\" \"298\" \"299\" \"300\"\n[301] \"301\" \"302\" \"303\" \"304\" \"305\" \"306\" \"307\" \"308\" \"309\" \"310\" \"311\" \"312\"\n[313] \"313\" \"314\" \"315\" \"316\" \"317\" \"318\" \"319\" \"320\" \"321\" \"322\" \"323\" \"324\"\n[325] \"325\" \"326\" \"327\" \"328\" \"329\" \"330\" \"331\" \"332\" \"333\" \"334\" \"335\" \"336\"\n[337] \"337\" \"338\" \"339\" \"340\" \"341\" \"342\" \"343\" \"344\""
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html#print-the-23rd-row",
    "href": "chapters/05-WorkingWithData/r_penguins.html#print-the-23rd-row",
    "title": "Working with data in R",
    "section": "print the 23rd row",
    "text": "print the 23rd row\n\npenguins[23, ]\n\n# A tibble: 1 × 17\n  studyName `Sample Number` Species          Region Island Stage `Individual ID`\n  &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;          \n1 PAL0708                23 Adelie Penguin … Anvers Biscoe Adul… N12A1          \n# ℹ 10 more variables: `Clutch Completion` &lt;chr&gt;, `Date Egg` &lt;date&gt;,\n#   `Culmen Length (mm)` &lt;dbl&gt;, `Culmen Depth (mm)` &lt;dbl&gt;,\n#   `Flipper Length (mm)` &lt;dbl&gt;, `Body Mass (g)` &lt;dbl&gt;, Sex &lt;chr&gt;,\n#   `Delta 15 N (o/oo)` &lt;dbl&gt;, `Delta 13 C (o/oo)` &lt;dbl&gt;, Comments &lt;chr&gt;"
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html#print-the-value-of-the-culmen-length-mm-column-in-the-23rd-row",
    "href": "chapters/05-WorkingWithData/r_penguins.html#print-the-value-of-the-culmen-length-mm-column-in-the-23rd-row",
    "title": "Working with data in R",
    "section": "print the value of the “Culmen Length (mm)” column in the 23rd row",
    "text": "print the value of the “Culmen Length (mm)” column in the 23rd row\n\npenguins[23, \"Culmen Length (mm)\"]\n\n# A tibble: 1 × 1\n  `Culmen Length (mm)`\n                 &lt;dbl&gt;\n1                 35.9"
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html#print-the-sex-and-date-egg-columns-for-rows-23-to-28-remember-that-r-numbers-rows-from",
    "href": "chapters/05-WorkingWithData/r_penguins.html#print-the-sex-and-date-egg-columns-for-rows-23-to-28-remember-that-r-numbers-rows-from",
    "title": "Working with data in R",
    "section": "print the “Sex” and “Date Egg” columns for rows 23 to 28 (remember that r numbers rows from !)",
    "text": "print the “Sex” and “Date Egg” columns for rows 23 to 28 (remember that r numbers rows from !)\n\npenguins[23:28, c(\"Sex\", \"Date Egg\")]\n\n# A tibble: 6 × 2\n  Sex    `Date Egg`\n  &lt;chr&gt;  &lt;date&gt;    \n1 FEMALE 2007-11-12\n2 MALE   2007-11-12\n3 MALE   2007-11-10\n4 FEMALE 2007-11-10\n5 MALE   2007-11-12\n6 FEMALE 2007-11-12"
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html#count-the-number-of-occurrences-of-each-value-in-the-island-column",
    "href": "chapters/05-WorkingWithData/r_penguins.html#count-the-number-of-occurrences-of-each-value-in-the-island-column",
    "title": "Working with data in R",
    "section": "count the number of occurrences of each value in the “Island” column",
    "text": "count the number of occurrences of each value in the “Island” column\n\npenguins |&gt; count(Island)\n\n# A tibble: 3 × 2\n  Island        n\n  &lt;chr&gt;     &lt;int&gt;\n1 Biscoe      168\n2 Dream       124\n3 Torgersen    52"
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html#count-the-number-of-occurrences-of-each-value-in-the-species-column",
    "href": "chapters/05-WorkingWithData/r_penguins.html#count-the-number-of-occurrences-of-each-value-in-the-species-column",
    "title": "Working with data in R",
    "section": "count the number of occurrences of each value in the “Species” column",
    "text": "count the number of occurrences of each value in the “Species” column\n\npenguins |&gt; count(Species)\n\n# A tibble: 3 × 2\n  Species                                       n\n  &lt;chr&gt;                                     &lt;int&gt;\n1 Adelie Penguin (Pygoscelis adeliae)         152\n2 Chinstrap penguin (Pygoscelis antarctica)    68\n3 Gentoo penguin (Pygoscelis papua)           124"
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html#filter-the-data-to-keep-only-rows-where-sex-is-female",
    "href": "chapters/05-WorkingWithData/r_penguins.html#filter-the-data-to-keep-only-rows-where-sex-is-female",
    "title": "Working with data in R",
    "section": "filter the data to keep only rows where “Sex” is “FEMALE”",
    "text": "filter the data to keep only rows where “Sex” is “FEMALE”\n\nfemales &lt;- penguins |&gt; filter(Sex == \"FEMALE\")\nhead(females)\n\n# A tibble: 6 × 17\n  studyName `Sample Number` Species          Region Island Stage `Individual ID`\n  &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;          \n1 PAL0708                 2 Adelie Penguin … Anvers Torge… Adul… N1A2           \n2 PAL0708                 3 Adelie Penguin … Anvers Torge… Adul… N2A1           \n3 PAL0708                 5 Adelie Penguin … Anvers Torge… Adul… N3A1           \n4 PAL0708                 7 Adelie Penguin … Anvers Torge… Adul… N4A1           \n5 PAL0708                13 Adelie Penguin … Anvers Torge… Adul… N7A1           \n6 PAL0708                16 Adelie Penguin … Anvers Torge… Adul… N8A2           \n# ℹ 10 more variables: `Clutch Completion` &lt;chr&gt;, `Date Egg` &lt;date&gt;,\n#   `Culmen Length (mm)` &lt;dbl&gt;, `Culmen Depth (mm)` &lt;dbl&gt;,\n#   `Flipper Length (mm)` &lt;dbl&gt;, `Body Mass (g)` &lt;dbl&gt;, Sex &lt;chr&gt;,\n#   `Delta 15 N (o/oo)` &lt;dbl&gt;, `Delta 13 C (o/oo)` &lt;dbl&gt;, Comments &lt;chr&gt;"
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html#filter-the-data-to-keep-only-rows-where-flipper-length-mm-is-greater-than-body-mass-g-divided-by-20",
    "href": "chapters/05-WorkingWithData/r_penguins.html#filter-the-data-to-keep-only-rows-where-flipper-length-mm-is-greater-than-body-mass-g-divided-by-20",
    "title": "Working with data in R",
    "section": "filter the data to keep only rows where “Flipper Length (mm)” is greater than “Body Mass (g)” divided by 20",
    "text": "filter the data to keep only rows where “Flipper Length (mm)” is greater than “Body Mass (g)” divided by 20\n\npenguins |&gt; filter(`Flipper Length (mm)` &gt; `Body Mass (g)` / 20)\n\n# A tibble: 147 × 17\n   studyName `Sample Number` Species         Region Island Stage `Individual ID`\n   &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;          \n 1 PAL0708                 3 Adelie Penguin… Anvers Torge… Adul… N2A1           \n 2 PAL0708                 5 Adelie Penguin… Anvers Torge… Adul… N3A1           \n 3 PAL0708                 6 Adelie Penguin… Anvers Torge… Adul… N3A2           \n 4 PAL0708                 9 Adelie Penguin… Anvers Torge… Adul… N5A1           \n 5 PAL0708                11 Adelie Penguin… Anvers Torge… Adul… N6A1           \n 6 PAL0708                13 Adelie Penguin… Anvers Torge… Adul… N7A1           \n 7 PAL0708                14 Adelie Penguin… Anvers Torge… Adul… N7A2           \n 8 PAL0708                17 Adelie Penguin… Anvers Torge… Adul… N9A1           \n 9 PAL0708                19 Adelie Penguin… Anvers Torge… Adul… N10A1          \n10 PAL0708                21 Adelie Penguin… Anvers Biscoe Adul… N11A1          \n# ℹ 137 more rows\n# ℹ 10 more variables: `Clutch Completion` &lt;chr&gt;, `Date Egg` &lt;date&gt;,\n#   `Culmen Length (mm)` &lt;dbl&gt;, `Culmen Depth (mm)` &lt;dbl&gt;,\n#   `Flipper Length (mm)` &lt;dbl&gt;, `Body Mass (g)` &lt;dbl&gt;, Sex &lt;chr&gt;,\n#   `Delta 15 N (o/oo)` &lt;dbl&gt;, `Delta 13 C (o/oo)` &lt;dbl&gt;, Comments &lt;chr&gt;"
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html#count-the-number-of-missing-values-in-each-column",
    "href": "chapters/05-WorkingWithData/r_penguins.html#count-the-number-of-missing-values-in-each-column",
    "title": "Working with data in R",
    "section": "count the number of missing values in each column",
    "text": "count the number of missing values in each column\n\ncolSums(is.na(penguins))\n\n          studyName       Sample Number             Species              Region \n                  0                   0                   0                   0 \n             Island               Stage       Individual ID   Clutch Completion \n                  0                   0                   0                   0 \n           Date Egg  Culmen Length (mm)   Culmen Depth (mm) Flipper Length (mm) \n                  0                   2                   2                   2 \n      Body Mass (g)                 Sex   Delta 15 N (o/oo)   Delta 13 C (o/oo) \n                  2                  11                  14                  13 \n           Comments \n                290"
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html#drop-the-comments-column",
    "href": "chapters/05-WorkingWithData/r_penguins.html#drop-the-comments-column",
    "title": "Working with data in R",
    "section": "drop the “Comments” column",
    "text": "drop the “Comments” column\n\npenguins &lt;- penguins |&gt; select(-Comments)"
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html#drop-rows-with-missing-values",
    "href": "chapters/05-WorkingWithData/r_penguins.html#drop-rows-with-missing-values",
    "title": "Working with data in R",
    "section": "drop rows with missing values",
    "text": "drop rows with missing values\n\npenguins_nona &lt;- penguins |&gt; drop_na()\ndim(penguins_nona)\n\n[1] 324  16"
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html#impute-missing-values-in-the-culmen-length-mm-column-with-the-mean-value",
    "href": "chapters/05-WorkingWithData/r_penguins.html#impute-missing-values-in-the-culmen-length-mm-column-with-the-mean-value",
    "title": "Working with data in R",
    "section": "impute missing values in the “Culmen Length (mm)” column with the mean value",
    "text": "impute missing values in the “Culmen Length (mm)” column with the mean value\n\npenguins_imputed &lt;- penguins |&gt;\n    mutate(`Culmen Length (mm)` = if_else(is.na(`Culmen Length (mm)`), mean(`Culmen Length (mm)`, na.rm = TRUE), `Culmen Length (mm)`))"
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html#set-the-sex-column-as-a-categorical-variable",
    "href": "chapters/05-WorkingWithData/r_penguins.html#set-the-sex-column-as-a-categorical-variable",
    "title": "Working with data in R",
    "section": "set the “Sex” column as a categorical variable",
    "text": "set the “Sex” column as a categorical variable\n\npenguins &lt;- penguins |&gt; mutate(Sex = as.factor(Sex))"
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html#create-a-new-column-simplespecies-by-extracting-the-first-word-from-the-species-column",
    "href": "chapters/05-WorkingWithData/r_penguins.html#create-a-new-column-simplespecies-by-extracting-the-first-word-from-the-species-column",
    "title": "Working with data in R",
    "section": "create a new column “SimpleSpecies” by extracting the first word from the “Species” column",
    "text": "create a new column “SimpleSpecies” by extracting the first word from the “Species” column\n\npenguins &lt;- penguins |&gt; mutate(SimpleSpecies = word(Species, 1))"
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html#create-a-new-column-body-mass-kg-by-dividing-the-body-mass-g-column-by-1000",
    "href": "chapters/05-WorkingWithData/r_penguins.html#create-a-new-column-body-mass-kg-by-dividing-the-body-mass-g-column-by-1000",
    "title": "Working with data in R",
    "section": "create a new column “Body Mass (kg)” by dividing the “Body Mass (g)” column by 1000",
    "text": "create a new column “Body Mass (kg)” by dividing the “Body Mass (g)” column by 1000\n\npenguins &lt;- penguins |&gt; mutate(`Body Mass (kg)` = `Body Mass (g)` / 1000)"
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html#sort-the-data-by-body-mass-g-in-ascending-order",
    "href": "chapters/05-WorkingWithData/r_penguins.html#sort-the-data-by-body-mass-g-in-ascending-order",
    "title": "Working with data in R",
    "section": "sort the data by “Body Mass (g)” in ascending order",
    "text": "sort the data by “Body Mass (g)” in ascending order\n\npenguins_small &lt;- penguins |&gt; select(Species, Island, `Body Mass (g)`)\npenguins_small |&gt; arrange(`Body Mass (g)`)\n\n# A tibble: 344 × 3\n   Species                                   Island    `Body Mass (g)`\n   &lt;chr&gt;                                     &lt;chr&gt;               &lt;dbl&gt;\n 1 Chinstrap penguin (Pygoscelis antarctica) Dream                2700\n 2 Adelie Penguin (Pygoscelis adeliae)       Biscoe               2850\n 3 Adelie Penguin (Pygoscelis adeliae)       Biscoe               2850\n 4 Adelie Penguin (Pygoscelis adeliae)       Biscoe               2900\n 5 Adelie Penguin (Pygoscelis adeliae)       Dream                2900\n 6 Adelie Penguin (Pygoscelis adeliae)       Torgersen            2900\n 7 Chinstrap penguin (Pygoscelis antarctica) Dream                2900\n 8 Adelie Penguin (Pygoscelis adeliae)       Biscoe               2925\n 9 Adelie Penguin (Pygoscelis adeliae)       Dream                2975\n10 Adelie Penguin (Pygoscelis adeliae)       Dream                3000\n# ℹ 334 more rows"
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html#group-the-data-by-species",
    "href": "chapters/05-WorkingWithData/r_penguins.html#group-the-data-by-species",
    "title": "Working with data in R",
    "section": "group the data by “Species”",
    "text": "group the data by “Species”\n\npenguins_by_species &lt;- penguins |&gt; group_by(Species)"
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html#summarize-the-body-mass-g-column-for-each-group",
    "href": "chapters/05-WorkingWithData/r_penguins.html#summarize-the-body-mass-g-column-for-each-group",
    "title": "Working with data in R",
    "section": "summarize the “Body Mass (g)” column for each group",
    "text": "summarize the “Body Mass (g)” column for each group\n\npenguins_by_species |&gt; summarize(mean = mean(`Body Mass (g)`), sd = sd(`Body Mass (g)`), n = n())\n\n# A tibble: 3 × 4\n  Species                                    mean    sd     n\n  &lt;chr&gt;                                     &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;\n1 Adelie Penguin (Pygoscelis adeliae)         NA    NA    152\n2 Chinstrap penguin (Pygoscelis antarctica) 3733.  384.    68\n3 Gentoo penguin (Pygoscelis papua)           NA    NA    124"
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html#group-the-data-by-sex-and-species",
    "href": "chapters/05-WorkingWithData/r_penguins.html#group-the-data-by-sex-and-species",
    "title": "Working with data in R",
    "section": "group the data by “Sex” and “Species”",
    "text": "group the data by “Sex” and “Species”\n\npenguins_by_sex_and_species &lt;- penguins |&gt; group_by(Sex, Species)"
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html#summarize-the-body-mass-g-column-for-each-group-1",
    "href": "chapters/05-WorkingWithData/r_penguins.html#summarize-the-body-mass-g-column-for-each-group-1",
    "title": "Working with data in R",
    "section": "summarize the “Body Mass (g)” column for each group",
    "text": "summarize the “Body Mass (g)” column for each group\n\npenguins_by_sex_and_species |&gt; summarize(mean = mean(`Body Mass (g)`), sd = sd(`Body Mass (g)`), n = n())\n\n`summarise()` has grouped output by 'Sex'. You can override using the `.groups`\nargument.\n\n\n# A tibble: 8 × 5\n# Groups:   Sex [3]\n  Sex    Species                                    mean    sd     n\n  &lt;fct&gt;  &lt;chr&gt;                                     &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;\n1 FEMALE Adelie Penguin (Pygoscelis adeliae)       3369.  269.    73\n2 FEMALE Chinstrap penguin (Pygoscelis antarctica) 3527.  285.    34\n3 FEMALE Gentoo penguin (Pygoscelis papua)         4680.  282.    58\n4 MALE   Adelie Penguin (Pygoscelis adeliae)       4043.  347.    73\n5 MALE   Chinstrap penguin (Pygoscelis antarctica) 3939.  362.    34\n6 MALE   Gentoo penguin (Pygoscelis papua)         5485.  313.    61\n7 &lt;NA&gt;   Adelie Penguin (Pygoscelis adeliae)         NA    NA      6\n8 &lt;NA&gt;   Gentoo penguin (Pygoscelis papua)           NA    NA      5"
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html#create-a-pivot-table-of-the-mean-body-mass-g-for-each-combination-of-sex-and-species",
    "href": "chapters/05-WorkingWithData/r_penguins.html#create-a-pivot-table-of-the-mean-body-mass-g-for-each-combination-of-sex-and-species",
    "title": "Working with data in R",
    "section": "create a pivot table of the mean “Body Mass (g)” for each combination of “Sex” and “Species”",
    "text": "create a pivot table of the mean “Body Mass (g)” for each combination of “Sex” and “Species”\n\npenguins_by_sex_and_species |&gt;\n    summarize(mean = mean(`Body Mass (g)`)) |&gt;\n    pivot_wider(names_from = Species, values_from = mean)\n\n`summarise()` has grouped output by 'Sex'. You can override using the `.groups`\nargument.\n\n\n# A tibble: 3 × 4\n# Groups:   Sex [3]\n  Sex    Adelie Penguin (Pygosce…¹ Chinstrap penguin (P…² Gentoo penguin (Pygo…³\n  &lt;fct&gt;                      &lt;dbl&gt;                  &lt;dbl&gt;                  &lt;dbl&gt;\n1 FEMALE                     3369.                  3527.                  4680.\n2 MALE                       4043.                  3939.                  5485.\n3 &lt;NA&gt;                         NA                     NA                     NA \n# ℹ abbreviated names: ¹​`Adelie Penguin (Pygoscelis adeliae)`,\n#   ²​`Chinstrap penguin (Pygoscelis antarctica)`,\n#   ³​`Gentoo penguin (Pygoscelis papua)`"
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html#plot-a-histogram-of-body-mass-g-for-female-adelie-and-gentoo-penguins",
    "href": "chapters/05-WorkingWithData/r_penguins.html#plot-a-histogram-of-body-mass-g-for-female-adelie-and-gentoo-penguins",
    "title": "Working with data in R",
    "section": "plot a histogram of “Body Mass (g)” for female Adelie and Gentoo penguins",
    "text": "plot a histogram of “Body Mass (g)” for female Adelie and Gentoo penguins\n\npenguins |&gt;\n    filter(Species %in% c(\"Adelie Penguin (Pygoscelis adeliae)\", \"Gentoo penguin (Pygoscelis papua)\"), Sex == \"FEMALE\") |&gt;\n    ggplot(aes(x = `Body Mass (g)`)) +\n    geom_histogram(bins = 30) +\n    facet_wrap(~Species)"
  },
  {
    "objectID": "chapters/05-WorkingWithData/pandas_penguins.html",
    "href": "chapters/05-WorkingWithData/pandas_penguins.html",
    "title": "Working with data in python/pandas",
    "section": "",
    "text": "import sys\nimport pandas as pd\nimport numpy as np\nimport re\n\nprint(f\"pandas version {pd.__version__}\")\nprint(f\"numpy version {np.__version__}\")\nprint(\"\\n\".join(f\"Python {sys.version}\".split(\"|\")))\n\npandas version 1.5.3\nnumpy version 1.24.2\nPython 3.10.9 \n packaged by conda-forge \n (main, Feb  2 2023, 20:26:08) [Clang 14.0.6 ]"
  },
  {
    "objectID": "chapters/05-WorkingWithData/pandas_penguins.html#loading-the-key-libraries",
    "href": "chapters/05-WorkingWithData/pandas_penguins.html#loading-the-key-libraries",
    "title": "Working with data in python/pandas",
    "section": "",
    "text": "import sys\nimport pandas as pd\nimport numpy as np\nimport re\n\nprint(f\"pandas version {pd.__version__}\")\nprint(f\"numpy version {np.__version__}\")\nprint(\"\\n\".join(f\"Python {sys.version}\".split(\"|\")))\n\npandas version 1.5.3\nnumpy version 1.24.2\nPython 3.10.9 \n packaged by conda-forge \n (main, Feb  2 2023, 20:26:08) [Clang 14.0.6 ]"
  },
  {
    "objectID": "chapters/05-WorkingWithData/pandas_penguins.html#a-comment-on-file-formats",
    "href": "chapters/05-WorkingWithData/pandas_penguins.html#a-comment-on-file-formats",
    "title": "Working with data in python/pandas",
    "section": "A comment on file formats",
    "text": "A comment on file formats\nThe most common simple format for tabular data is comma separated or tab separated (csv or tsv).\nNewer formats such as arrow and parquet are more efficient in storage and faster to load.\nPandas 2.0 can handle these newer formats."
  },
  {
    "objectID": "chapters/05-WorkingWithData/pandas_penguins.html#reading-a-dataframe",
    "href": "chapters/05-WorkingWithData/pandas_penguins.html#reading-a-dataframe",
    "title": "Working with data in python/pandas",
    "section": "Reading a dataframe",
    "text": "Reading a dataframe\n\n# read from a csv file\npenguins = pd.read_csv(\"data/penguins-raw.csv\")\n# read from a url\n# url = \"https://raw.githubusercontent.com/mcnakhaee/palmerpenguins/master/palmerpenguins/data/penguins-raw.csv\"\n# penguins = pd.read_csv(url)\n# read from an excel file\n# penguins = pd.read_excel('file.xlsx')\nrows, cols = penguins.shape\nprint(f\"Rows: {rows}, Columns: {cols}\")\nprint(f\"Columns:\", \"\\n\".join(penguins.columns))\n\nRows: 344, Columns: 17\nColumns: studyName\nSample Number\nSpecies\nRegion\nIsland\nStage\nIndividual ID\nClutch Completion\nDate Egg\nCulmen Length (mm)\nCulmen Depth (mm)\nFlipper Length (mm)\nBody Mass (g)\nSex\nDelta 15 N (o/oo)\nDelta 13 C (o/oo)\nComments"
  },
  {
    "objectID": "chapters/05-WorkingWithData/pandas_penguins.html#series",
    "href": "chapters/05-WorkingWithData/pandas_penguins.html#series",
    "title": "Working with data in python/pandas",
    "section": "Series",
    "text": "Series\nEach column of a dataframe is a series accessed by name.\n\npenguins[\"Culmen Length (mm)\"]\n\n0      39.1\n1      39.5\n2      40.3\n3       NaN\n4      36.7\n       ... \n339    55.8\n340    43.5\n341    49.6\n342    50.8\n343    50.2\nName: Culmen Length (mm), Length: 344, dtype: float64\n\n\nNote the last row: - Name - Length - dtype\nTypes are “inferred” by the read_csv function."
  },
  {
    "objectID": "chapters/05-WorkingWithData/pandas_penguins.html#another-example",
    "href": "chapters/05-WorkingWithData/pandas_penguins.html#another-example",
    "title": "Working with data in python/pandas",
    "section": "Another example",
    "text": "Another example\n\npenguins['Date Egg']\n\n0      2007-11-11\n1      2007-11-11\n2      2007-11-16\n3      2007-11-16\n4      2007-11-16\n          ...    \n339    2009-11-19\n340    2009-11-21\n341    2009-11-21\n342    2009-11-21\n343    2009-11-21\nName: Date Egg, Length: 344, dtype: object\n\n\nHere the type is “object” which is the generic python object. But these are clearly supposed to be dates. We’ll fix that later."
  },
  {
    "objectID": "chapters/05-WorkingWithData/pandas_penguins.html#alternative-syntax",
    "href": "chapters/05-WorkingWithData/pandas_penguins.html#alternative-syntax",
    "title": "Working with data in python/pandas",
    "section": "Alternative syntax",
    "text": "Alternative syntax\n\n# if the column name is simple, you can use a simpler syntax.\npenguins.Sex\n\n0        MALE\n1      FEMALE\n2      FEMALE\n3         NaN\n4      FEMALE\n        ...  \n339      MALE\n340    FEMALE\n341      MALE\n342      MALE\n343    FEMALE\nName: Sex, Length: 344, dtype: object"
  },
  {
    "objectID": "chapters/05-WorkingWithData/pandas_penguins.html#value-counts",
    "href": "chapters/05-WorkingWithData/pandas_penguins.html#value-counts",
    "title": "Working with data in python/pandas",
    "section": "Value Counts",
    "text": "Value Counts\nThe value_counts method returns a summary series.\n\npenguins['Island'].value_counts()\n\nBiscoe       168\nDream        124\nTorgersen     52\nName: Island, dtype: int64\n\n\n\npenguins['Species'].value_counts()\n\nAdelie Penguin (Pygoscelis adeliae)          152\nGentoo penguin (Pygoscelis papua)            124\nChinstrap penguin (Pygoscelis antarctica)     68\nName: Species, dtype: int64"
  },
  {
    "objectID": "chapters/05-WorkingWithData/pandas_penguins.html#selecting-a-subset-of-columns",
    "href": "chapters/05-WorkingWithData/pandas_penguins.html#selecting-a-subset-of-columns",
    "title": "Working with data in python/pandas",
    "section": "Selecting a subset of columns",
    "text": "Selecting a subset of columns\n\nsimpler = penguins[['Species', 'Body Mass (g)', 'Flipper Length (mm)']]\nsimpler.head()\n\n\n\n\n\n\n\n\nSpecies\nBody Mass (g)\nFlipper Length (mm)\n\n\n\n\n0\nAdelie Penguin (Pygoscelis adeliae)\n3750.0\n181.0\n\n\n1\nAdelie Penguin (Pygoscelis adeliae)\n3800.0\n186.0\n\n\n2\nAdelie Penguin (Pygoscelis adeliae)\n3250.0\n195.0\n\n\n3\nAdelie Penguin (Pygoscelis adeliae)\nNaN\nNaN\n\n\n4\nAdelie Penguin (Pygoscelis adeliae)\n3450.0\n193.0"
  },
  {
    "objectID": "chapters/05-WorkingWithData/pandas_penguins.html#index",
    "href": "chapters/05-WorkingWithData/pandas_penguins.html#index",
    "title": "Working with data in python/pandas",
    "section": "Index",
    "text": "Index\nA dataframe has an index, which can be just the numbers from 0 to N as in this case.\n\npenguins.index\n\nRangeIndex(start=0, stop=344, step=1)"
  },
  {
    "objectID": "chapters/05-WorkingWithData/pandas_penguins.html#columns-and-rows",
    "href": "chapters/05-WorkingWithData/pandas_penguins.html#columns-and-rows",
    "title": "Working with data in python/pandas",
    "section": "Columns and Rows",
    "text": "Columns and Rows\nloc allows you to access individual elements.\n\n# The 23rd row\npenguins.loc[23,:]\n\nstudyName                                          PAL0708\nSample Number                                           24\nSpecies                Adelie Penguin (Pygoscelis adeliae)\nRegion                                              Anvers\nIsland                                              Biscoe\nStage                                   Adult, 1 Egg Stage\nIndividual ID                                        N12A2\nClutch Completion                                      Yes\nDate Egg                                        2007-11-12\nCulmen Length (mm)                                    38.2\nCulmen Depth (mm)                                     18.1\nFlipper Length (mm)                                  185.0\nBody Mass (g)                                       3950.0\nSex                                                   MALE\nDelta 15 N (o/oo)                                  8.43423\nDelta 13 C (o/oo)                                -25.22664\nComments                                               NaN\nName: 23, dtype: object\n\n\n\npenguins.loc[23,'Culmen Length (mm)']\n\n38.2\n\n\n\npenguins.loc[23:28,['Sex','Date Egg']]\n\n\n\n\n\n\n\n\nSex\nDate Egg\n\n\n\n\n23\nMALE\n2007-11-12\n\n\n24\nMALE\n2007-11-10\n\n\n25\nFEMALE\n2007-11-10\n\n\n26\nMALE\n2007-11-12\n\n\n27\nFEMALE\n2007-11-12\n\n\n28\nFEMALE\n2007-11-10"
  },
  {
    "objectID": "chapters/05-WorkingWithData/pandas_penguins.html#filtering",
    "href": "chapters/05-WorkingWithData/pandas_penguins.html#filtering",
    "title": "Working with data in python/pandas",
    "section": "Filtering",
    "text": "Filtering\nFiltering is done by using a boolean series as an index.\n\npenguins['Sex']=='FEMALE'\n\n0      False\n1       True\n2       True\n3      False\n4       True\n       ...  \n339    False\n340     True\n341    False\n342    False\n343     True\nName: Sex, Length: 344, dtype: bool\n\n\n\nfemales = penguins[penguins['Sex']=='FEMALE']\nfemales.head()\n\n\n\n\n\n\n\n\nstudyName\nSample Number\nSpecies\nRegion\nIsland\nStage\nIndividual ID\nClutch Completion\nDate Egg\nCulmen Length (mm)\nCulmen Depth (mm)\nFlipper Length (mm)\nBody Mass (g)\nSex\nDelta 15 N (o/oo)\nDelta 13 C (o/oo)\nComments\n\n\n\n\n1\nPAL0708\n2\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN1A2\nYes\n2007-11-11\n39.5\n17.4\n186.0\n3800.0\nFEMALE\n8.94956\n-24.69454\nNaN\n\n\n2\nPAL0708\n3\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN2A1\nYes\n2007-11-16\n40.3\n18.0\n195.0\n3250.0\nFEMALE\n8.36821\n-25.33302\nNaN\n\n\n4\nPAL0708\n5\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN3A1\nYes\n2007-11-16\n36.7\n19.3\n193.0\n3450.0\nFEMALE\n8.76651\n-25.32426\nNaN\n\n\n6\nPAL0708\n7\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN4A1\nNo\n2007-11-15\n38.9\n17.8\n181.0\n3625.0\nFEMALE\n9.18718\n-25.21799\nNest never observed with full clutch.\n\n\n12\nPAL0708\n13\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN7A1\nYes\n2007-11-15\n41.1\n17.6\n182.0\n3200.0\nFEMALE\nNaN\nNaN\nNot enough blood for isotopes.\n\n\n\n\n\n\n\nAn alternative syntax is to use query. The quoting rules here can be tricky. The query is a string, and column names are set off by backticks. Using two different types of quotes allows the query to include a string.\n\nfemales = penguins.query(\"`Sex`=='FEMALE'\")\nfemales.head()\n\n\n\n\n\n\n\n\nstudyName\nSample Number\nSpecies\nRegion\nIsland\nStage\nIndividual ID\nClutch Completion\nDate Egg\nCulmen Length (mm)\nCulmen Depth (mm)\nFlipper Length (mm)\nBody Mass (g)\nSex\nDelta 15 N (o/oo)\nDelta 13 C (o/oo)\nComments\n\n\n\n\n1\nPAL0708\n2\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN1A2\nYes\n2007-11-11\n39.5\n17.4\n186.0\n3800.0\nFEMALE\n8.94956\n-24.69454\nNaN\n\n\n2\nPAL0708\n3\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN2A1\nYes\n2007-11-16\n40.3\n18.0\n195.0\n3250.0\nFEMALE\n8.36821\n-25.33302\nNaN\n\n\n4\nPAL0708\n5\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN3A1\nYes\n2007-11-16\n36.7\n19.3\n193.0\n3450.0\nFEMALE\n8.76651\n-25.32426\nNaN\n\n\n6\nPAL0708\n7\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN4A1\nNo\n2007-11-15\n38.9\n17.8\n181.0\n3625.0\nFEMALE\n9.18718\n-25.21799\nNest never observed with full clutch.\n\n\n12\nPAL0708\n13\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN7A1\nYes\n2007-11-15\n41.1\n17.6\n182.0\n3200.0\nFEMALE\nNaN\nNaN\nNot enough blood for isotopes."
  },
  {
    "objectID": "chapters/05-WorkingWithData/pandas_penguins.html#fancier-filtering",
    "href": "chapters/05-WorkingWithData/pandas_penguins.html#fancier-filtering",
    "title": "Working with data in python/pandas",
    "section": "Fancier filtering",
    "text": "Fancier filtering\n\npenguins[penguins[\"Flipper Length (mm)\"]&gt;penguins[\"Body Mass (g)\"]/20]\n\n\n\n\n\n\n\n\nstudyName\nSample Number\nSpecies\nRegion\nIsland\nStage\nIndividual ID\nClutch Completion\nDate Egg\nCulmen Length (mm)\nCulmen Depth (mm)\nFlipper Length (mm)\nBody Mass (g)\nSex\nDelta 15 N (o/oo)\nDelta 13 C (o/oo)\nComments\n\n\n\n\n2\nPAL0708\n3\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN2A1\nYes\n2007-11-16\n40.3\n18.0\n195.0\n3250.0\nFEMALE\n8.36821\n-25.33302\nNaN\n\n\n4\nPAL0708\n5\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN3A1\nYes\n2007-11-16\n36.7\n19.3\n193.0\n3450.0\nFEMALE\n8.76651\n-25.32426\nNaN\n\n\n5\nPAL0708\n6\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN3A2\nYes\n2007-11-16\n39.3\n20.6\n190.0\n3650.0\nMALE\n8.66496\n-25.29805\nNaN\n\n\n8\nPAL0708\n9\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN5A1\nYes\n2007-11-09\n34.1\n18.1\n193.0\n3475.0\nNaN\nNaN\nNaN\nNo blood sample obtained.\n\n\n10\nPAL0708\n11\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN6A1\nYes\n2007-11-09\n37.8\n17.1\n186.0\n3300.0\nNaN\n8.63243\n-25.21315\nNo blood sample obtained for sexing.\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n339\nPAL0910\n64\nChinstrap penguin (Pygoscelis antarctica)\nAnvers\nDream\nAdult, 1 Egg Stage\nN98A2\nYes\n2009-11-19\n55.8\n19.8\n207.0\n4000.0\nMALE\n9.70465\n-24.53494\nNaN\n\n\n340\nPAL0910\n65\nChinstrap penguin (Pygoscelis antarctica)\nAnvers\nDream\nAdult, 1 Egg Stage\nN99A1\nNo\n2009-11-21\n43.5\n18.1\n202.0\n3400.0\nFEMALE\n9.37608\n-24.40753\nNest never observed with full clutch.\n\n\n341\nPAL0910\n66\nChinstrap penguin (Pygoscelis antarctica)\nAnvers\nDream\nAdult, 1 Egg Stage\nN99A2\nNo\n2009-11-21\n49.6\n18.2\n193.0\n3775.0\nMALE\n9.46180\n-24.70615\nNest never observed with full clutch.\n\n\n342\nPAL0910\n67\nChinstrap penguin (Pygoscelis antarctica)\nAnvers\nDream\nAdult, 1 Egg Stage\nN100A1\nYes\n2009-11-21\n50.8\n19.0\n210.0\n4100.0\nMALE\n9.98044\n-24.68741\nNaN\n\n\n343\nPAL0910\n68\nChinstrap penguin (Pygoscelis antarctica)\nAnvers\nDream\nAdult, 1 Egg Stage\nN100A2\nYes\n2009-11-21\n50.2\n18.7\n198.0\n3775.0\nFEMALE\n9.39305\n-24.25255\nNaN\n\n\n\n\n147 rows × 17 columns"
  },
  {
    "objectID": "chapters/05-WorkingWithData/pandas_penguins.html#missing-values",
    "href": "chapters/05-WorkingWithData/pandas_penguins.html#missing-values",
    "title": "Working with data in python/pandas",
    "section": "Missing values",
    "text": "Missing values\nDealing with missing values is a central problem in data science. One way to identify how many misssing values are out there is as follows:\n\n## Uses the fact that logical True counts as one, False as zero\n## sum() method sums by columns\npenguins.isna().sum()\n\nstudyName                0\nSample Number            0\nSpecies                  0\nRegion                   0\nIsland                   0\nStage                    0\nIndividual ID            0\nClutch Completion        0\nDate Egg                 0\nCulmen Length (mm)       2\nCulmen Depth (mm)        2\nFlipper Length (mm)      2\nBody Mass (g)            2\nSex                     11\nDelta 15 N (o/oo)       14\nDelta 13 C (o/oo)       13\nComments               290\ndtype: int64\n\n\nNearly all of the comments are empty. What are they?\n\ncomments = penguins['Comments'].value_counts()\ncomments\n\nNest never observed with full clutch.                                   34\nNot enough blood for isotopes.                                           7\nSexing primers did not amplify.                                          4\nNo blood sample obtained.                                                2\nNo blood sample obtained for sexing.                                     2\nAdult not sampled.                                                       1\nNest never observed with full clutch. Not enough blood for isotopes.     1\nSexing primers did not amplify. Not enough blood for isotopes.           1\nAdult not sampled. Nest never observed with full clutch.                 1\nNo delta15N data received from lab.                                      1\nName: Comments, dtype: int64\n\n\nLet’s save the comments separately and look at the rest.\n\n# drop normally drops rows, but with axis=1 it drops columns\npenguins = penguins.drop('Comments',axis=1)\n\nVarious options: - drop rows with missing values - impute the missing values somehow"
  },
  {
    "objectID": "chapters/05-WorkingWithData/pandas_penguins.html#drop-rows-with-missing-values",
    "href": "chapters/05-WorkingWithData/pandas_penguins.html#drop-rows-with-missing-values",
    "title": "Working with data in python/pandas",
    "section": "Drop rows with missing values",
    "text": "Drop rows with missing values\n\n# This makes a boolean where a row is True provided at least one of its entries are NA\nna_rows = (penguins.isna().any(axis=1))\nprint(f\"{na_rows.sum()} rows have NA somewhere outside of comments\")\n\n20 rows have NA somewhere outside of comments\n\n\n\n# here we keep rows only if no NA's.  Can also use notna().\npenguins_nona = penguins.loc[~na_rows,:]"
  },
  {
    "objectID": "chapters/05-WorkingWithData/pandas_penguins.html#imputation",
    "href": "chapters/05-WorkingWithData/pandas_penguins.html#imputation",
    "title": "Working with data in python/pandas",
    "section": "Imputation",
    "text": "Imputation\nWe saw above that culmen length has 2 missing values. We can use fillna to replace the missing values with something (like the mean or median or zero).\n\n# using equality w/o copy creates another reference.\npenguins_imputed = penguins.copy()\nculmen_mean = penguins_imputed['Culmen Length (mm)'].mean() # how does this handle NA values?\nprint(f\"Culmen length mean is {culmen_mean}\")\npenguins_imputed['Culmen Length (mm)'] = penguins_imputed['Culmen Length (mm)'].fillna(culmen_mean)\n\nCulmen length mean is 43.9219298245614\n\n\nThere are many other imputation methods. For example, if the data is ordered, you can fill missing data with linear interpolation. (See the interpolate method)."
  },
  {
    "objectID": "chapters/05-WorkingWithData/pandas_penguins.html#data-types",
    "href": "chapters/05-WorkingWithData/pandas_penguins.html#data-types",
    "title": "Working with data in python/pandas",
    "section": "Data types",
    "text": "Data types\nAs we saw above, the types of the columns are inferred when the data is read. But it’s not always correct. For example, the “Date Egg” column is supposed to be a date but it’s shown as a generic python object.\nUsing the correct type can greatly improve performance as generic Python arguments are inefficient.\nIn pandas 1.0 strings are always treated as objects but in pandas 2.0 there is a StringDtype.\nThe most common types are: - object - float64 - datetime (datetime64[ns]) - int64 - bool\nOne may also find categorical types.\n\npenguins.dtypes\n\nstudyName               object\nSample Number            int64\nSpecies                 object\nRegion                  object\nIsland                  object\nStage                   object\nIndividual ID           object\nClutch Completion       object\nDate Egg                object\nCulmen Length (mm)     float64\nCulmen Depth (mm)      float64\nFlipper Length (mm)    float64\nBody Mass (g)          float64\nSex                     object\nDelta 15 N (o/oo)      float64\nDelta 13 C (o/oo)      float64\ndtype: object"
  },
  {
    "objectID": "chapters/05-WorkingWithData/pandas_penguins.html#setting-datatypes",
    "href": "chapters/05-WorkingWithData/pandas_penguins.html#setting-datatypes",
    "title": "Working with data in python/pandas",
    "section": "Setting datatypes",
    "text": "Setting datatypes\nHere’s an example where we manually make sex a categorical type.\n\npenguins = penguins.astype({'Sex':'category'})\npenguins['Sex']\n\n0        MALE\n1      FEMALE\n2      FEMALE\n3         NaN\n4      FEMALE\n        ...  \n339      MALE\n340    FEMALE\n341      MALE\n342      MALE\n343    FEMALE\nName: Sex, Length: 344, dtype: category\nCategories (2, object): ['FEMALE', 'MALE']\n\n\nOne can also pass a dictionary setting the types of columns as an argument when you read them from the csv file."
  },
  {
    "objectID": "chapters/05-WorkingWithData/pandas_penguins.html#creating-new-columns",
    "href": "chapters/05-WorkingWithData/pandas_penguins.html#creating-new-columns",
    "title": "Working with data in python/pandas",
    "section": "Creating new columns",
    "text": "Creating new columns\nSimplifying the species name.\n\ndef first_word(x):\n    return x.split()[0]\npenguins['SimpleSpecies'] = penguins['Species'].map(first_word)\n\nRewriting the body mass in kilograms.\n\npenguins['Body Mass (kg)'] = penguins['Body Mass (g)']/1000"
  },
  {
    "objectID": "chapters/05-WorkingWithData/pandas_penguins.html#sorting",
    "href": "chapters/05-WorkingWithData/pandas_penguins.html#sorting",
    "title": "Working with data in python/pandas",
    "section": "Sorting",
    "text": "Sorting\n\npenguins_small = penguins[['Species','Island','Body Mass (g)']]\npenguins_small.sort_values('Body Mass (g)')\n# ascending = False for descending order\n# na_position = 'first' or 'last' (default is 'last')\n# can also provide a key which is a function of prototype Series -&gt; Series\n# inplace = True doesn't return a new dataframe, sorts the given one in place\n\n\n\n\n\n\n\n\nSpecies\nIsland\nBody Mass (g)\n\n\n\n\n314\nChinstrap penguin (Pygoscelis antarctica)\nDream\n2700.0\n\n\n64\nAdelie Penguin (Pygoscelis adeliae)\nBiscoe\n2850.0\n\n\n58\nAdelie Penguin (Pygoscelis adeliae)\nBiscoe\n2850.0\n\n\n116\nAdelie Penguin (Pygoscelis adeliae)\nTorgersen\n2900.0\n\n\n98\nAdelie Penguin (Pygoscelis adeliae)\nDream\n2900.0\n\n\n...\n...\n...\n...\n\n\n269\nGentoo penguin (Pygoscelis papua)\nBiscoe\n6000.0\n\n\n185\nGentoo penguin (Pygoscelis papua)\nBiscoe\n6050.0\n\n\n169\nGentoo penguin (Pygoscelis papua)\nBiscoe\n6300.0\n\n\n3\nAdelie Penguin (Pygoscelis adeliae)\nTorgersen\nNaN\n\n\n271\nGentoo penguin (Pygoscelis papua)\nBiscoe\nNaN\n\n\n\n\n344 rows × 3 columns"
  },
  {
    "objectID": "chapters/05-WorkingWithData/pandas_penguins.html#grouping",
    "href": "chapters/05-WorkingWithData/pandas_penguins.html#grouping",
    "title": "Working with data in python/pandas",
    "section": "Grouping",
    "text": "Grouping\nGrouping is a powerful tool. Let’s first group our penguins by species. The result is a “grouped” object which needs to pass through a summarize operation to be useful.\n\npenguins_by_species = penguins.groupby('Species')\npenguins_by_species\n\n&lt;pandas.core.groupby.generic.DataFrameGroupBy object at 0x164e534f0&gt;"
  },
  {
    "objectID": "chapters/05-WorkingWithData/pandas_penguins.html#summarizing",
    "href": "chapters/05-WorkingWithData/pandas_penguins.html#summarizing",
    "title": "Working with data in python/pandas",
    "section": "Summarizing",
    "text": "Summarizing\n\n# describe computes basic descriptive statistics\npenguins_by_species['Body Mass (g)'].describe()\n\n\n\n\n\n\n\n\ncount\nmean\nstd\nmin\n25%\n50%\n75%\nmax\n\n\nSpecies\n\n\n\n\n\n\n\n\n\n\n\n\nAdelie Penguin (Pygoscelis adeliae)\n151.0\n3700.662252\n458.566126\n2850.0\n3350.0\n3700.0\n4000.0\n4775.0\n\n\nChinstrap penguin (Pygoscelis antarctica)\n68.0\n3733.088235\n384.335081\n2700.0\n3487.5\n3700.0\n3950.0\n4800.0\n\n\nGentoo penguin (Pygoscelis papua)\n123.0\n5076.016260\n504.116237\n3950.0\n4700.0\n5000.0\n5500.0\n6300.0\n\n\n\n\n\n\n\n\n# this fails because some columns aren't numeric\npenguins_by_species.mean(numeric_only=True)\n\n\n\n\n\n\n\n\nSample Number\nCulmen Length (mm)\nCulmen Depth (mm)\nFlipper Length (mm)\nBody Mass (g)\nDelta 15 N (o/oo)\nDelta 13 C (o/oo)\nBody Mass (kg)\n\n\nSpecies\n\n\n\n\n\n\n\n\n\n\n\n\nAdelie Penguin (Pygoscelis adeliae)\n76.5\n38.791391\n18.346358\n189.953642\n3700.662252\n8.859733\n-25.804194\n3.700662\n\n\nChinstrap penguin (Pygoscelis antarctica)\n34.5\n48.833824\n18.420588\n195.823529\n3733.088235\n9.356155\n-24.546542\n3.733088\n\n\nGentoo penguin (Pygoscelis papua)\n62.5\n47.504878\n14.982114\n217.186992\n5076.016260\n8.245338\n-26.185298\n5.076016\n\n\n\n\n\n\n\n\npenguins_by_species.count()\n\n\n\n\n\n\n\n\nstudyName\nSample Number\nRegion\nIsland\nStage\nIndividual ID\nClutch Completion\nDate Egg\nCulmen Length (mm)\nCulmen Depth (mm)\nFlipper Length (mm)\nBody Mass (g)\nSex\nDelta 15 N (o/oo)\nDelta 13 C (o/oo)\nSimpleSpecies\nBody Mass (kg)\n\n\nSpecies\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdelie Penguin (Pygoscelis adeliae)\n152\n152\n152\n152\n152\n152\n152\n152\n151\n151\n151\n151\n146\n141\n141\n152\n151\n\n\nChinstrap penguin (Pygoscelis antarctica)\n68\n68\n68\n68\n68\n68\n68\n68\n68\n68\n68\n68\n68\n67\n68\n68\n68\n\n\nGentoo penguin (Pygoscelis papua)\n124\n124\n124\n124\n124\n124\n124\n124\n123\n123\n123\n123\n119\n122\n122\n124\n123"
  },
  {
    "objectID": "chapters/05-WorkingWithData/pandas_penguins.html#multiindex",
    "href": "chapters/05-WorkingWithData/pandas_penguins.html#multiindex",
    "title": "Working with data in python/pandas",
    "section": "MultiIndex",
    "text": "MultiIndex\n\npenguins_by_sex_and_species = penguins.groupby(['Sex','Species'])\npenguins_by_sex_and_species['Body Mass (g)'].describe().round()\n\n\n\n\n\n\n\n\n\ncount\nmean\nstd\nmin\n25%\n50%\n75%\nmax\n\n\nSex\nSpecies\n\n\n\n\n\n\n\n\n\n\n\n\nFEMALE\nAdelie Penguin (Pygoscelis adeliae)\n73.0\n3369.0\n269.0\n2850.0\n3175.0\n3400.0\n3550.0\n3900.0\n\n\nChinstrap penguin (Pygoscelis antarctica)\n34.0\n3527.0\n285.0\n2700.0\n3362.0\n3550.0\n3694.0\n4150.0\n\n\nGentoo penguin (Pygoscelis papua)\n58.0\n4680.0\n282.0\n3950.0\n4462.0\n4700.0\n4875.0\n5200.0\n\n\nMALE\nAdelie Penguin (Pygoscelis adeliae)\n73.0\n4043.0\n347.0\n3325.0\n3800.0\n4000.0\n4300.0\n4775.0\n\n\nChinstrap penguin (Pygoscelis antarctica)\n34.0\n3939.0\n362.0\n3250.0\n3731.0\n3950.0\n4100.0\n4800.0\n\n\nGentoo penguin (Pygoscelis papua)\n61.0\n5485.0\n313.0\n4750.0\n5300.0\n5500.0\n5700.0\n6300.0\n\n\n\n\n\n\n\n\n# pivot tables\npenguins_by_sex_and_species['Body Mass (g)'].mean().reset_index().pivot(index='Sex',columns='Species',values='Body Mass (g)')\n\n\n\n\n\n\n\nSpecies\nAdelie Penguin (Pygoscelis adeliae)\nChinstrap penguin (Pygoscelis antarctica)\nGentoo penguin (Pygoscelis papua)\n\n\nSex\n\n\n\n\n\n\n\nFEMALE\n3368.835616\n3527.205882\n4679.741379\n\n\nMALE\n4043.493151\n3938.970588\n5484.836066"
  },
  {
    "objectID": "chapters/05-WorkingWithData/pandas_penguins.html#pandas-plotting",
    "href": "chapters/05-WorkingWithData/pandas_penguins.html#pandas-plotting",
    "title": "Working with data in python/pandas",
    "section": "Pandas plotting",
    "text": "Pandas plotting\nSome simple plots are available directly from pandas.\n\npenguins[penguins['Species'].str.startswith(\"Adel\")].groupby(['Sex'])['Body Mass (g)'].hist(bins=30,legend=True)\n\nSex\nFEMALE    Axes(0.125,0.11;0.775x0.77)\nMALE      Axes(0.125,0.11;0.775x0.77)\nName: Body Mass (g), dtype: object"
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html#excel-files",
    "href": "chapters/05-WorkingWithData/r_penguins.html#excel-files",
    "title": "Working with data in R",
    "section": "excel files",
    "text": "excel files\nOne can also work with excel files. You need the readxl library.\n\nlibrary(\"readxl\")\n\nAs an example, we use an excel spreadsheet violent crime data from the FBI."
  },
  {
    "objectID": "chapters/05-WorkingWithData/pandas_penguins.html#excel-files",
    "href": "chapters/05-WorkingWithData/pandas_penguins.html#excel-files",
    "title": "Working with data in python/pandas",
    "section": "Excel files",
    "text": "Excel files\nWe can read an excel file. This particular one is complicated for various reasons, including the fact that the column heads are in the third row, not at the top. Also there are a bunch of footnotes starting in row 510 that we don’t want. So we don’t read them in.\n\ncrime2019 = pd.read_excel(\"data/Violent Crime-by state-2019-table-5.xls\",header=3,nrows=510)\ncrime2019\n\n\n\n\n\n\n\n\nState\nArea\nUnnamed: 2\nPopulation\nViolent \\ncrime1\nMurder and \\nnonnegligent \\nmanslaughter\nRape2\nRobbery\nAggravated \\nassault\nProperty \\ncrime\nBurglary\nLarceny-theft\nMotor \\nvehicle \\ntheft\n\n\n\n\n0\nALABAMA\nMetropolitan Statistical Area\nNaN\n3728978\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1\nNaN\nNaN\nArea actually reporting\n0.766\n12880\n182.0\n1141.0\n1706.0\n9851\n65789\n12388.0\n47299.0\n6102.0\n\n\n2\nNaN\nNaN\nEstimated total\n1\n19951\n300.0\n1542.0\n3432.0\n14677\n104658\n20728.0\n73857.0\n10073.0\n\n\n3\nNaN\nCities outside metropolitan areas\nNaN\n528518\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4\nNaN\nNaN\nArea actually reporting\n0.893\n3327\n36.0\n297.0\n266.0\n2728\n17915\n3140.0\n13382.0\n1393.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n505\nNaN\nNonmetropolitan counties\nNaN\n160615\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n506\nNaN\nNaN\nArea actually reporting\n0.921\n194\n0.0\n39.0\n0.0\n155\n973\n170.0\n716.0\n87.0\n\n\n507\nNaN\nNaN\nEstimated total\n1\n213\n0.0\n42.0\n0.0\n171\n1065\n188.0\n781.0\n96.0\n\n\n508\nNaN\nState Total\nNaN\n578759\n1258\n13.0\n324.0\n67.0\n854\n9093\n1396.0\n6984.0\n713.0\n\n\n509\nNaN\nNaN\nRate per 100,000 inhabitants\nNaN\n217.4\n2.2\n56.0\n11.6\n147.6\n1571.1\n241.2\n1206.7\n123.2\n\n\n\n\n510 rows × 13 columns\n\n\n\nThe column names have newlines in them and we’d like to get rid of those.\n\ncrime2019.columns = [x.replace(\" \\n\",\"_\") for x in crime2019.columns]\ncrime2019\n\n\n\n\n\n\n\n\nState\nArea\nUnnamed: 2\nPopulation\nViolent_crime1\nMurder and_nonnegligent_manslaughter\nRape2\nRobbery\nAggravated_assault\nProperty_crime\nBurglary\nLarceny-theft\nMotor_vehicle_theft\n\n\n\n\n0\nALABAMA\nMetropolitan Statistical Area\nNaN\n3728978\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1\nNaN\nNaN\nArea actually reporting\n0.766\n12880\n182.0\n1141.0\n1706.0\n9851\n65789\n12388.0\n47299.0\n6102.0\n\n\n2\nNaN\nNaN\nEstimated total\n1\n19951\n300.0\n1542.0\n3432.0\n14677\n104658\n20728.0\n73857.0\n10073.0\n\n\n3\nNaN\nCities outside metropolitan areas\nNaN\n528518\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4\nNaN\nNaN\nArea actually reporting\n0.893\n3327\n36.0\n297.0\n266.0\n2728\n17915\n3140.0\n13382.0\n1393.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n505\nNaN\nNonmetropolitan counties\nNaN\n160615\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n506\nNaN\nNaN\nArea actually reporting\n0.921\n194\n0.0\n39.0\n0.0\n155\n973\n170.0\n716.0\n87.0\n\n\n507\nNaN\nNaN\nEstimated total\n1\n213\n0.0\n42.0\n0.0\n171\n1065\n188.0\n781.0\n96.0\n\n\n508\nNaN\nState Total\nNaN\n578759\n1258\n13.0\n324.0\n67.0\n854\n9093\n1396.0\n6984.0\n713.0\n\n\n509\nNaN\nNaN\nRate per 100,000 inhabitants\nNaN\n217.4\n2.2\n56.0\n11.6\n147.6\n1571.1\n241.2\n1206.7\n123.2\n\n\n\n\n510 rows × 13 columns\n\n\n\nLet’s look at the states.\n\nstates = crime2019[\"State\"].dropna().values\nstates\n\narray(['ALABAMA', 'ALASKA', 'ARIZONA', 'ARKANSAS', 'CALIFORNIA',\n       'COLORADO', 'CONNECTICUT', 'DELAWARE', 'DISTRICT OF COLUMBIA3',\n       'FLORIDA', 'GEORGIA', 'HAWAII', 'IDAHO', 'ILLINOIS', 'INDIANA',\n       'IOWA', 'KANSAS', 'KENTUCKY', 'LOUISIANA', 'MAINE', 'MARYLAND',\n       'MASSACHUSETTS', 'MICHIGAN', 'MINNESOTA', 'MISSISSIPPI4',\n       'MISSOURI', 'MONTANA', 'NEBRASKA', 'NEVADA', 'NEW HAMPSHIRE',\n       'NEW JERSEY', 'NEW MEXICO', 'NEW YORK', 'NORTH CAROLINA',\n       'NORTH DAKOTA', 'OHIO4', 'OKLAHOMA', 'OREGON4', 'PENNSYLVANIA',\n       'PUERTO RICO', 'RHODE ISLAND', 'SOUTH CAROLINA', 'SOUTH DAKOTA',\n       'TENNESSEE', 'TEXAS', 'UTAH', 'VERMONT', 'VIRGINIA', 'WASHINGTON',\n       'WEST VIRGINIA', 'WISCONSIN', 'WYOMING'], dtype=object)\n\n\nSome have footnotes at the end. We don’t want them.\n\nstates = [re.sub(\"[0-9$]\",\"\",x) for x in states]\nstates\n\n['ALABAMA',\n 'ALASKA',\n 'ARIZONA',\n 'ARKANSAS',\n 'CALIFORNIA',\n 'COLORADO',\n 'CONNECTICUT',\n 'DELAWARE',\n 'DISTRICT OF COLUMBIA',\n 'FLORIDA',\n 'GEORGIA',\n 'HAWAII',\n 'IDAHO',\n 'ILLINOIS',\n 'INDIANA',\n 'IOWA',\n 'KANSAS',\n 'KENTUCKY',\n 'LOUISIANA',\n 'MAINE',\n 'MARYLAND',\n 'MASSACHUSETTS',\n 'MICHIGAN',\n 'MINNESOTA',\n 'MISSISSIPPI',\n 'MISSOURI',\n 'MONTANA',\n 'NEBRASKA',\n 'NEVADA',\n 'NEW HAMPSHIRE',\n 'NEW JERSEY',\n 'NEW MEXICO',\n 'NEW YORK',\n 'NORTH CAROLINA',\n 'NORTH DAKOTA',\n 'OHIO',\n 'OKLAHOMA',\n 'OREGON',\n 'PENNSYLVANIA',\n 'PUERTO RICO',\n 'RHODE ISLAND',\n 'SOUTH CAROLINA',\n 'SOUTH DAKOTA',\n 'TENNESSEE',\n 'TEXAS',\n 'UTAH',\n 'VERMONT',\n 'VIRGINIA',\n 'WASHINGTON',\n 'WEST VIRGINIA',\n 'WISCONSIN',\n 'WYOMING']\n\n\n] We don’t want to include DC or Puerto Rico.\n\nstates = [x for x in states if x!='DISTRICT OF COLUMBIA' and x!='PUERTO RICO']\nstates\n\n['ALABAMA',\n 'ALASKA',\n 'ARIZONA',\n 'ARKANSAS',\n 'CALIFORNIA',\n 'COLORADO',\n 'CONNECTICUT',\n 'DELAWARE',\n 'FLORIDA',\n 'GEORGIA',\n 'HAWAII',\n 'IDAHO',\n 'ILLINOIS',\n 'INDIANA',\n 'IOWA',\n 'KANSAS',\n 'KENTUCKY',\n 'LOUISIANA',\n 'MAINE',\n 'MARYLAND',\n 'MASSACHUSETTS',\n 'MICHIGAN',\n 'MINNESOTA',\n 'MISSISSIPPI',\n 'MISSOURI',\n 'MONTANA',\n 'NEBRASKA',\n 'NEVADA',\n 'NEW HAMPSHIRE',\n 'NEW JERSEY',\n 'NEW MEXICO',\n 'NEW YORK',\n 'NORTH CAROLINA',\n 'NORTH DAKOTA',\n 'OHIO',\n 'OKLAHOMA',\n 'OREGON',\n 'PENNSYLVANIA',\n 'RHODE ISLAND',\n 'SOUTH CAROLINA',\n 'SOUTH DAKOTA',\n 'TENNESSEE',\n 'TEXAS',\n 'UTAH',\n 'VERMONT',\n 'VIRGINIA',\n 'WASHINGTON',\n 'WEST VIRGINIA',\n 'WISCONSIN',\n 'WYOMING']\n\n\nFinally, we want to pull out the violent crime numbers for the total area of the state. Notice that Puerto Rico and DC use “Total”, not “State Total”, for Area and so they will be excluded.\n\nvcrime2019 = crime2019[crime2019['Area'] == 'State Total']['Violent_crime1'].values\nvcrime2019\n\narray([25046, 6343, 33141, 17643, 174331, 21938, 6546, 4115, 81270, 36170,\n       4042, 4000, 51561, 24966, 8410, 11968, 9701, 25537, 1548, 27456,\n       22578, 43686, 13332, 8272, 30380, 4328, 5821, 15210, 2074, 18375,\n       17450, 69764, 38995, 2169, 34269, 17086, 11995, 39228, 2342, 26323,\n       3530, 40647, 121474, 7553, 1262, 17753, 22377, 5674, 17070, 1258],\n      dtype=object)"
  }
]