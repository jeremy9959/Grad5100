[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Grad 5100: Fundamentals of Data Science",
    "section": "",
    "text": "Grad 5100 is a foundational course in the MS in Data Science Program. It is designed to provide the essential background in programming, statistics, linear algebra, and multivariate calculus that the core and elective courses in the program rely on. The course will run intensively during the first few weeks of the semester and then drop back to a regular weekly schedule.\n\n\n\nWe will rely on the following materials.\n\nThe anaconda machine learning environment for python and associated libraries\nThe R language, Rstudio IDE, and associated libraries\nThe VScode IDE\n\nThere is no formal textbook for the course. Some useful references include the following, all of which are either open source or available through the UConn Library.\n\nProgramming Bootcamp (python) These are notes from a programming bootcamp at Caltech. It is very well done and comprehensive and covers more than we will do in this course.\nProgramming Bootcamp (R) These are notes developed at UConn by Chiranjit Dutta, one of Professor Ravishanker’s students. For a more usable zip file of the Rmd code and the data files, use this link.\nAn Introduction to Statistical Learning by James, et. al. Note that the original version of this book uses the R language, but a new edition available in Summer 2023 uses Python.\nR for Data Science by Wickham and Grolemund.\nPython for Data Science, 3E by Wes McKinney.\nPractical Statistics for Data Scientists by Bruce, Bruce, and Gedeck. Note that this is available for free to UConn students through the UConn library’s subscription to the O’Reilly Learning Platform.\nStatistical Practice for Data Science by Bar, Ravishankar, and Asha (draft).\nMathematics for Machine Learning (draft) by Teitelbaum.\nFluent Python by Ramalho. Available to UConn students through the UConn Library’s subscription to the O’Reilly Learning Platform.\n\nMore advanced technical references include:\n\nThe Elements of Statistical Learning by Hastie, et. al.\nPattern Recognition and Machine Learning by Bishop\n\n\n\n\nWe will use the campuswire Q&A site for class discussions and question asking/answering. Campuswire is like a private version of stackoverflow. Make sure to register for the site.\n\n\n\nCourse grades will be based on:\n\nbiweekly homework assignments (60 %)\na final exam (40 %)\n\n\n\n\nThe instructor reserves the right to modify or adapt this syllabus to account for disruption due to COVID-19 or other unexpected circumstances.\n\n\n\nStudents with disabilities should work with the Center for Students with Disabilities to request academic accommodations. The CSD is located in Wilbur Cross, Room 204 and can be reached at (860)-486-2020 or at csd@uconn.edu.\nStudents are bound by the university’s policies on academic misconduct. Academic misconduct is dishonest or unethical behavior that includes but is not limited to misrepresenting mastery in an academic area (e.g. cheating), failing to properly credit information, research, or ideas to their rightful originators or representing such information, research, or ideas as your own (e.g. plagiarism).\nStudents, faculty, and staff are bound by the university’s policy against discrimination, harassment, and related interpersonal violence.\n\n\n\n\n\n\n\nSetting up a data science working environment\nProbability and Statistics: the normal distribution\nWorking with Data in R and Python\nLinear Algebra: vectors, matrices, the dot product\nPartial derivatives and the gradient; matrix calculus\nSlicing and dicing data in R and Python\nStatistical Models\nHypothesis Testing\nData Structures and Object Oriented Programming\nVisualization tools in R and Python\nVersion Control\nDatabases\nAdditional topics as time permits"
  },
  {
    "objectID": "index.html#introduction",
    "href": "index.html#introduction",
    "title": "Grad 5100: Fundamentals of Data Science",
    "section": "",
    "text": "Grad 5100 is a foundational course in the MS in Data Science Program. It is designed to provide the essential background in programming, statistics, linear algebra, and multivariate calculus that the core and elective courses in the program rely on. The course will run intensively during the first few weeks of the semester and then drop back to a regular weekly schedule."
  },
  {
    "objectID": "index.html#references",
    "href": "index.html#references",
    "title": "Grad 5100: Fundamentals of Data Science",
    "section": "",
    "text": "We will rely on the following materials.\n\nThe anaconda machine learning environment for python and associated libraries\nThe R language, Rstudio IDE, and associated libraries\nThe VScode IDE\n\nThere is no formal textbook for the course. Some useful references include the following, all of which are either open source or available through the UConn Library.\n\nProgramming Bootcamp (python) These are notes from a programming bootcamp at Caltech. It is very well done and comprehensive and covers more than we will do in this course.\nProgramming Bootcamp (R) These are notes developed at UConn by Chiranjit Dutta, one of Professor Ravishanker’s students. For a more usable zip file of the Rmd code and the data files, use this link.\nAn Introduction to Statistical Learning by James, et. al. Note that the original version of this book uses the R language, but a new edition available in Summer 2023 uses Python.\nR for Data Science by Wickham and Grolemund.\nPython for Data Science, 3E by Wes McKinney.\nPractical Statistics for Data Scientists by Bruce, Bruce, and Gedeck. Note that this is available for free to UConn students through the UConn library’s subscription to the O’Reilly Learning Platform.\nStatistical Practice for Data Science by Bar, Ravishankar, and Asha (draft).\nMathematics for Machine Learning (draft) by Teitelbaum.\nFluent Python by Ramalho. Available to UConn students through the UConn Library’s subscription to the O’Reilly Learning Platform.\n\nMore advanced technical references include:\n\nThe Elements of Statistical Learning by Hastie, et. al.\nPattern Recognition and Machine Learning by Bishop"
  },
  {
    "objectID": "index.html#campuswire",
    "href": "index.html#campuswire",
    "title": "Grad 5100: Fundamentals of Data Science",
    "section": "",
    "text": "We will use the campuswire Q&A site for class discussions and question asking/answering. Campuswire is like a private version of stackoverflow. Make sure to register for the site."
  },
  {
    "objectID": "index.html#assessment",
    "href": "index.html#assessment",
    "title": "Grad 5100: Fundamentals of Data Science",
    "section": "",
    "text": "Course grades will be based on:\n\nbiweekly homework assignments (60 %)\na final exam (40 %)"
  },
  {
    "objectID": "index.html#disclaimer",
    "href": "index.html#disclaimer",
    "title": "Grad 5100: Fundamentals of Data Science",
    "section": "",
    "text": "The instructor reserves the right to modify or adapt this syllabus to account for disruption due to COVID-19 or other unexpected circumstances."
  },
  {
    "objectID": "index.html#university-policies",
    "href": "index.html#university-policies",
    "title": "Grad 5100: Fundamentals of Data Science",
    "section": "",
    "text": "Students with disabilities should work with the Center for Students with Disabilities to request academic accommodations. The CSD is located in Wilbur Cross, Room 204 and can be reached at (860)-486-2020 or at csd@uconn.edu.\nStudents are bound by the university’s policies on academic misconduct. Academic misconduct is dishonest or unethical behavior that includes but is not limited to misrepresenting mastery in an academic area (e.g. cheating), failing to properly credit information, research, or ideas to their rightful originators or representing such information, research, or ideas as your own (e.g. plagiarism).\nStudents, faculty, and staff are bound by the university’s policy against discrimination, harassment, and related interpersonal violence."
  },
  {
    "objectID": "index.html#course-outline",
    "href": "index.html#course-outline",
    "title": "Grad 5100: Fundamentals of Data Science",
    "section": "",
    "text": "Setting up a data science working environment\nProbability and Statistics: the normal distribution\nWorking with Data in R and Python\nLinear Algebra: vectors, matrices, the dot product\nPartial derivatives and the gradient; matrix calculus\nSlicing and dicing data in R and Python\nStatistical Models\nHypothesis Testing\nData Structures and Object Oriented Programming\nVisualization tools in R and Python\nVersion Control\nDatabases\nAdditional topics as time permits"
  },
  {
    "objectID": "chapters/00-OrientationProject/orientation-project.html",
    "href": "chapters/00-OrientationProject/orientation-project.html",
    "title": "Orientation Project",
    "section": "",
    "text": "GitHub is a huge repository of open source software projects managed by the version control software git. GitHub and git are designed to allow many people working independently to contribute to a software project, keeping track of different versions and the contributions of different people\nLater we will use GitHub to actually manage software but our goal today is to take advantage of the ability to create a personal web page on GitHub."
  },
  {
    "objectID": "chapters/00-OrientationProject/orientation-project.html#overview",
    "href": "chapters/00-OrientationProject/orientation-project.html#overview",
    "title": "Orientation Project",
    "section": "",
    "text": "GitHub is a huge repository of open source software projects managed by the version control software git. GitHub and git are designed to allow many people working independently to contribute to a software project, keeping track of different versions and the contributions of different people\nLater we will use GitHub to actually manage software but our goal today is to take advantage of the ability to create a personal web page on GitHub."
  },
  {
    "objectID": "chapters/00-OrientationProject/orientation-project.html#steps",
    "href": "chapters/00-OrientationProject/orientation-project.html#steps",
    "title": "Orientation Project",
    "section": "Steps",
    "text": "Steps\n\nCreate a GitHub account with your selected username\nCreate a new repository named username.github.io. Include a basic README.md file.\n\n\n\nTurn on github pages for this repository from the settings link. This is probably done already. Check the published site at https://username.github.io\n\n\n\nCreate a file _config.yml so you can choose a theme. Here we use the architect theme to start with.\n\n\n\nWait a bit and then look at the results.\n\n\n\nLook at the theme possibilities and pick one you like by modifying the _config.yaml file. Notice that it takes a while to deploy the new theme.\n\n\n\nAdd more content! Add more info to the _config.yml file using the theme documentation!"
  },
  {
    "objectID": "chapters/01-SettingUp/setting-up.html",
    "href": "chapters/01-SettingUp/setting-up.html",
    "title": "Key Tools for Data Science",
    "section": "",
    "text": "Download from https://www.anaconda.com\n\nAnaconda includes:\n\npython\njupyter: notebook working environment\npython libraries: ML, visualization, I/O and others\nconda package manager: for dealing with multiple versions of libraries\nanaconda navigator: a GUI gateway to anaconda tools\nlots of other stuff\n\n\n\n\n\nVerify JupyterLab\n\nFrom a command line\n$ jupyter lab \nor use anaconda navigator to launch jupyterlab.\n\n\nVerify python version\n\nFrom a command line\n$ python --version\nor inside a jupyter notebook cell:\nimport sys\n\nprint(sys.version)\n\n\n\n\nSome notes on how to run Jupyter on the HPC cluster\n\n\n\n\n\nR is an open source language for statistical computations.\nRstudio is a working environment for the R language.\nR and Rstudio need to be installed separately.\nR is available at https://cran.r-project.org\nRstudio is available at https://posit.co/download/rstudio-desktop\n\n\n\n\nFor R, From a command line:\n$ R \nFor Rstudio, use the icon/shortcut or from a command line:\n$ rstudio \n\n\n\n\nvscode is a very powerful “IDE” (integrated development environment).\nit can integrate jupyter notebooks and r workbooks, though it takes some setting up\nvscode is integrated with GitHub copilot, a version of ChatGPT-3 that helps write code.\nvscode is available at http://code.visualstudio.com for windows, linux, and macOS.\n\n\n\n\nVSCode (visual studio code) is a freely distributed code editor/IDE distributed by microsoft.\nIt is extremely capable and well-suited for software development in python and other languages.\nIt is perhaps not as optimized for R as Rstudio but it does work.\nYou can access github copilot a version of chatGPT optimized for code, inside vscode in a straightforward way.\n\n\n\nThe software is available here.\nYou need a github account to use github copilot, and you need to sign in to that account from inside vscode. GitHub copilot is free to students, but you need to sign up for the student developer pack..\n\n\n\n\n\nOpening folders (as projects)\nOpening files\nInstall Extensions:\n\npython\nR\nmany others\n\nThe command palette\n\n\n\n\n\njupyter notebooks inside vscode with github copilot\nInteractive python with code cells (# %%)\nThe terminal\n\n\n\n\n\nCreate a project directory\nSubdirectories\n\ndata for data files\ndocs for notes and documentation\nothers?\n\nCreate a README.md file\n\n\n\n\nFor the directories:\n\nthe finder or File Manager\nthe command line\n\nFor the README file:\n\na text editor such as nano or notepad\njupyter or Rstudio (as we will see soon)\nvscode"
  },
  {
    "objectID": "chapters/01-SettingUp/setting-up.html#anaconda-install-for-python",
    "href": "chapters/01-SettingUp/setting-up.html#anaconda-install-for-python",
    "title": "Key Tools for Data Science",
    "section": "",
    "text": "Download from https://www.anaconda.com\n\nAnaconda includes:\n\npython\njupyter: notebook working environment\npython libraries: ML, visualization, I/O and others\nconda package manager: for dealing with multiple versions of libraries\nanaconda navigator: a GUI gateway to anaconda tools\nlots of other stuff"
  },
  {
    "objectID": "chapters/01-SettingUp/setting-up.html#verify-jupyter",
    "href": "chapters/01-SettingUp/setting-up.html#verify-jupyter",
    "title": "Key Tools for Data Science",
    "section": "",
    "text": "Verify JupyterLab\n\nFrom a command line\n$ jupyter lab \nor use anaconda navigator to launch jupyterlab.\n\n\nVerify python version\n\nFrom a command line\n$ python --version\nor inside a jupyter notebook cell:\nimport sys\n\nprint(sys.version)"
  },
  {
    "objectID": "chapters/01-SettingUp/setting-up.html#optional-jupyter-on-uconns-hpc-cluster",
    "href": "chapters/01-SettingUp/setting-up.html#optional-jupyter-on-uconns-hpc-cluster",
    "title": "Key Tools for Data Science",
    "section": "",
    "text": "Some notes on how to run Jupyter on the HPC cluster"
  },
  {
    "objectID": "chapters/01-SettingUp/setting-up.html#r-and-rstudio-install-for-r",
    "href": "chapters/01-SettingUp/setting-up.html#r-and-rstudio-install-for-r",
    "title": "Key Tools for Data Science",
    "section": "",
    "text": "R is an open source language for statistical computations.\nRstudio is a working environment for the R language.\nR and Rstudio need to be installed separately.\nR is available at https://cran.r-project.org\nRstudio is available at https://posit.co/download/rstudio-desktop"
  },
  {
    "objectID": "chapters/01-SettingUp/setting-up.html#verify-r-and-rstudio",
    "href": "chapters/01-SettingUp/setting-up.html#verify-r-and-rstudio",
    "title": "Key Tools for Data Science",
    "section": "",
    "text": "For R, From a command line:\n$ R \nFor Rstudio, use the icon/shortcut or from a command line:\n$ rstudio"
  },
  {
    "objectID": "chapters/01-SettingUp/setting-up.html#vscode",
    "href": "chapters/01-SettingUp/setting-up.html#vscode",
    "title": "Key Tools for Data Science",
    "section": "",
    "text": "vscode is a very powerful “IDE” (integrated development environment).\nit can integrate jupyter notebooks and r workbooks, though it takes some setting up\nvscode is integrated with GitHub copilot, a version of ChatGPT-3 that helps write code.\nvscode is available at http://code.visualstudio.com for windows, linux, and macOS."
  },
  {
    "objectID": "chapters/01-SettingUp/setting-up.html#using-vscode",
    "href": "chapters/01-SettingUp/setting-up.html#using-vscode",
    "title": "Key Tools for Data Science",
    "section": "",
    "text": "VSCode (visual studio code) is a freely distributed code editor/IDE distributed by microsoft.\nIt is extremely capable and well-suited for software development in python and other languages.\nIt is perhaps not as optimized for R as Rstudio but it does work.\nYou can access github copilot a version of chatGPT optimized for code, inside vscode in a straightforward way."
  },
  {
    "objectID": "chapters/01-SettingUp/setting-up.html#installing-vscode",
    "href": "chapters/01-SettingUp/setting-up.html#installing-vscode",
    "title": "Key Tools for Data Science",
    "section": "",
    "text": "The software is available here.\nYou need a github account to use github copilot, and you need to sign in to that account from inside vscode. GitHub copilot is free to students, but you need to sign up for the student developer pack.."
  },
  {
    "objectID": "chapters/01-SettingUp/setting-up.html#overview-of-vscode",
    "href": "chapters/01-SettingUp/setting-up.html#overview-of-vscode",
    "title": "Key Tools for Data Science",
    "section": "",
    "text": "Opening folders (as projects)\nOpening files\nInstall Extensions:\n\npython\nR\nmany others\n\nThe command palette"
  },
  {
    "objectID": "chapters/01-SettingUp/setting-up.html#more-on-vscode",
    "href": "chapters/01-SettingUp/setting-up.html#more-on-vscode",
    "title": "Key Tools for Data Science",
    "section": "",
    "text": "jupyter notebooks inside vscode with github copilot\nInteractive python with code cells (# %%)\nThe terminal"
  },
  {
    "objectID": "chapters/01-SettingUp/setting-up.html#setting-up-a-project",
    "href": "chapters/01-SettingUp/setting-up.html#setting-up-a-project",
    "title": "Key Tools for Data Science",
    "section": "",
    "text": "Create a project directory\nSubdirectories\n\ndata for data files\ndocs for notes and documentation\nothers?\n\nCreate a README.md file"
  },
  {
    "objectID": "chapters/01-SettingUp/setting-up.html#tools",
    "href": "chapters/01-SettingUp/setting-up.html#tools",
    "title": "Key Tools for Data Science",
    "section": "",
    "text": "For the directories:\n\nthe finder or File Manager\nthe command line\n\nFor the README file:\n\na text editor such as nano or notepad\njupyter or Rstudio (as we will see soon)\nvscode"
  },
  {
    "objectID": "chapters/01-SettingUp/Cluster.html",
    "href": "chapters/01-SettingUp/Cluster.html",
    "title": "Jupyter on UConn’s HPC cluster",
    "section": "",
    "text": "On your local machine: Login to the login node:\nYou need to install anaconda on your account on the cluster. To do this you can use wget to download the installer and then run it and follow the installation prompts as usual. You only need to do this part once!\nNow check if python and jupyter lab work.\nIf jupyter lab won’t run because of a libc++.so.6.o error, you can run\nMake a note of the node where your interactive process is running. This is in the prompt. It will be something like cn560.\nMake a note of the token provided by the jupyter lab process and the port where the server is running.\nWith luck, you’re running jupyter on a node in the cluster!"
  },
  {
    "objectID": "chapters/01-SettingUp/Cluster.html#moving-a-file-to-the-cluster",
    "href": "chapters/01-SettingUp/Cluster.html#moving-a-file-to-the-cluster",
    "title": "Jupyter on UConn’s HPC cluster",
    "section": "Moving a file to the cluster",
    "text": "Moving a file to the cluster\nIf you can login to the cluster successfully using ssh then you can transfer a file to the cluster from your laptop using rsync. From a shell on your local machine:\nrsync filename &lt;netID&gt;@hpc2.storrs.hpc.uconn.edu"
  },
  {
    "objectID": "chapters/01-SettingUp/Cluster.html#getting-a-file-from-the-cluster",
    "href": "chapters/01-SettingUp/Cluster.html#getting-a-file-from-the-cluster",
    "title": "Jupyter on UConn’s HPC cluster",
    "section": "Getting a file from the cluster",
    "text": "Getting a file from the cluster\nTo transfer a file from the cluster to your local machine, run the following command from a shell on your local machine.\nrsync &lt;netID&gt;@hpc2.storrs.hpc.uconn.edu:filename ."
  },
  {
    "objectID": "chapters/02-JupyterBasics/jupyter-walkthrough.html",
    "href": "chapters/02-JupyterBasics/jupyter-walkthrough.html",
    "title": "Jupyter Lab and Python Walkthrough",
    "section": "",
    "text": "Use the ‘text editor’ feature in Jupyter Lab to create your README.md file.\nRENAME YOUR NOTEBOOK FILE IMMEDIATELY to something relevant\nCTRL-ENTER executes a cell.\n\n\n\nThis is a markdown cell:\n\nHeadings are #, ##, etc.\nBold is marked **make me bold** like this.\nItalics are marked *make me italic* like this.\nMath can be typeset with if you know it: \\[f(x)=e^{-x}\\cos(x)\\]\nBulleted lists are marked with -.\n\n\n# code cells\n## Code cells contain python code that gets executed.\n# indicates a comment that is ignored.\nprint(\"Hello World!\")\n\nHello World!\n\n\nIn this walkthrough we will look at the following elements of Python in a jupyter notebook.\nThe print statement\n\nprint(\"hello world!\")\n\nhello world!\n\n\nVariables, variable names, and assignment/datatypes\n\ncount = 5  # an integer\nname = \"Jeremy Teitelbaum\"  # a string\nparagraph = \"\"\"This is how you enter a multiline string\nin python. It is enclosed in triple quotes.\"\"\"\npi = 3.14159  # a float\nepsilon = 1.0e-6  # a float\nstudents = [\"Jeremy\", \"Phillip\", \"Sara\", \"Molly\"]  # a list\nHotDog = True\n\n\nprint(students)\n\n['Jeremy', 'Phillip', 'Sara', 'Molly']\n\n\nCompare print for multiline strings with the string value. (\\n means newline)\n\nprint(paragraph)\n\nThis is how you enter a multiline string\nin python. It is enclosed in triple quotes.\n\n\n\nparagraph\n\n'This is how you enter a multiline string\\nin python. It is enclosed in triple quotes.'\n\n\nArithmetic operations\n\nprint(count)\ncount = count + 1\nprint(count)\n\n5\n6\n\n\n\n1 / pi\n\n0.31831015504887655\n\n\n\nprint(2**3)  # exponent\nprint(1 / 2)  # division (converts integer to float)\nprint(1 / (1 / 2))  # 2 becomes 2.0\n\n8\n0.5\n2.0\n\n\n\nquotient = 5 // 3  # integer division\nremainder = 5 % 3  # remainder\nprint(quotient, remainder)\n\n1 2\n\n\nOperations on strings and lists\n\n\"Jeremy\" + \" Teitelbaum\"\n\n'Jeremy Teitelbaum'\n\n\n\n[\"a\", \"b\", \"c\"] + [\"d\"]\n\n['a', 'b', 'c', 'd']\n\n\n\nlen(\"Jeremy\")\n\n6\n\n\n\nlen([\"Jeremy\", \"Teitelbaum\"])\n\n2\n\n\n\nfirstName = \"Jeremy\"\nlastName = \"Teitelbaum\"\nfullName = firstName + \" \" + lastName\n\nSome fancier printing\n\nprint(f\"The first name is {firstName}\")\nprint(f\"The last name is {lastName}\")\nprint(f\"The full name is {firstName} {lastName}\")\nprint(firstName, lastName, sep=\",\")\nprint(firstName, lastName, sep=\":\")\n\nThe first name is Jeremy\nThe last name is Teitelbaum\nThe full name is Jeremy Teitelbaum\nJeremy,Teitelbaum\nJeremy:Teitelbaum\n\n\nSlicing\nIn python, we always count from zero!!!\n\nfirstName[0]\n\n'J'\n\n\n\nlastName[1]\n\n'e'\n\n\n\n# [a:b] means from a to b-1 inclusive\n\nprint(firstName[0:3])\nprint(firstName[3:])\nprint(firstName[3:5])\n\nJer\nemy\nem\n\n\n\n# negative indices count from the end\nprint(firstName[-1])  # the last element\nprint(firstName[-3:-1])  # elements -3 and -2, but not -1\n\ny\nem\n\n\n\n# [a:b:c] means from a to b-1 in steps of c\n# missing numbers mean (beginnging):(end)\nprint(firstName[:5:2])\nprint(firstName[::2])\nprint(firstName[::-1])  # reverse the string\nprint(firstName[3::-1])  # 3,2,1,0\nprint(firstName[3:0:-1])  # 3,2,1\n\nJrm\nJrm\nymereJ\nereJ\nere\n\n\nSlices work the same on list elements\n\nprint(students[0])\nprint(students[-1])\nevery_other_student = students[::2]\nprint(every_other_student)\n\nJeremy\nMolly\n['Jeremy', 'Sara']\n\n\nLibraries\n\nimport math\n\n\nmath.log(23)\n\n3.1354942159291497\n\n\n\nmath.pi\n\n3.141592653589793\n\n\n\nmath.cos(math.pi / 2)  # should be zero\n\n6.123233995736766e-17\n\n\n\nmath.cos(math.pi / 2) == 0\n\nFalse\n\n\n\nabs(math.cos(math.pi / 2)) &lt; 1e-6\n\nTrue\n\n\n\nmath.pi == pi\n\nFalse\n\n\n\nimport numpy as np\n\n\nprint(np.random.randint(0, 10))\n\n7\n\n\n\nprint(np.__version__)\n\n1.24.2\n\n\n\nfrom numpy.random import randint\n\n\nrandint(1, 10)\n\n3\n\n\n\n\n\nA numpy array is like a list, but:\n- it's itended for use with numbers\n- it's designed for fast arithmetic and numerical operations\n- it can be multi-dimensional -- like a table or matrix -- although we won't use that here.\n\nx = np.array([1, 2, 3, 4, 5, 6])\nprint(x)\n\n[1 2 3 4 5 6]\n\n\nYou access arrays like lists, and can use slices; indices start at zero.\n\nx[2:4]\n\narray([3, 4])\n\n\nWhen you apply an operation to an array, it gets applied to every element of the array.\n\nprint(f\"Square of x is {x**2}\")\nprint(f\"1/x is {1/x}\")\nprint(f\"cos(x) is {np.cos(x)}\")\n\nSquare of x is [ 1  4  9 16 25 36]\n1/x is [1.         0.5        0.33333333 0.25       0.2        0.16666667]\ncos(x) is [ 0.54030231 -0.41614684 -0.9899925  -0.65364362  0.28366219  0.96017029]\n\n\nSome special arrays.\n\nx = np.zeros(10)  # 10 zeros\ny = np.ones(20)  # 20 ones\nz = np.linspace(0, 10, 100)  # 100 equally spaced numbers from 0 to 10 **inclusive**\nw = np.array(list(range(-10, 10, 2)))\n\n\nprint(w)\n\n[-10  -8  -6  -4  -2   0   2   4   6   8]\n\n\n\nprint(z)\n\n[ 0.          0.1010101   0.2020202   0.3030303   0.4040404   0.50505051\n  0.60606061  0.70707071  0.80808081  0.90909091  1.01010101  1.11111111\n  1.21212121  1.31313131  1.41414141  1.51515152  1.61616162  1.71717172\n  1.81818182  1.91919192  2.02020202  2.12121212  2.22222222  2.32323232\n  2.42424242  2.52525253  2.62626263  2.72727273  2.82828283  2.92929293\n  3.03030303  3.13131313  3.23232323  3.33333333  3.43434343  3.53535354\n  3.63636364  3.73737374  3.83838384  3.93939394  4.04040404  4.14141414\n  4.24242424  4.34343434  4.44444444  4.54545455  4.64646465  4.74747475\n  4.84848485  4.94949495  5.05050505  5.15151515  5.25252525  5.35353535\n  5.45454545  5.55555556  5.65656566  5.75757576  5.85858586  5.95959596\n  6.06060606  6.16161616  6.26262626  6.36363636  6.46464646  6.56565657\n  6.66666667  6.76767677  6.86868687  6.96969697  7.07070707  7.17171717\n  7.27272727  7.37373737  7.47474747  7.57575758  7.67676768  7.77777778\n  7.87878788  7.97979798  8.08080808  8.18181818  8.28282828  8.38383838\n  8.48484848  8.58585859  8.68686869  8.78787879  8.88888889  8.98989899\n  9.09090909  9.19191919  9.29292929  9.39393939  9.49494949  9.5959596\n  9.6969697   9.7979798   9.8989899  10.        ]\n\n\n\n## Plotting with matplotlib\n\n\nimport matplotlib.pyplot as plt\n\n\nplt.plot(z, z**2)\n\n\n\n\n\nz = np.linspace(-10, 10, 100)\nplt.axes()\nplt.plot(z, np.cos(z), color=\"red\")\nplt.title(\"A cosine curve\")\nplt.grid()\nplt.xlim(-10, 10)\nplt.ylim(-10, 10)\nplt.xticks(list(range(-10, 11)))\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\n\nText(0, 0.5, 'y')"
  },
  {
    "objectID": "chapters/02-JupyterBasics/jupyter-walkthrough.html#markdown-cells",
    "href": "chapters/02-JupyterBasics/jupyter-walkthrough.html#markdown-cells",
    "title": "Jupyter Lab and Python Walkthrough",
    "section": "",
    "text": "This is a markdown cell:\n\nHeadings are #, ##, etc.\nBold is marked **make me bold** like this.\nItalics are marked *make me italic* like this.\nMath can be typeset with if you know it: \\[f(x)=e^{-x}\\cos(x)\\]\nBulleted lists are marked with -.\n\n\n# code cells\n## Code cells contain python code that gets executed.\n# indicates a comment that is ignored.\nprint(\"Hello World!\")\n\nHello World!\n\n\nIn this walkthrough we will look at the following elements of Python in a jupyter notebook.\nThe print statement\n\nprint(\"hello world!\")\n\nhello world!\n\n\nVariables, variable names, and assignment/datatypes\n\ncount = 5  # an integer\nname = \"Jeremy Teitelbaum\"  # a string\nparagraph = \"\"\"This is how you enter a multiline string\nin python. It is enclosed in triple quotes.\"\"\"\npi = 3.14159  # a float\nepsilon = 1.0e-6  # a float\nstudents = [\"Jeremy\", \"Phillip\", \"Sara\", \"Molly\"]  # a list\nHotDog = True\n\n\nprint(students)\n\n['Jeremy', 'Phillip', 'Sara', 'Molly']\n\n\nCompare print for multiline strings with the string value. (\\n means newline)\n\nprint(paragraph)\n\nThis is how you enter a multiline string\nin python. It is enclosed in triple quotes.\n\n\n\nparagraph\n\n'This is how you enter a multiline string\\nin python. It is enclosed in triple quotes.'\n\n\nArithmetic operations\n\nprint(count)\ncount = count + 1\nprint(count)\n\n5\n6\n\n\n\n1 / pi\n\n0.31831015504887655\n\n\n\nprint(2**3)  # exponent\nprint(1 / 2)  # division (converts integer to float)\nprint(1 / (1 / 2))  # 2 becomes 2.0\n\n8\n0.5\n2.0\n\n\n\nquotient = 5 // 3  # integer division\nremainder = 5 % 3  # remainder\nprint(quotient, remainder)\n\n1 2\n\n\nOperations on strings and lists\n\n\"Jeremy\" + \" Teitelbaum\"\n\n'Jeremy Teitelbaum'\n\n\n\n[\"a\", \"b\", \"c\"] + [\"d\"]\n\n['a', 'b', 'c', 'd']\n\n\n\nlen(\"Jeremy\")\n\n6\n\n\n\nlen([\"Jeremy\", \"Teitelbaum\"])\n\n2\n\n\n\nfirstName = \"Jeremy\"\nlastName = \"Teitelbaum\"\nfullName = firstName + \" \" + lastName\n\nSome fancier printing\n\nprint(f\"The first name is {firstName}\")\nprint(f\"The last name is {lastName}\")\nprint(f\"The full name is {firstName} {lastName}\")\nprint(firstName, lastName, sep=\",\")\nprint(firstName, lastName, sep=\":\")\n\nThe first name is Jeremy\nThe last name is Teitelbaum\nThe full name is Jeremy Teitelbaum\nJeremy,Teitelbaum\nJeremy:Teitelbaum\n\n\nSlicing\nIn python, we always count from zero!!!\n\nfirstName[0]\n\n'J'\n\n\n\nlastName[1]\n\n'e'\n\n\n\n# [a:b] means from a to b-1 inclusive\n\nprint(firstName[0:3])\nprint(firstName[3:])\nprint(firstName[3:5])\n\nJer\nemy\nem\n\n\n\n# negative indices count from the end\nprint(firstName[-1])  # the last element\nprint(firstName[-3:-1])  # elements -3 and -2, but not -1\n\ny\nem\n\n\n\n# [a:b:c] means from a to b-1 in steps of c\n# missing numbers mean (beginnging):(end)\nprint(firstName[:5:2])\nprint(firstName[::2])\nprint(firstName[::-1])  # reverse the string\nprint(firstName[3::-1])  # 3,2,1,0\nprint(firstName[3:0:-1])  # 3,2,1\n\nJrm\nJrm\nymereJ\nereJ\nere\n\n\nSlices work the same on list elements\n\nprint(students[0])\nprint(students[-1])\nevery_other_student = students[::2]\nprint(every_other_student)\n\nJeremy\nMolly\n['Jeremy', 'Sara']\n\n\nLibraries\n\nimport math\n\n\nmath.log(23)\n\n3.1354942159291497\n\n\n\nmath.pi\n\n3.141592653589793\n\n\n\nmath.cos(math.pi / 2)  # should be zero\n\n6.123233995736766e-17\n\n\n\nmath.cos(math.pi / 2) == 0\n\nFalse\n\n\n\nabs(math.cos(math.pi / 2)) &lt; 1e-6\n\nTrue\n\n\n\nmath.pi == pi\n\nFalse\n\n\n\nimport numpy as np\n\n\nprint(np.random.randint(0, 10))\n\n7\n\n\n\nprint(np.__version__)\n\n1.24.2\n\n\n\nfrom numpy.random import randint\n\n\nrandint(1, 10)\n\n3"
  },
  {
    "objectID": "chapters/02-JupyterBasics/jupyter-walkthrough.html#numpy-arrays",
    "href": "chapters/02-JupyterBasics/jupyter-walkthrough.html#numpy-arrays",
    "title": "Jupyter Lab and Python Walkthrough",
    "section": "",
    "text": "A numpy array is like a list, but:\n- it's itended for use with numbers\n- it's designed for fast arithmetic and numerical operations\n- it can be multi-dimensional -- like a table or matrix -- although we won't use that here.\n\nx = np.array([1, 2, 3, 4, 5, 6])\nprint(x)\n\n[1 2 3 4 5 6]\n\n\nYou access arrays like lists, and can use slices; indices start at zero.\n\nx[2:4]\n\narray([3, 4])\n\n\nWhen you apply an operation to an array, it gets applied to every element of the array.\n\nprint(f\"Square of x is {x**2}\")\nprint(f\"1/x is {1/x}\")\nprint(f\"cos(x) is {np.cos(x)}\")\n\nSquare of x is [ 1  4  9 16 25 36]\n1/x is [1.         0.5        0.33333333 0.25       0.2        0.16666667]\ncos(x) is [ 0.54030231 -0.41614684 -0.9899925  -0.65364362  0.28366219  0.96017029]\n\n\nSome special arrays.\n\nx = np.zeros(10)  # 10 zeros\ny = np.ones(20)  # 20 ones\nz = np.linspace(0, 10, 100)  # 100 equally spaced numbers from 0 to 10 **inclusive**\nw = np.array(list(range(-10, 10, 2)))\n\n\nprint(w)\n\n[-10  -8  -6  -4  -2   0   2   4   6   8]\n\n\n\nprint(z)\n\n[ 0.          0.1010101   0.2020202   0.3030303   0.4040404   0.50505051\n  0.60606061  0.70707071  0.80808081  0.90909091  1.01010101  1.11111111\n  1.21212121  1.31313131  1.41414141  1.51515152  1.61616162  1.71717172\n  1.81818182  1.91919192  2.02020202  2.12121212  2.22222222  2.32323232\n  2.42424242  2.52525253  2.62626263  2.72727273  2.82828283  2.92929293\n  3.03030303  3.13131313  3.23232323  3.33333333  3.43434343  3.53535354\n  3.63636364  3.73737374  3.83838384  3.93939394  4.04040404  4.14141414\n  4.24242424  4.34343434  4.44444444  4.54545455  4.64646465  4.74747475\n  4.84848485  4.94949495  5.05050505  5.15151515  5.25252525  5.35353535\n  5.45454545  5.55555556  5.65656566  5.75757576  5.85858586  5.95959596\n  6.06060606  6.16161616  6.26262626  6.36363636  6.46464646  6.56565657\n  6.66666667  6.76767677  6.86868687  6.96969697  7.07070707  7.17171717\n  7.27272727  7.37373737  7.47474747  7.57575758  7.67676768  7.77777778\n  7.87878788  7.97979798  8.08080808  8.18181818  8.28282828  8.38383838\n  8.48484848  8.58585859  8.68686869  8.78787879  8.88888889  8.98989899\n  9.09090909  9.19191919  9.29292929  9.39393939  9.49494949  9.5959596\n  9.6969697   9.7979798   9.8989899  10.        ]\n\n\n\n## Plotting with matplotlib\n\n\nimport matplotlib.pyplot as plt\n\n\nplt.plot(z, z**2)\n\n\n\n\n\nz = np.linspace(-10, 10, 100)\nplt.axes()\nplt.plot(z, np.cos(z), color=\"red\")\nplt.title(\"A cosine curve\")\nplt.grid()\nplt.xlim(-10, 10)\nplt.ylim(-10, 10)\nplt.xticks(list(range(-10, 11)))\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\n\nText(0, 0.5, 'y')"
  },
  {
    "objectID": "chapters/03-RBasics/r-walkthrough.html",
    "href": "chapters/03-RBasics/r-walkthrough.html",
    "title": "R Notebook Walkthrough",
    "section": "",
    "text": "Start out with a code cell saying “Hello World”\nprint(\"Hello World\")\n\n[1] \"Hello World\"\nThe cat command is actually probably more useful than print:\ncat(\"hello world\")\n\nhello world"
  },
  {
    "objectID": "chapters/03-RBasics/r-walkthrough.html#variables-types-and-assignment",
    "href": "chapters/03-RBasics/r-walkthrough.html#variables-types-and-assignment",
    "title": "R Notebook Walkthrough",
    "section": "Variables, Types, and Assignment",
    "text": "Variables, Types, and Assignment\nIn R, the assignment operator is &lt;-, not =. This takes some getting used to.\n\ncount &lt;- 5\nname &lt;- \"Jeremy Teitelbaum\" # string types are called chr for character\nparagraph &lt;- \"Far across the misty mountains cold,\nto dungeons deep and caverns cold,\nwe must away,\nere break of day\nto seek our long forgotten gold.\"\npi &lt;- 3.14159 # R doesn't use integer types unless you force it to, numbers are \"num\" # nolint: line_length_linter.\nepsilon &lt;- 1e-6\ncount &lt;- 5L # this forces an integer\nstudents &lt;- c(\"Jeremy\", \"Phillip\", \"Sara\", \"Molly\")\nhot_dog &lt;- TRUE # note all caps unlike Python; false is FALSE\n\nIn R, you can give names to the elements of a vector.\n\nprint(\"hello\")\n\n[1] \"hello\"\n\n\n\nnames(students) &lt;- c(\"President\", \"Vice President\", \"Treasurer\", \"Secretary\")\nprint(names(students))\n\n[1] \"President\"      \"Vice President\" \"Treasurer\"      \"Secretary\"     \n\nprint(students[\"President\"])\n\nPresident \n \"Jeremy\" \n\nprint(students)\n\n     President Vice President      Treasurer      Secretary \n      \"Jeremy\"      \"Phillip\"         \"Sara\"        \"Molly\" \n\n\nThe cat command is a print command that “concatenates” its arguments; it needs an explicit newline.\n\nprint(students)\n\n     President Vice President      Treasurer      Secretary \n      \"Jeremy\"      \"Phillip\"         \"Sara\"        \"Molly\" \n\nprint(count)\n\n[1] 5\n\ncat(\"Students:\", students, \"\\n\")\n\nStudents: Jeremy Phillip Sara Molly \n\nprint(epsilon)\n\n[1] 1e-06\n\ncat(\"The value of epsilon is:\", epsilon, \"\\n\")\n\nThe value of epsilon is: 1e-06 \n\nprint(paragraph)\n\n[1] \"Far across the misty mountains cold,\\nto dungeons deep and caverns cold,\\nwe must away,\\nere break of day\\nto seek our long forgotten gold.\"\n\ncat(paragraph)\n\nFar across the misty mountains cold,\nto dungeons deep and caverns cold,\nwe must away,\nere break of day\nto seek our long forgotten gold.\n\n\nThe [1] at the beginning of each of these things reflects the fact that in R everything is a vector. So it is telling you that the first thing there is element 1 of the vector.\nThe c() command makes a vector of its arguments. It forces everything to be of the same type.\n\nstr_list &lt;- c(\"Jeremy\", 25, 1.34, FALSE) # everything becomes a string\nint_list &lt;- c(1, 2, 3, 4, 5)\nfloat_list &lt;- c(1, 2, 3.5, 4)"
  },
  {
    "objectID": "chapters/03-RBasics/r-walkthrough.html#arithmetic",
    "href": "chapters/03-RBasics/r-walkthrough.html#arithmetic",
    "title": "R Notebook Walkthrough",
    "section": "Arithmetic",
    "text": "Arithmetic\nR does all arithmetic on vectors/lists. It one is shorter than the other, it repeats the shorter one, but the length of the longer has to be a multiple of the shorter.\n\na &lt;- 1\nb &lt;- 2\na + b\n\n[1] 3\n\n\n\na &lt;- c(1, 2, 3, 4, 5)\nb &lt;- 4\na + b\n\n[1] 5 6 7 8 9\n\n\n\na &lt;- c(1, 2, 3, 4, 5, 6)\nb &lt;- c(10, 11)\na + b\n\n[1] 11 13 13 15 15 17\n\n\n\na &lt;- c(1, 2, 3, 4, 5)\nb &lt;- c(1, 2)\na + b\n\nWarning in a + b: longer object length is not a multiple of shorter object\nlength\n\n\n[1] 2 4 4 6 6\n\n\n\na / 5\n\n[1] 0.2 0.4 0.6 0.8 1.0\n\n\n\n# integer division (// in python)\na &lt;- 5L\nb &lt;- 3\na %/% b\n\n[1] 1\n\n\n\n# remainder (% in python)\na &lt;- 5\nb &lt;- 3\na %% b\n\n[1] 2\n\n\n\na &lt;- c(1, 2, 3, 4, 5)\na^2\n\n[1]  1  4  9 16 25\n\n\n\nprint(a^2 == a)\n\n[1]  TRUE FALSE FALSE FALSE FALSE\n\nprint(a^2 &gt; a)\n\n[1] FALSE  TRUE  TRUE  TRUE  TRUE\n\nprint(a^2 == 4)\n\n[1] FALSE  TRUE FALSE FALSE FALSE"
  },
  {
    "objectID": "chapters/03-RBasics/r-walkthrough.html#operations-on-strings-and-lists",
    "href": "chapters/03-RBasics/r-walkthrough.html#operations-on-strings-and-lists",
    "title": "R Notebook Walkthrough",
    "section": "Operations on strings and lists",
    "text": "Operations on strings and lists\n\nfirst_name &lt;- \"Jeremy\"\nlast_name &lt;- \"Teitelbaum\"\nnchar(first_name)\n\n[1] 6\n\n\n\npaste(first_name, last_name) # spaces by default\n\n[1] \"Jeremy Teitelbaum\"\n\n\n\npaste(first_name, last_name, sep = \"\") # no space\n\n[1] \"JeremyTeitelbaum\"\n\n\n\npaste(c(1, 2, 3), \"Jeremy\") # remember functions work across vectors\n\n[1] \"1 Jeremy\" \"2 Jeremy\" \"3 Jeremy\""
  },
  {
    "objectID": "chapters/03-RBasics/r-walkthrough.html#substrings",
    "href": "chapters/03-RBasics/r-walkthrough.html#substrings",
    "title": "R Notebook Walkthrough",
    "section": "Substrings",
    "text": "Substrings\nIn R, you always count from 1 (big difference from python)\n\nfirst_name[1] # another difference from Python\n\n[1] \"Jeremy\"\n\n\n\na &lt;- substr(\"Jeremy\", 1, 1)\nb &lt;- substr(\"Jeremy\", 1, 3)\ncat(a, b, paste(a, b, sep = \"\"))\n\nJ Jer JJer"
  },
  {
    "objectID": "chapters/03-RBasics/r-walkthrough.html#slicing-lists",
    "href": "chapters/03-RBasics/r-walkthrough.html#slicing-lists",
    "title": "R Notebook Walkthrough",
    "section": "Slicing lists",
    "text": "Slicing lists\n\nnums &lt;- 0:10 # generates a sequence from 0 to 10 INCLUSIVE (compare python)\nprint(nums)\n\n [1]  0  1  2  3  4  5  6  7  8  9 10\n\nprint(nums[c(1, 3)]) # you can pass a list of indices to a subscript\n\n[1] 0 2\n\n\n\nsqrs &lt;- nums^2\nsqrs[seq(1, 10, 2)]\n\n[1]  0  4 16 36 64\n\n\nIn R, negative numbers in seq mean “omit” so this means omit entries 2 through 5. You can’t mix positive and negative numbers\n\nrev &lt;- nums[seq(-2, -5)]\nprint(rev)\n\n[1]  0  5  6  7  8  9 10\n\n\n\nrev(nums) # reverses the list\n\n [1] 10  9  8  7  6  5  4  3  2  1  0"
  },
  {
    "objectID": "chapters/03-RBasics/r-walkthrough.html#libraries-and-packages",
    "href": "chapters/03-RBasics/r-walkthrough.html#libraries-and-packages",
    "title": "R Notebook Walkthrough",
    "section": "Libraries and packages",
    "text": "Libraries and packages\nUse the Rstudio package manager to add libraries to your installation, but to use them you need to use the library function. The tidyverse library is something we will use a lot.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.1     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "chapters/03-RBasics/r-walkthrough.html#plotting",
    "href": "chapters/03-RBasics/r-walkthrough.html#plotting",
    "title": "R Notebook Walkthrough",
    "section": "Plotting",
    "text": "Plotting\n\nlibrary(ggplot2)\n\n\nx &lt;- seq(-10, 10, .1)\ny &lt;- x**2\ndata &lt;- tibble(\"x\" = x, \"y\" = y)\n\n\nggplot(data = data, aes(x = x)) +\n    geom_point(aes(y = y), color = \"red\") +\n    ggtitle(\"A Parabola\") +\n    scale_x_continuous(breaks = seq(-10, 10, 1)) +\n    scale_y_continuous(breaks = seq(0, 100, 20))\n\n\n\n\n\nx &lt;- seq(-10, 10, .1)\ny &lt;- cos(x)\ndata &lt;- tibble(\"x\" = x, \"y\" = y)\nggplot(data = data, aes(x = x)) +\n    geom_line(aes(y = y), color = \"darkgreen\") +\n    ggtitle(\"A Cosine Curve\") +\n    scale_x_continuous(breaks = seq(-10, 10, 1)) +\n    scale_y_continuous(breaks = seq(-1, 1, 5))"
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#probability-theory",
    "href": "chapters/04-StatBasics/stat-basics.html#probability-theory",
    "title": "Statistical Basics",
    "section": "Probability Theory",
    "text": "Probability Theory\nProbability theory is based on:\n\nAn underlying collection \\(S\\) of all possible outcomes (a population or sample space) of an experiment.\nA rule \\(P\\) that assigns a number between zero and one to each subset of the sample space satisfying certain rules."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#sample-space",
    "href": "chapters/04-StatBasics/stat-basics.html#sample-space",
    "title": "Statistical Basics",
    "section": "Sample Space",
    "text": "Sample Space\nFor example:\n\nFor a flip of a single coin, the possible outcomes are Heads and Tails and the sample space has two elements. For multiple flips, the outcomes are sequences of Heads and Tails.\nFor a measurement of temperature, we might model the possible outcomes, or the sample space, as all real numbers, recognizing that only some of them are actually possible results of the experiment."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#simple-events",
    "href": "chapters/04-StatBasics/stat-basics.html#simple-events",
    "title": "Statistical Basics",
    "section": "Simple Events",
    "text": "Simple Events\nThe elements of the sample space or population are the outcomes or simple events or sample points.\n\nFor a flip of a coin, the possible outcomes are Heads or Tails. For multiple flips, the possible outcomes are particular sequences of Heads or Tails.\nFor a measurement of temperature, a simple event would be a particular number obtained at a particular time."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#events",
    "href": "chapters/04-StatBasics/stat-basics.html#events",
    "title": "Statistical Basics",
    "section": "Events",
    "text": "Events\nSubsets of the population make up events or outcomes.\n\nAmong the population made up of sequences of 10 coin flips, the subset consisting of sequences containing at least 3 heads is an event.\nAmong the measurements of temperature, a measurement lying between say 22 and 25 degrees celsius would be an event."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#probability-measure",
    "href": "chapters/04-StatBasics/stat-basics.html#probability-measure",
    "title": "Statistical Basics",
    "section": "Probability Measure",
    "text": "Probability Measure\nThe last element of probability theory is the function P that assigns a number between 0 and 1 to every event such that\n\n\\(P(\\emptyset)=0\\)\n\\(P(S)=1\\).\nIf \\(A\\cap B=\\emptyset\\) then \\(P(A\\cup B)=P(A)+P(B)\\). This is also required to hold for infinite collections of disjoint sets but we won’t worry much about the foundations of probability."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#random-variables",
    "href": "chapters/04-StatBasics/stat-basics.html#random-variables",
    "title": "Statistical Basics",
    "section": "Random Variables",
    "text": "Random Variables\nA random variable is a rule that assigns a number to an event.\n\nWe can assign the value 1 to heads and 0 to tails. This is a bernoulli random variable.\nOur sample space can be sets of 10 coin flips. The number of heads is a random variable.\nThe measurement of temperature yields a number.\n\nIf we pick a person at random, we can assign the value 1 if they wear glasses and 0 if not."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#discrete-vs-continuous-random-variables",
    "href": "chapters/04-StatBasics/stat-basics.html#discrete-vs-continuous-random-variables",
    "title": "Statistical Basics",
    "section": "Discrete vs Continuous Random Variables",
    "text": "Discrete vs Continuous Random Variables\nA discrete random variables takes “separate” values depending on the event. A continuous random variable takes values in a range.\n\nBernoulli random variable is discrete (0/1)\nNumber of heads in 10 flips is discrete (takes values 0,…,10)\nTemperature is continuous (in principle can get any reading)\nMass of a penguin is continuous\nSpecies of penguin is discrete"
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#events-and-random-variables",
    "href": "chapters/04-StatBasics/stat-basics.html#events-and-random-variables",
    "title": "Statistical Basics",
    "section": "Events and Random Variables",
    "text": "Events and Random Variables\nSpecifying a value, or a range of values, for a random variable defines an event."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#bernoulli-example",
    "href": "chapters/04-StatBasics/stat-basics.html#bernoulli-example",
    "title": "Statistical Basics",
    "section": "Bernoulli example",
    "text": "Bernoulli example\n\nSample space is \\(\\{H,T\\}\\)\n\\(P(H)=p\\)\n\\(X\\) is the random variable with \\(X(H)=1\\) and \\(X(T)=0\\)\n\nThen:\n\n\\(X=1\\) is the same as the event \\(H\\)\n\\(P(X=1)\\)=p"
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#independence",
    "href": "chapters/04-StatBasics/stat-basics.html#independence",
    "title": "Statistical Basics",
    "section": "Independence",
    "text": "Independence\nTwo events are independent if the chance of both occurring is the product of the chances of them occurring separately.\n\\[\nP(X\\cap Y)=P(X)P(Y)\n\\]"
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#binomial-example",
    "href": "chapters/04-StatBasics/stat-basics.html#binomial-example",
    "title": "Statistical Basics",
    "section": "Binomial Example",
    "text": "Binomial Example\nA binomial random variable (with parameters \\(n\\) and \\(p\\)) is the sum of \\(n\\) bernoulli random variables with probability \\(p\\). It corresponds to flipping a coin (with \\(P(H)=p\\)) \\(n\\) times and counting up the heads.\nThe probability of getting \\(k\\) heads is \\[\nP(k)=\\binom{n}{k}p^k(1-p)^{n-k}\n\\]"
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#binomial-distribution",
    "href": "chapters/04-StatBasics/stat-basics.html#binomial-distribution",
    "title": "Statistical Basics",
    "section": "Binomial Distribution",
    "text": "Binomial Distribution"
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#continuous-example",
    "href": "chapters/04-StatBasics/stat-basics.html#continuous-example",
    "title": "Statistical Basics",
    "section": "Continuous example",
    "text": "Continuous example\n\nSample space is the possible temperatures at a particular point in space and time.\nRandom variable \\(T\\) is a measure of temperature.\n\\(P(21&lt;T&lt;22)\\) is the probability that the temperature is between 21 and 22 degrees."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#probability-density-functions",
    "href": "chapters/04-StatBasics/stat-basics.html#probability-density-functions",
    "title": "Statistical Basics",
    "section": "Probability density functions",
    "text": "Probability density functions\nIn the continuous case, probability is measured by a probability density function \\(P(x)\\). The classic example is the normal (bell-shaped) curve."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#density-functions",
    "href": "chapters/04-StatBasics/stat-basics.html#density-functions",
    "title": "Statistical Basics",
    "section": "Density Functions",
    "text": "Density Functions\nIf \\(P(x)\\) is the density function, then:\n\nthe probability that \\(x\\) lies between \\(a\\) and \\(b\\) is the area under density function between \\(a\\) and \\(b\\)."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#area-gives-probability",
    "href": "chapters/04-StatBasics/stat-basics.html#area-gives-probability",
    "title": "Statistical Basics",
    "section": "Area gives probability",
    "text": "Area gives probability\n\nThe shaded area gives probability 0.87 for temp between 21.7 and 22.3."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#standard-normal",
    "href": "chapters/04-StatBasics/stat-basics.html#standard-normal",
    "title": "Statistical Basics",
    "section": "Standard Normal",
    "text": "Standard Normal\nA normal curve is defined by two parameters:\n\nthe mean \\(\\mu\\), which sets the location\nthe standard deviation \\(\\sigma\\) or its square, the variance \\(\\sigma^2\\), which sets the scale."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#z-score",
    "href": "chapters/04-StatBasics/stat-basics.html#z-score",
    "title": "Statistical Basics",
    "section": "Z-score",
    "text": "Z-score\nIf \\(x\\) is a normal random variable with mean \\(\\mu\\) and variance \\(\\sigma^2\\), then \\[\nz = \\frac{x-\\mu}{\\sigma}\n\\] is a normal random variable with mean \\(0\\) and variance \\(1\\). This is called a \\(z\\)-score or a standard normal variable."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#cumulative-distribution",
    "href": "chapters/04-StatBasics/stat-basics.html#cumulative-distribution",
    "title": "Statistical Basics",
    "section": "Cumulative Distribution",
    "text": "Cumulative Distribution\nThe cumulative distribution is a function \\(f(x)\\) such that \\(f(x)\\) is the the percentage of samples that are less than \\(x\\)."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#cumulative-distribution-1",
    "href": "chapters/04-StatBasics/stat-basics.html#cumulative-distribution-1",
    "title": "Statistical Basics",
    "section": "Cumulative Distribution",
    "text": "Cumulative Distribution\n\nSo the median of the samples occurs where the \\(y\\)-axis is \\(.5\\)."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#quantiles",
    "href": "chapters/04-StatBasics/stat-basics.html#quantiles",
    "title": "Statistical Basics",
    "section": "Quantiles",
    "text": "Quantiles\n\nIf \\(q\\) is between \\(0\\) and \\(1\\), then the \\(q^{th}\\) quantile \\(Q\\) of a random variable \\(x\\) is the value of \\(x\\) such that the fraction of the population with \\(x&lt;Q\\) is \\(q\\).\nThe median of \\(x\\) is the \\(.5\\) quantile for \\(x\\) because half of the population has values less than the median.\nOne can read quantiles from the cumulative distribution."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#distributions-in-r",
    "href": "chapters/04-StatBasics/stat-basics.html#distributions-in-r",
    "title": "Statistical Basics",
    "section": "Distributions in R",
    "text": "Distributions in R\nThere are many distributions in R. We’ve talked about the binomial (discrete) and normal (continuous).\n\nrnorm (rbinom) draws samples from the distribution\ndnorm (dbinom) gives the value of the probability density function\npnorm (pbinom) gives the value of the cumulative density function\nqnorm (qbinom) gives the quantiles, that is, qnorm(p) gives the value of the parameter so that the probability of getting a result less than that parameter is p."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#examples-in-r",
    "href": "chapters/04-StatBasics/stat-basics.html#examples-in-r",
    "title": "Statistical Basics",
    "section": "Examples in R",
    "text": "Examples in R\n\nsamples &lt;- rnorm(10, mean = 0, sd = 1)\n\ndensityfn &lt;- dnorm(1, mean = 0, sd = 1)\ncdf &lt;- pnorm(1, mean = 0, sd = 1)\nquant &lt;- qnorm(.05, mean = 0, sd = 1)\ncat(\"samples: \", samples, \"\\n\")\n\nsamples:  0.1212694 -1.302911 -0.6593411 -0.3786379 0.1728601 -0.6693959 0.737937 -1.109475 -0.1445887 0.5589256 \n\ncat(\"Density=\", densityfn, \" CDF value=\", cdf, \" Quantile=\", quant)\n\nDensity= 0.2419707  CDF value= 0.8413447  Quantile= -1.644854"
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#distributions-in-python",
    "href": "chapters/04-StatBasics/stat-basics.html#distributions-in-python",
    "title": "Statistical Basics",
    "section": "Distributions in Python",
    "text": "Distributions in Python\nIn python the distributions are available in the scipy.stats library. Assuming import scipy.stats as sps:\n\nsps.norm.rvs draws from the distribution\nsps.norm.pdf is the density\nsps.norm.cdf is the cumulative distribution\nsps.norm.ppf are the quantiles"
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#examples-in-python",
    "href": "chapters/04-StatBasics/stat-basics.html#examples-in-python",
    "title": "Statistical Basics",
    "section": "Examples in Python",
    "text": "Examples in Python\n\nimport scipy.stats as sps\n\nsamples = sps.norm.rvs(0, 1, size=10)\n\ndensityfn = sps.norm.pdf(1, 0, 1)\ncdf = sps.norm.cdf(1, 0, 1)\nquant = sps.norm.ppf(0.05, 0, 1)\nprint(\n    (\"samples = [ \" + \"{:.3f} \" * len(samples)).format(*samples) + \"]\",\n    \"Density={:.3f} CDF value={:.3f} Quantile={:.3f}\".format(densityfn, cdf, quant),\n)\n\nsamples = [ 0.321 -1.163 -0.211 -0.636 1.973 0.334 0.477 -0.192 -0.328 0.558 ] Density=0.242 CDF value=0.841 Quantile=-1.645"
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#order-statistics",
    "href": "chapters/04-StatBasics/stat-basics.html#order-statistics",
    "title": "Statistical Basics",
    "section": "Order Statistics",
    "text": "Order Statistics\nThe sample median and the sample quantiles (such as the 25th percentile or 75th percentile) are examples of order statistics.\nThe smallest element, the second smallest element, and so on are other examples of order statistics."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#order-statistics-example",
    "href": "chapters/04-StatBasics/stat-basics.html#order-statistics-example",
    "title": "Statistical Basics",
    "section": "Order Statistics example",
    "text": "Order Statistics example\nWe take 100 samples from a normal distribution and compute the median, minimum, and maximum. Then we do that 10000 times and produce a histogram."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#order-statistics-histogram",
    "href": "chapters/04-StatBasics/stat-basics.html#order-statistics-histogram",
    "title": "Statistical Basics",
    "section": "Order Statistics Histogram",
    "text": "Order Statistics Histogram"
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#the-multinomial-distribution",
    "href": "chapters/04-StatBasics/stat-basics.html#the-multinomial-distribution",
    "title": "Statistical Basics",
    "section": "The multinomial distribution",
    "text": "The multinomial distribution\nThe multinomial distribution arises when you have \\(n\\) outcomes for your experiment, say \\(x_1,\\ldots, x_n\\); and the probability of getting \\(x_i\\) is \\(p_i\\). Here we have to have \\[\n\\sum p_{i}=1.\n\\]\nThis generalizes the bernoulli distribution."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#mean",
    "href": "chapters/04-StatBasics/stat-basics.html#mean",
    "title": "Statistical Basics",
    "section": "Mean",
    "text": "Mean\nThe mean of a random variable is perhaps the most important statistic associated with a probability space.\nThe mean is the “average value” of the random variable.\nThe mean of \\(x\\) is denoted \\(\\overline{x}\\) .\nExpectation or expected value is another name for the mean, and so the mean is also denoted \\(E(x)\\)."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#mean-discrete-case",
    "href": "chapters/04-StatBasics/stat-basics.html#mean-discrete-case",
    "title": "Statistical Basics",
    "section": "Mean – discrete case",
    "text": "Mean – discrete case\nIn the discrete case:\n\\[\n\\overline{x}=\\sum_{a\\in X} x(a)p(a)\n\\]\nIn other words, the mean of \\(\\overline{x}\\) is the sum of \\(x\\) at each event, weighted by the probability of that event."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#mean-of-a-bernoulli-random-variable",
    "href": "chapters/04-StatBasics/stat-basics.html#mean-of-a-bernoulli-random-variable",
    "title": "Statistical Basics",
    "section": "Mean of a bernoulli random variable",
    "text": "Mean of a bernoulli random variable\nIf \\(x\\) is bernoulli, with \\(p(x=1)=p\\), then the mean of \\(x\\) is \\[\np(1)+(1-p)(0)=p.\n\\]"
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#mean-of-a-binomial-random-variable",
    "href": "chapters/04-StatBasics/stat-basics.html#mean-of-a-binomial-random-variable",
    "title": "Statistical Basics",
    "section": "Mean of a binomial random variable",
    "text": "Mean of a binomial random variable\nIf \\(x\\) is binomial, corresponding to the sum of \\(N\\) bernoulli random variables with probability \\(p\\), then \\[\n\\overline{x} = \\sum_{0\\le i\\le N} i\\binom{N}{i}p^{i}(1-p)^{N-i}=Np\n\\]"
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#mean-continuous-case",
    "href": "chapters/04-StatBasics/stat-basics.html#mean-continuous-case",
    "title": "Statistical Basics",
    "section": "Mean – continuous case",
    "text": "Mean – continuous case\nThe mean of a continuous random variable is given by an integral:\n\\[\n\\overline{x} = \\int_{X} xp(x) dx\n\\]\nwhere \\(p(x)\\) is the probability density. This is the limiting case of the formula in the discrete case."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#mean-of-standard-normal",
    "href": "chapters/04-StatBasics/stat-basics.html#mean-of-standard-normal",
    "title": "Statistical Basics",
    "section": "Mean of standard normal",
    "text": "Mean of standard normal\nThe mean of the standard normal is zero."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#variance-and-standard-deviation",
    "href": "chapters/04-StatBasics/stat-basics.html#variance-and-standard-deviation",
    "title": "Statistical Basics",
    "section": "Variance and standard deviation",
    "text": "Variance and standard deviation\nThe variance of a random variable measures how it is distributed around its mean value.\nThe variance is the average value of the difference between \\(x\\) and its mean.\n\\[\n\\sigma^2=E((x-\\overline{x})^2)\n\\]\nIn the case of a discrete random variable with outcomes values \\(x\\) having probability \\(p(x)\\), the variance is \\[\n\\sum_{x} (x-\\overline{x})^2p(x)\n\\]"
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#variance-alternative-formula",
    "href": "chapters/04-StatBasics/stat-basics.html#variance-alternative-formula",
    "title": "Statistical Basics",
    "section": "Variance alternative formula",
    "text": "Variance alternative formula\nThis is the same as\n\\[\n\\sigma^2 = \\overline{x^2}-(\\overline{x})^2\n\\]\nThe standard deviation is the square root of the variance."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#variance-of-bernoulli",
    "href": "chapters/04-StatBasics/stat-basics.html#variance-of-bernoulli",
    "title": "Statistical Basics",
    "section": "Variance of Bernoulli",
    "text": "Variance of Bernoulli\nIn the Bernoulli case, the variance is \\[\n(1-p)^2p+p^2(1-p)=p(1-p).\n\\]\nNotice that the maximum variance happens when \\(p=1/2\\)."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#variance-of-binomial",
    "href": "chapters/04-StatBasics/stat-basics.html#variance-of-binomial",
    "title": "Statistical Basics",
    "section": "Variance of Binomial",
    "text": "Variance of Binomial\nA binomial random variable with probability \\(p\\) and \\(n\\) trials is a sum of \\(n\\) bernoulli random variables with probability \\(p\\). Using the formula you get \\[\n\\sigma^2 = \\sum_{i=0}^{n}(i-np)^2\\binom{n}{i}p^{i}(1-p)^{n-i}\n\\]\nThis turns out to be \\[\n\\sigma^2 = np(1-p).\n\\]\nNote: there are easier ways to get this formula. If two random variables are independent, then the variance of their sum is the sum of their variances."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#sampling",
    "href": "chapters/04-StatBasics/stat-basics.html#sampling",
    "title": "Statistical Basics",
    "section": "Sampling",
    "text": "Sampling\nIn practice we study random variables through samples. A sample of a random variable is a choice of values distributed according to the associated probability. So for example a sample of a Bernoulli random variable is a coin flip where \\(P(H)=p\\)."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#sampling-1",
    "href": "chapters/04-StatBasics/stat-basics.html#sampling-1",
    "title": "Statistical Basics",
    "section": "Sampling",
    "text": "Sampling\nIf we draw \\(N\\) sample values \\(x_i\\) ofa random variable, then the mean and variance of those sampled values, computed by\n\\[\n\\overline{x} = \\frac{1}{N}\\sum x_{i}\n\\]\nand \\[\n\\overline{x} = \\frac{1}{N-1}\\sum (x_{i}-\\overline{x})^2\n\\]"
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#sample-mean-and-variance",
    "href": "chapters/04-StatBasics/stat-basics.html#sample-mean-and-variance",
    "title": "Statistical Basics",
    "section": "Sample Mean and Variance",
    "text": "Sample Mean and Variance\nThe formulae above are called the sample mean and variance; they are estimates of the mean and variance of the underlying random variable.\nThe law of large numbers says that, as \\(N\\to\\infty\\), these estimates converge to the true values.\nIn general these values are also random (they depend on the particular choices drawn from the distribution) and follow their own probabilility distribution."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#distribution-of-sample-mean-and-variance",
    "href": "chapters/04-StatBasics/stat-basics.html#distribution-of-sample-mean-and-variance",
    "title": "Statistical Basics",
    "section": "Distribution of sample mean and variance",
    "text": "Distribution of sample mean and variance\nSo for example, if you sample a Bernoulli random variable \\(10\\) times, the mean is \\[\n\\frac{k}{N}\n\\] where \\(k\\) is the number of heads.\nThis mean follows a binomial distribution."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#sampling-distribution",
    "href": "chapters/04-StatBasics/stat-basics.html#sampling-distribution",
    "title": "Statistical Basics",
    "section": "Sampling Distribution",
    "text": "Sampling Distribution\n\nBy looking at sample means (or other sample statistics) we can try to uncover information about the underlying probability distribution."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#hypothesis-testing",
    "href": "chapters/04-StatBasics/stat-basics.html#hypothesis-testing",
    "title": "Statistical Basics",
    "section": "Hypothesis Testing",
    "text": "Hypothesis Testing\nA statistical hypothesis is a claim about a particular population. A hypothesis test is a method to determine which of two contradictory hypotheses is supported by the data.\nUnderlying idea: a lot of surprising things happen by chance. If you do an experiment and observe an effect, that might be the result of pure chance. Can you quantify that?"
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#an-example",
    "href": "chapters/04-StatBasics/stat-basics.html#an-example",
    "title": "Statistical Basics",
    "section": "An example",
    "text": "An example\nSuppose we have a coin and we’d like to do some testing to determine if we have reason to suspect that the coin is biased. Put another way, you’d like to know if this coin behaves differently from a reference, standard coin that is fair.\nNote this is more common than you might think. It might arise in the following circumstance in “real life.” You have two web pages, your current one and a proposed new one. You’d like to know if seeing the proposed one increases the chance of a viewer clicking through to something. This is called A/B testing and it amounts to comparing the probability of click-through in the reference case to the proposed case."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#null-and-alternative-hypotheses",
    "href": "chapters/04-StatBasics/stat-basics.html#null-and-alternative-hypotheses",
    "title": "Statistical Basics",
    "section": "Null (and alternative) hypotheses",
    "text": "Null (and alternative) hypotheses\nThe Null hypothesis is the hypotheses that our coin is fair, or that our two web pages yield the same results, or more generally that the observations we make are accounted for only by chance and not by some underlying effect. So our null hypothesis for our coin is “P=.5”.\nAn alternative hypothesis is a statement that contradicts the null hypothesis. For example, “P&gt;.5” or “P&lt;.5” or “P is different from .5.”"
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#test-statistic",
    "href": "chapters/04-StatBasics/stat-basics.html#test-statistic",
    "title": "Statistical Basics",
    "section": "Test statistic",
    "text": "Test statistic\nA test statistic is a measurement of the data used to draw conclusions about the sample."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#back-to-our-example",
    "href": "chapters/04-StatBasics/stat-basics.html#back-to-our-example",
    "title": "Statistical Basics",
    "section": "Back to our example",
    "text": "Back to our example\nFor our test statistic, we are going to use the fraction of times we get a head in N flips.\nIn the A/B testing situation, our test statistic would be the fraction of times a person “clicked through” when given the proposed web site.\nIntuitively, if the fraction of heads differs significantly from the expected fraction of heads (.5) then we take that as strong evidence for the unfairness of our coin (or the increased value of our proposed web page).\nHow can we quantify this?"
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#rejection-region-and-significance",
    "href": "chapters/04-StatBasics/stat-basics.html#rejection-region-and-significance",
    "title": "Statistical Basics",
    "section": "Rejection region and “significance”",
    "text": "Rejection region and “significance”\nTo make things concrete, suppose the coin is fair (in other words, the null hypothesis is true) we flip the coin \\(10\\) times. If the coin is far, we expect to get roughly 5 heads.\nThere’s a long tradition of saying something unlikely is “significant” if the chance of it occurring, assuming the null hypothesis, is less than .05 or one in twenty.\nThe chance of getting \\(0\\), \\(1\\), \\(9\\), or \\(10\\) heads is \\(.02\\). If we allow \\(2\\) or \\(8\\) heads in addition, the chance is about \\(11%\\), so if we set our significance level at \\(.05\\) we reject the null hypothesis if our experiment yields \\(0\\), \\(1\\), \\(9\\), or \\(10\\) heads.\nThis is the “rejection region.”"
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#rejection-region-plot-code",
    "href": "chapters/04-StatBasics/stat-basics.html#rejection-region-plot-code",
    "title": "Statistical Basics",
    "section": "Rejection Region (plot code)",
    "text": "Rejection Region (plot code)\n\nlibrary(ggplot2)\n# two-sided\nrejection2 &lt;- function(n,d=10) {\n    results &lt;- data.frame(\n            x=seq(0,n),\n            y=dbinom(seq(0,n),n,.5),\n            keep=sapply(seq(0,n),\n                function(x) \n                    (x&lt;qbinom(.025,n,.5)) | (x&gt;qbinom(.975,n,.5))))\n    ggplot(\n        data=results,aes(x=x,y=y,fill=keep))+ \n        geom_bar(stat=\"identity\")+\n        scale_x_continuous(breaks=seq(0,n,d))+\n        ggtitle(\"Two sided rejection region at alpha=.05\")\n    \n}"
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#more-code",
    "href": "chapters/04-StatBasics/stat-basics.html#more-code",
    "title": "Statistical Basics",
    "section": "More code",
    "text": "More code\n\nrejection1 &lt;-function(n,d=10) {\n    results &lt;- data.frame(\n        x=seq(0,n),\n        y=dbinom(seq(0,n),n,.5),\n        keep=sapply(seq(0,n),function(x) (x&gt;qbinom(.95,n,.5))))\n    ggplot(data=results,aes(x=x,y=y,fill=keep))+\n    geom_bar(stat=\"identity\")+\n    scale_x_continuous(breaks=seq(0,n,d))+\n    ggtitle(\"One sided rejection region at alpha=.05\")\n}"
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#rejection-region-plotted",
    "href": "chapters/04-StatBasics/stat-basics.html#rejection-region-plotted",
    "title": "Statistical Basics",
    "section": "Rejection Region (plotted)",
    "text": "Rejection Region (plotted)"
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#one-sided-test",
    "href": "chapters/04-StatBasics/stat-basics.html#one-sided-test",
    "title": "Statistical Basics",
    "section": "One-sided test",
    "text": "One-sided test\nSuppose you want evidence that your coin is more likely to get heads.\n-Your null hypothesis is that your coin has \\(p=.5\\). Your alternative hypothesis is \\(p&gt;.5\\).\n\nThe probability of getting 0,1,2 heads is \\(.054\\), which is a bit larger than \\(.05\\). So the one-sided test would reach significance only at 0 or 1 heads same as the two-sided test.\nBut suppose we did 50 flips? Then the one- and two-sided limits are slightly different on the right."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#one-sided-rejection-region",
    "href": "chapters/04-StatBasics/stat-basics.html#one-sided-rejection-region",
    "title": "Statistical Basics",
    "section": "One-sided rejection region",
    "text": "One-sided rejection region"
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#one-sided-rejection-region-1",
    "href": "chapters/04-StatBasics/stat-basics.html#one-sided-rejection-region-1",
    "title": "Statistical Basics",
    "section": "One-sided rejection region",
    "text": "One-sided rejection region"
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#normal-approximation",
    "href": "chapters/04-StatBasics/stat-basics.html#normal-approximation",
    "title": "Statistical Basics",
    "section": "Normal approximation",
    "text": "Normal approximation\nFor large \\(n\\), the binomial distribution distribution with probability \\(p\\) becomes a version of the normal distribution with mean \\(Np\\) and standard deviation \\(\\sqrt{Np(1-p)}\\)."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#normal-and-binomial-distribution",
    "href": "chapters/04-StatBasics/stat-basics.html#normal-and-binomial-distribution",
    "title": "Statistical Basics",
    "section": "Normal and binomial distribution",
    "text": "Normal and binomial distribution\n\nSo one can use the normal distribution to determine the rejection region if \\(n\\) is large."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#errors",
    "href": "chapters/04-StatBasics/stat-basics.html#errors",
    "title": "Statistical Basics",
    "section": "Errors",
    "text": "Errors\nTwo things can go wrong:\n\nType I error: You reject the null hypothesis, but the null hypothesis is true. The probability of a Type I error is something you choose when you set the significance level. This is usually called \\(\\alpha\\).\nType II error: You accept the null hypothesis when it is false. In this case, you’ve missed an actual effect. This probability of this is called \\(\\beta\\)."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#tradeoff-between-error-types",
    "href": "chapters/04-StatBasics/stat-basics.html#tradeoff-between-error-types",
    "title": "Statistical Basics",
    "section": "Tradeoff between error types",
    "text": "Tradeoff between error types\nOther things equal, if you make \\(\\alpha\\) smaller (thus reducing the chance of a Type I error) you make \\(\\beta\\) bigger (increasing the chance of a type II error)."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#statistical-power",
    "href": "chapters/04-StatBasics/stat-basics.html#statistical-power",
    "title": "Statistical Basics",
    "section": "Statistical Power",
    "text": "Statistical Power\nInformally, statistical power measures the ability of an experiment to detect a real effect. If a study has high power, then you are very unlikely to make a Type II error.\nFor example, return to the coin flipping problem (or the A/B testing problem)."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#power",
    "href": "chapters/04-StatBasics/stat-basics.html#power",
    "title": "Statistical Basics",
    "section": "Power",
    "text": "Power\nSuppose we flip our coin \\(20\\) times and our null hypothesis is that \\(p=.5\\) If our significance level is \\(.05\\), we will reject the null hypothesis and conclude that the coin is not fair (and biased towards heads) provided we get \\(15\\) or more heads."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#power-computations",
    "href": "chapters/04-StatBasics/stat-basics.html#power-computations",
    "title": "Statistical Basics",
    "section": "Power Computations",
    "text": "Power Computations\n\n# look at the probability density for this case\nprobs &lt;- dbinom(seq(0, 20), 20, .5)\n# The qbinom function tells us the threshold\nrejection &lt;- qbinom(.95, 20, .5)\n# We check this by comparing the probability of $15-20$ vs $14-20$ heads:\nsum(probs[16:21]) # remember probs[i] is the chance of i-1 heads\n\n[1] 0.02069473\n\nsum(probs[15:21])\n\n[1] 0.05765915\n\n# The chance of $15-20$ heads is greater than $.05$."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#power-1",
    "href": "chapters/04-StatBasics/stat-basics.html#power-1",
    "title": "Statistical Basics",
    "section": "Power",
    "text": "Power\nNow suppose the coin is not fair and \\(p=.6\\). What is the chance that we accept the null hypothesis and conclude, falsely, that the coin is fair? It is the chance that we get \\(14\\) or fewer heads when \\(p=.6\\).\n\nprobs6 &lt;- dbinom(seq(0, 20), 20, .6)\nsum(probs6[1:15])\n\n[1] 0.874401\n\n\nThis is \\(87\\) percent! In other words, our experiment is very unlikely to detect the unfairness of the coin if the unfairness is only the difference between \\(p=.6\\) and \\(p=.5\\)"
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#power-2",
    "href": "chapters/04-StatBasics/stat-basics.html#power-2",
    "title": "Statistical Basics",
    "section": "Power",
    "text": "Power\nBut if the coin is very unfair, with, say \\(p=.8\\), then we find:\n\nprobs8 &lt;- dbinom(seq(0, 20), 20, .8)\nsum(probs8[1:15])\n\n[1] 0.1957922\n\n\nWe have only a 20% chance of a Type II error so there’s an 80% chance we’ll detect the difference.\nNow suppose we use \\(100\\) flips.\n\nrejection &lt;- qbinom(.95, 100, .5)\nprobs6 &lt;- dbinom(seq(0, 100), 100, .6)\nsum(probs6[1:rejection])\n\n[1] 0.3032601\n\n\nNow we have a 70% chance of detecting the difference unfairness of \\(p=.6\\)."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#more-on-ab-example",
    "href": "chapters/04-StatBasics/stat-basics.html#more-on-ab-example",
    "title": "Statistical Basics",
    "section": "More on AB example",
    "text": "More on AB example\nNull hypothesis: the two ads are the same, and of the 9400 who see an ad, 2108 click through. This is a probabiility of 22.4%.\nThe .95 quantile for the binomial distribution with n=4600 and p=.224 is 1077. Thus the 1133 click through rate is significantly higher. Similarly the 975 out of 4800 is significantly lower.\nSo ad B is better than ad A at the .05 significance level. In fact the odds of getting a number as high as 1133 is more like 1 in 10^4 so the evidence for ad b is overwhelming."
  },
  {
    "objectID": "chapters/04-StatBasics/stat-basics.html#simulation",
    "href": "chapters/04-StatBasics/stat-basics.html#simulation",
    "title": "Statistical Basics",
    "section": "Simulation",
    "text": "Simulation\nBy simulation:\n\nsimulated &lt;- rbinom(10000, 4600, .224)\nsum(simulated &gt;= 1133)\n\n[1] 0"
  },
  {
    "objectID": "chapters/05-WorkingWithData/pandas_penguins.html",
    "href": "chapters/05-WorkingWithData/pandas_penguins.html",
    "title": "Working with data in python/pandas",
    "section": "",
    "text": "import sys\nimport pandas as pd\nimport numpy as np\nimport re\n\nprint(f\"pandas version {pd.__version__}\")\nprint(f\"numpy version {np.__version__}\")\nprint(\"\\n\".join(f\"Python {sys.version}\".split(\"|\")))\n\npandas version 2.0.0\nnumpy version 1.24.2\nPython 3.11.5 \n packaged by conda-forge \n (main, Aug 27 2023, 03:33:12) [Clang 15.0.7 ]"
  },
  {
    "objectID": "chapters/05-WorkingWithData/pandas_penguins.html#loading-the-key-libraries",
    "href": "chapters/05-WorkingWithData/pandas_penguins.html#loading-the-key-libraries",
    "title": "Working with data in python/pandas",
    "section": "",
    "text": "import sys\nimport pandas as pd\nimport numpy as np\nimport re\n\nprint(f\"pandas version {pd.__version__}\")\nprint(f\"numpy version {np.__version__}\")\nprint(\"\\n\".join(f\"Python {sys.version}\".split(\"|\")))\n\npandas version 2.0.0\nnumpy version 1.24.2\nPython 3.11.5 \n packaged by conda-forge \n (main, Aug 27 2023, 03:33:12) [Clang 15.0.7 ]"
  },
  {
    "objectID": "chapters/05-WorkingWithData/pandas_penguins.html#a-comment-on-file-formats",
    "href": "chapters/05-WorkingWithData/pandas_penguins.html#a-comment-on-file-formats",
    "title": "Working with data in python/pandas",
    "section": "A comment on file formats",
    "text": "A comment on file formats\nThe most common simple format for tabular data is comma separated or tab separated (csv or tsv).\nNewer formats such as arrow and parquet are more efficient in storage and faster to load.\nPandas 2.0 can handle these newer formats."
  },
  {
    "objectID": "chapters/05-WorkingWithData/pandas_penguins.html#reading-a-dataframe",
    "href": "chapters/05-WorkingWithData/pandas_penguins.html#reading-a-dataframe",
    "title": "Working with data in python/pandas",
    "section": "Reading a dataframe",
    "text": "Reading a dataframe\n\n# read from a csv file\npenguins = pd.read_csv(\"data/penguins-raw.csv\")\n# read from a url\n# url = \"https://raw.githubusercontent.com/mcnakhaee/palmerpenguins/master/palmerpenguins/data/penguins-raw.csv\"\n# penguins = pd.read_csv(url)\n# read from an excel file\n# penguins = pd.read_excel('file.xlsx')\nrows, cols = penguins.shape\nprint(f\"Rows: {rows}, Columns: {cols}\")\nprint(f\"Columns:\", \"\\n\".join(penguins.columns))\n\nRows: 344, Columns: 17\nColumns: studyName\nSample Number\nSpecies\nRegion\nIsland\nStage\nIndividual ID\nClutch Completion\nDate Egg\nCulmen Length (mm)\nCulmen Depth (mm)\nFlipper Length (mm)\nBody Mass (g)\nSex\nDelta 15 N (o/oo)\nDelta 13 C (o/oo)\nComments"
  },
  {
    "objectID": "chapters/05-WorkingWithData/pandas_penguins.html#series",
    "href": "chapters/05-WorkingWithData/pandas_penguins.html#series",
    "title": "Working with data in python/pandas",
    "section": "Series",
    "text": "Series\nEach column of a dataframe is a series accessed by name.\n\npenguins[\"Culmen Length (mm)\"]\n\n0      39.1\n1      39.5\n2      40.3\n3       NaN\n4      36.7\n       ... \n339    55.8\n340    43.5\n341    49.6\n342    50.8\n343    50.2\nName: Culmen Length (mm), Length: 344, dtype: float64\n\n\nNote the last row: - Name - Length - dtype\nTypes are “inferred” by the read_csv function."
  },
  {
    "objectID": "chapters/05-WorkingWithData/pandas_penguins.html#another-example",
    "href": "chapters/05-WorkingWithData/pandas_penguins.html#another-example",
    "title": "Working with data in python/pandas",
    "section": "Another example",
    "text": "Another example\n\npenguins['Date Egg']\n\n0      2007-11-11\n1      2007-11-11\n2      2007-11-16\n3      2007-11-16\n4      2007-11-16\n          ...    \n339    2009-11-19\n340    2009-11-21\n341    2009-11-21\n342    2009-11-21\n343    2009-11-21\nName: Date Egg, Length: 344, dtype: object\n\n\nHere the type is “object” which is the generic python object. But these are clearly supposed to be dates. We’ll fix that later."
  },
  {
    "objectID": "chapters/05-WorkingWithData/pandas_penguins.html#alternative-syntax",
    "href": "chapters/05-WorkingWithData/pandas_penguins.html#alternative-syntax",
    "title": "Working with data in python/pandas",
    "section": "Alternative syntax",
    "text": "Alternative syntax\n\n# if the column name is simple, you can use a simpler syntax.\npenguins.Sex\n\n0        MALE\n1      FEMALE\n2      FEMALE\n3         NaN\n4      FEMALE\n        ...  \n339      MALE\n340    FEMALE\n341      MALE\n342      MALE\n343    FEMALE\nName: Sex, Length: 344, dtype: object"
  },
  {
    "objectID": "chapters/05-WorkingWithData/pandas_penguins.html#value-counts",
    "href": "chapters/05-WorkingWithData/pandas_penguins.html#value-counts",
    "title": "Working with data in python/pandas",
    "section": "Value Counts",
    "text": "Value Counts\nThe value_counts method returns a summary series.\n\npenguins['Island'].value_counts()\n\nIsland\nBiscoe       168\nDream        124\nTorgersen     52\nName: count, dtype: int64\n\n\n\npenguins['Species'].value_counts()\n\nSpecies\nAdelie Penguin (Pygoscelis adeliae)          152\nGentoo penguin (Pygoscelis papua)            124\nChinstrap penguin (Pygoscelis antarctica)     68\nName: count, dtype: int64"
  },
  {
    "objectID": "chapters/05-WorkingWithData/pandas_penguins.html#selecting-a-subset-of-columns",
    "href": "chapters/05-WorkingWithData/pandas_penguins.html#selecting-a-subset-of-columns",
    "title": "Working with data in python/pandas",
    "section": "Selecting a subset of columns",
    "text": "Selecting a subset of columns\n\nsimpler = penguins[['Species', 'Body Mass (g)', 'Flipper Length (mm)']]\nsimpler.head()\n\n\n\n\n\n\n\n\nSpecies\nBody Mass (g)\nFlipper Length (mm)\n\n\n\n\n0\nAdelie Penguin (Pygoscelis adeliae)\n3750.0\n181.0\n\n\n1\nAdelie Penguin (Pygoscelis adeliae)\n3800.0\n186.0\n\n\n2\nAdelie Penguin (Pygoscelis adeliae)\n3250.0\n195.0\n\n\n3\nAdelie Penguin (Pygoscelis adeliae)\nNaN\nNaN\n\n\n4\nAdelie Penguin (Pygoscelis adeliae)\n3450.0\n193.0"
  },
  {
    "objectID": "chapters/05-WorkingWithData/pandas_penguins.html#index",
    "href": "chapters/05-WorkingWithData/pandas_penguins.html#index",
    "title": "Working with data in python/pandas",
    "section": "Index",
    "text": "Index\nA dataframe has an index, which can be just the numbers from 0 to N as in this case.\n\npenguins.index\n\nRangeIndex(start=0, stop=344, step=1)"
  },
  {
    "objectID": "chapters/05-WorkingWithData/pandas_penguins.html#columns-and-rows",
    "href": "chapters/05-WorkingWithData/pandas_penguins.html#columns-and-rows",
    "title": "Working with data in python/pandas",
    "section": "Columns and Rows",
    "text": "Columns and Rows\nloc allows you to access individual elements.\n\n# The 23rd row\npenguins.loc[23,:]\n\nstudyName                                          PAL0708\nSample Number                                           24\nSpecies                Adelie Penguin (Pygoscelis adeliae)\nRegion                                              Anvers\nIsland                                              Biscoe\nStage                                   Adult, 1 Egg Stage\nIndividual ID                                        N12A2\nClutch Completion                                      Yes\nDate Egg                                        2007-11-12\nCulmen Length (mm)                                    38.2\nCulmen Depth (mm)                                     18.1\nFlipper Length (mm)                                  185.0\nBody Mass (g)                                       3950.0\nSex                                                   MALE\nDelta 15 N (o/oo)                                  8.43423\nDelta 13 C (o/oo)                                -25.22664\nComments                                               NaN\nName: 23, dtype: object\n\n\n\npenguins.loc[23,'Culmen Length (mm)']\n\n38.2\n\n\n\npenguins.loc[23:28,['Sex','Date Egg']]\n\n\n\n\n\n\n\n\nSex\nDate Egg\n\n\n\n\n23\nMALE\n2007-11-12\n\n\n24\nMALE\n2007-11-10\n\n\n25\nFEMALE\n2007-11-10\n\n\n26\nMALE\n2007-11-12\n\n\n27\nFEMALE\n2007-11-12\n\n\n28\nFEMALE\n2007-11-10"
  },
  {
    "objectID": "chapters/05-WorkingWithData/pandas_penguins.html#filtering",
    "href": "chapters/05-WorkingWithData/pandas_penguins.html#filtering",
    "title": "Working with data in python/pandas",
    "section": "Filtering",
    "text": "Filtering\nFiltering is done by using a boolean series as an index.\n\npenguins['Sex']=='FEMALE'\n\n0      False\n1       True\n2       True\n3      False\n4       True\n       ...  \n339    False\n340     True\n341    False\n342    False\n343     True\nName: Sex, Length: 344, dtype: bool\n\n\n\nfemales = penguins[penguins['Sex']=='FEMALE']\nfemales.head()\n\n\n\n\n\n\n\n\nstudyName\nSample Number\nSpecies\nRegion\nIsland\nStage\nIndividual ID\nClutch Completion\nDate Egg\nCulmen Length (mm)\nCulmen Depth (mm)\nFlipper Length (mm)\nBody Mass (g)\nSex\nDelta 15 N (o/oo)\nDelta 13 C (o/oo)\nComments\n\n\n\n\n1\nPAL0708\n2\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN1A2\nYes\n2007-11-11\n39.5\n17.4\n186.0\n3800.0\nFEMALE\n8.94956\n-24.69454\nNaN\n\n\n2\nPAL0708\n3\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN2A1\nYes\n2007-11-16\n40.3\n18.0\n195.0\n3250.0\nFEMALE\n8.36821\n-25.33302\nNaN\n\n\n4\nPAL0708\n5\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN3A1\nYes\n2007-11-16\n36.7\n19.3\n193.0\n3450.0\nFEMALE\n8.76651\n-25.32426\nNaN\n\n\n6\nPAL0708\n7\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN4A1\nNo\n2007-11-15\n38.9\n17.8\n181.0\n3625.0\nFEMALE\n9.18718\n-25.21799\nNest never observed with full clutch.\n\n\n12\nPAL0708\n13\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN7A1\nYes\n2007-11-15\n41.1\n17.6\n182.0\n3200.0\nFEMALE\nNaN\nNaN\nNot enough blood for isotopes.\n\n\n\n\n\n\n\nAn alternative syntax is to use query. The quoting rules here can be tricky. The query is a string, and column names are set off by backticks. Using two different types of quotes allows the query to include a string.\n\nfemales = penguins.query(\"`Sex`=='FEMALE'\")\nfemales.head()\n\n\n\n\n\n\n\n\nstudyName\nSample Number\nSpecies\nRegion\nIsland\nStage\nIndividual ID\nClutch Completion\nDate Egg\nCulmen Length (mm)\nCulmen Depth (mm)\nFlipper Length (mm)\nBody Mass (g)\nSex\nDelta 15 N (o/oo)\nDelta 13 C (o/oo)\nComments\n\n\n\n\n1\nPAL0708\n2\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN1A2\nYes\n2007-11-11\n39.5\n17.4\n186.0\n3800.0\nFEMALE\n8.94956\n-24.69454\nNaN\n\n\n2\nPAL0708\n3\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN2A1\nYes\n2007-11-16\n40.3\n18.0\n195.0\n3250.0\nFEMALE\n8.36821\n-25.33302\nNaN\n\n\n4\nPAL0708\n5\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN3A1\nYes\n2007-11-16\n36.7\n19.3\n193.0\n3450.0\nFEMALE\n8.76651\n-25.32426\nNaN\n\n\n6\nPAL0708\n7\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN4A1\nNo\n2007-11-15\n38.9\n17.8\n181.0\n3625.0\nFEMALE\n9.18718\n-25.21799\nNest never observed with full clutch.\n\n\n12\nPAL0708\n13\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN7A1\nYes\n2007-11-15\n41.1\n17.6\n182.0\n3200.0\nFEMALE\nNaN\nNaN\nNot enough blood for isotopes."
  },
  {
    "objectID": "chapters/05-WorkingWithData/pandas_penguins.html#fancier-filtering",
    "href": "chapters/05-WorkingWithData/pandas_penguins.html#fancier-filtering",
    "title": "Working with data in python/pandas",
    "section": "Fancier filtering",
    "text": "Fancier filtering\n\npenguins[penguins[\"Flipper Length (mm)\"]&gt;penguins[\"Body Mass (g)\"]/20]\n\n\n\n\n\n\n\n\nstudyName\nSample Number\nSpecies\nRegion\nIsland\nStage\nIndividual ID\nClutch Completion\nDate Egg\nCulmen Length (mm)\nCulmen Depth (mm)\nFlipper Length (mm)\nBody Mass (g)\nSex\nDelta 15 N (o/oo)\nDelta 13 C (o/oo)\nComments\n\n\n\n\n2\nPAL0708\n3\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN2A1\nYes\n2007-11-16\n40.3\n18.0\n195.0\n3250.0\nFEMALE\n8.36821\n-25.33302\nNaN\n\n\n4\nPAL0708\n5\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN3A1\nYes\n2007-11-16\n36.7\n19.3\n193.0\n3450.0\nFEMALE\n8.76651\n-25.32426\nNaN\n\n\n5\nPAL0708\n6\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN3A2\nYes\n2007-11-16\n39.3\n20.6\n190.0\n3650.0\nMALE\n8.66496\n-25.29805\nNaN\n\n\n8\nPAL0708\n9\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN5A1\nYes\n2007-11-09\n34.1\n18.1\n193.0\n3475.0\nNaN\nNaN\nNaN\nNo blood sample obtained.\n\n\n10\nPAL0708\n11\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN6A1\nYes\n2007-11-09\n37.8\n17.1\n186.0\n3300.0\nNaN\n8.63243\n-25.21315\nNo blood sample obtained for sexing.\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n339\nPAL0910\n64\nChinstrap penguin (Pygoscelis antarctica)\nAnvers\nDream\nAdult, 1 Egg Stage\nN98A2\nYes\n2009-11-19\n55.8\n19.8\n207.0\n4000.0\nMALE\n9.70465\n-24.53494\nNaN\n\n\n340\nPAL0910\n65\nChinstrap penguin (Pygoscelis antarctica)\nAnvers\nDream\nAdult, 1 Egg Stage\nN99A1\nNo\n2009-11-21\n43.5\n18.1\n202.0\n3400.0\nFEMALE\n9.37608\n-24.40753\nNest never observed with full clutch.\n\n\n341\nPAL0910\n66\nChinstrap penguin (Pygoscelis antarctica)\nAnvers\nDream\nAdult, 1 Egg Stage\nN99A2\nNo\n2009-11-21\n49.6\n18.2\n193.0\n3775.0\nMALE\n9.46180\n-24.70615\nNest never observed with full clutch.\n\n\n342\nPAL0910\n67\nChinstrap penguin (Pygoscelis antarctica)\nAnvers\nDream\nAdult, 1 Egg Stage\nN100A1\nYes\n2009-11-21\n50.8\n19.0\n210.0\n4100.0\nMALE\n9.98044\n-24.68741\nNaN\n\n\n343\nPAL0910\n68\nChinstrap penguin (Pygoscelis antarctica)\nAnvers\nDream\nAdult, 1 Egg Stage\nN100A2\nYes\n2009-11-21\n50.2\n18.7\n198.0\n3775.0\nFEMALE\n9.39305\n-24.25255\nNaN\n\n\n\n\n147 rows × 17 columns"
  },
  {
    "objectID": "chapters/05-WorkingWithData/pandas_penguins.html#missing-values",
    "href": "chapters/05-WorkingWithData/pandas_penguins.html#missing-values",
    "title": "Working with data in python/pandas",
    "section": "Missing values",
    "text": "Missing values\nDealing with missing values is a central problem in data science. One way to identify how many misssing values are out there is as follows:\n\n## Uses the fact that logical True counts as one, False as zero\n## sum() method sums by columns\npenguins.isna().sum()\n\nstudyName                0\nSample Number            0\nSpecies                  0\nRegion                   0\nIsland                   0\nStage                    0\nIndividual ID            0\nClutch Completion        0\nDate Egg                 0\nCulmen Length (mm)       2\nCulmen Depth (mm)        2\nFlipper Length (mm)      2\nBody Mass (g)            2\nSex                     11\nDelta 15 N (o/oo)       14\nDelta 13 C (o/oo)       13\nComments               290\ndtype: int64\n\n\nNearly all of the comments are empty. What are they?\n\ncomments = penguins['Comments'].value_counts()\ncomments\n\nComments\nNest never observed with full clutch.                                   34\nNot enough blood for isotopes.                                           7\nSexing primers did not amplify.                                          4\nNo blood sample obtained.                                                2\nNo blood sample obtained for sexing.                                     2\nAdult not sampled.                                                       1\nNest never observed with full clutch. Not enough blood for isotopes.     1\nSexing primers did not amplify. Not enough blood for isotopes.           1\nAdult not sampled. Nest never observed with full clutch.                 1\nNo delta15N data received from lab.                                      1\nName: count, dtype: int64\n\n\nLet’s save the comments separately and look at the rest.\n\n# drop normally drops rows, but with axis=1 it drops columns\npenguins = penguins.drop('Comments',axis=1)\n\nVarious options: - drop rows with missing values - impute the missing values somehow"
  },
  {
    "objectID": "chapters/05-WorkingWithData/pandas_penguins.html#drop-rows-with-missing-values",
    "href": "chapters/05-WorkingWithData/pandas_penguins.html#drop-rows-with-missing-values",
    "title": "Working with data in python/pandas",
    "section": "Drop rows with missing values",
    "text": "Drop rows with missing values\n\n# This makes a boolean where a row is True provided at least one of its entries are NA\nna_rows = (penguins.isna().any(axis=1))\nprint(f\"{na_rows.sum()} rows have NA somewhere outside of comments\")\n\n20 rows have NA somewhere outside of comments\n\n\n\n# here we keep rows only if no NA's.  Can also use notna().\npenguins_nona = penguins.loc[~na_rows,:]"
  },
  {
    "objectID": "chapters/05-WorkingWithData/pandas_penguins.html#imputation",
    "href": "chapters/05-WorkingWithData/pandas_penguins.html#imputation",
    "title": "Working with data in python/pandas",
    "section": "Imputation",
    "text": "Imputation\nWe saw above that culmen length has 2 missing values. We can use fillna to replace the missing values with something (like the mean or median or zero).\n\n# using equality w/o copy creates another reference.\npenguins_imputed = penguins.copy()\nculmen_mean = penguins_imputed['Culmen Length (mm)'].mean() # how does this handle NA values?\nprint(f\"Culmen length mean is {culmen_mean}\")\npenguins_imputed['Culmen Length (mm)'] = penguins_imputed['Culmen Length (mm)'].fillna(culmen_mean)\n\nCulmen length mean is 43.9219298245614\n\n\nThere are many other imputation methods. For example, if the data is ordered, you can fill missing data with linear interpolation. (See the interpolate method)."
  },
  {
    "objectID": "chapters/05-WorkingWithData/pandas_penguins.html#data-types",
    "href": "chapters/05-WorkingWithData/pandas_penguins.html#data-types",
    "title": "Working with data in python/pandas",
    "section": "Data types",
    "text": "Data types\nAs we saw above, the types of the columns are inferred when the data is read. But it’s not always correct. For example, the “Date Egg” column is supposed to be a date but it’s shown as a generic python object.\nUsing the correct type can greatly improve performance as generic Python arguments are inefficient.\nIn pandas 1.0 strings are always treated as objects but in pandas 2.0 there is a StringDtype.\nThe most common types are: - object - float64 - datetime (datetime64[ns]) - int64 - bool\nOne may also find categorical types.\n\npenguins.dtypes\n\nstudyName               object\nSample Number            int64\nSpecies                 object\nRegion                  object\nIsland                  object\nStage                   object\nIndividual ID           object\nClutch Completion       object\nDate Egg                object\nCulmen Length (mm)     float64\nCulmen Depth (mm)      float64\nFlipper Length (mm)    float64\nBody Mass (g)          float64\nSex                     object\nDelta 15 N (o/oo)      float64\nDelta 13 C (o/oo)      float64\ndtype: object"
  },
  {
    "objectID": "chapters/05-WorkingWithData/pandas_penguins.html#setting-datatypes",
    "href": "chapters/05-WorkingWithData/pandas_penguins.html#setting-datatypes",
    "title": "Working with data in python/pandas",
    "section": "Setting datatypes",
    "text": "Setting datatypes\nHere’s an example where we manually make sex a categorical type.\n\npenguins = penguins.astype({'Sex':'category'})\npenguins['Sex']\n\n0        MALE\n1      FEMALE\n2      FEMALE\n3         NaN\n4      FEMALE\n        ...  \n339      MALE\n340    FEMALE\n341      MALE\n342      MALE\n343    FEMALE\nName: Sex, Length: 344, dtype: category\nCategories (2, object): ['FEMALE', 'MALE']\n\n\nOne can also pass a dictionary setting the types of columns as an argument when you read them from the csv file."
  },
  {
    "objectID": "chapters/05-WorkingWithData/pandas_penguins.html#creating-new-columns",
    "href": "chapters/05-WorkingWithData/pandas_penguins.html#creating-new-columns",
    "title": "Working with data in python/pandas",
    "section": "Creating new columns",
    "text": "Creating new columns\nSimplifying the species name.\n\ndef first_word(x):\n    return x.split()[0]\npenguins['SimpleSpecies'] = penguins['Species'].map(first_word)\n\nRewriting the body mass in kilograms.\n\npenguins['Body Mass (kg)'] = penguins['Body Mass (g)']/1000"
  },
  {
    "objectID": "chapters/05-WorkingWithData/pandas_penguins.html#sorting",
    "href": "chapters/05-WorkingWithData/pandas_penguins.html#sorting",
    "title": "Working with data in python/pandas",
    "section": "Sorting",
    "text": "Sorting\n\npenguins_small = penguins[['Species','Island','Body Mass (g)']]\npenguins_small.sort_values('Body Mass (g)')\n# ascending = False for descending order\n# na_position = 'first' or 'last' (default is 'last')\n# can also provide a key which is a function of prototype Series -&gt; Series\n# inplace = True doesn't return a new dataframe, sorts the given one in place\n\n\n\n\n\n\n\n\nSpecies\nIsland\nBody Mass (g)\n\n\n\n\n314\nChinstrap penguin (Pygoscelis antarctica)\nDream\n2700.0\n\n\n64\nAdelie Penguin (Pygoscelis adeliae)\nBiscoe\n2850.0\n\n\n58\nAdelie Penguin (Pygoscelis adeliae)\nBiscoe\n2850.0\n\n\n116\nAdelie Penguin (Pygoscelis adeliae)\nTorgersen\n2900.0\n\n\n98\nAdelie Penguin (Pygoscelis adeliae)\nDream\n2900.0\n\n\n...\n...\n...\n...\n\n\n269\nGentoo penguin (Pygoscelis papua)\nBiscoe\n6000.0\n\n\n185\nGentoo penguin (Pygoscelis papua)\nBiscoe\n6050.0\n\n\n169\nGentoo penguin (Pygoscelis papua)\nBiscoe\n6300.0\n\n\n3\nAdelie Penguin (Pygoscelis adeliae)\nTorgersen\nNaN\n\n\n271\nGentoo penguin (Pygoscelis papua)\nBiscoe\nNaN\n\n\n\n\n344 rows × 3 columns"
  },
  {
    "objectID": "chapters/05-WorkingWithData/pandas_penguins.html#grouping",
    "href": "chapters/05-WorkingWithData/pandas_penguins.html#grouping",
    "title": "Working with data in python/pandas",
    "section": "Grouping",
    "text": "Grouping\nGrouping is a powerful tool. Let’s first group our penguins by species. The result is a “grouped” object which needs to pass through a summarize operation to be useful.\n\npenguins_by_species = penguins.groupby('Species')\npenguins_by_species\n\n&lt;pandas.core.groupby.generic.DataFrameGroupBy object at 0x154f3e190&gt;"
  },
  {
    "objectID": "chapters/05-WorkingWithData/pandas_penguins.html#summarizing",
    "href": "chapters/05-WorkingWithData/pandas_penguins.html#summarizing",
    "title": "Working with data in python/pandas",
    "section": "Summarizing",
    "text": "Summarizing\n\n# describe computes basic descriptive statistics\npenguins_by_species['Body Mass (g)'].describe()\n\n\n\n\n\n\n\n\ncount\nmean\nstd\nmin\n25%\n50%\n75%\nmax\n\n\nSpecies\n\n\n\n\n\n\n\n\n\n\n\n\nAdelie Penguin (Pygoscelis adeliae)\n151.0\n3700.662252\n458.566126\n2850.0\n3350.0\n3700.0\n4000.0\n4775.0\n\n\nChinstrap penguin (Pygoscelis antarctica)\n68.0\n3733.088235\n384.335081\n2700.0\n3487.5\n3700.0\n3950.0\n4800.0\n\n\nGentoo penguin (Pygoscelis papua)\n123.0\n5076.016260\n504.116237\n3950.0\n4700.0\n5000.0\n5500.0\n6300.0\n\n\n\n\n\n\n\n\n# this fails because some columns aren't numeric\npenguins_by_species.mean(numeric_only=True)\n\n\n\n\n\n\n\n\nSample Number\nCulmen Length (mm)\nCulmen Depth (mm)\nFlipper Length (mm)\nBody Mass (g)\nDelta 15 N (o/oo)\nDelta 13 C (o/oo)\nBody Mass (kg)\n\n\nSpecies\n\n\n\n\n\n\n\n\n\n\n\n\nAdelie Penguin (Pygoscelis adeliae)\n76.5\n38.791391\n18.346358\n189.953642\n3700.662252\n8.859733\n-25.804194\n3.700662\n\n\nChinstrap penguin (Pygoscelis antarctica)\n34.5\n48.833824\n18.420588\n195.823529\n3733.088235\n9.356155\n-24.546542\n3.733088\n\n\nGentoo penguin (Pygoscelis papua)\n62.5\n47.504878\n14.982114\n217.186992\n5076.016260\n8.245338\n-26.185298\n5.076016\n\n\n\n\n\n\n\n\npenguins_by_species.count()\n\n\n\n\n\n\n\n\nstudyName\nSample Number\nRegion\nIsland\nStage\nIndividual ID\nClutch Completion\nDate Egg\nCulmen Length (mm)\nCulmen Depth (mm)\nFlipper Length (mm)\nBody Mass (g)\nSex\nDelta 15 N (o/oo)\nDelta 13 C (o/oo)\nSimpleSpecies\nBody Mass (kg)\n\n\nSpecies\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdelie Penguin (Pygoscelis adeliae)\n152\n152\n152\n152\n152\n152\n152\n152\n151\n151\n151\n151\n146\n141\n141\n152\n151\n\n\nChinstrap penguin (Pygoscelis antarctica)\n68\n68\n68\n68\n68\n68\n68\n68\n68\n68\n68\n68\n68\n67\n68\n68\n68\n\n\nGentoo penguin (Pygoscelis papua)\n124\n124\n124\n124\n124\n124\n124\n124\n123\n123\n123\n123\n119\n122\n122\n124\n123"
  },
  {
    "objectID": "chapters/05-WorkingWithData/pandas_penguins.html#multiindex",
    "href": "chapters/05-WorkingWithData/pandas_penguins.html#multiindex",
    "title": "Working with data in python/pandas",
    "section": "MultiIndex",
    "text": "MultiIndex\n\npenguins_by_sex_and_species = penguins.groupby(['Sex','Species'])\npenguins_by_sex_and_species['Body Mass (g)'].describe().round()\n\n\n\n\n\n\n\n\n\ncount\nmean\nstd\nmin\n25%\n50%\n75%\nmax\n\n\nSex\nSpecies\n\n\n\n\n\n\n\n\n\n\n\n\nFEMALE\nAdelie Penguin (Pygoscelis adeliae)\n73.0\n3369.0\n269.0\n2850.0\n3175.0\n3400.0\n3550.0\n3900.0\n\n\nChinstrap penguin (Pygoscelis antarctica)\n34.0\n3527.0\n285.0\n2700.0\n3362.0\n3550.0\n3694.0\n4150.0\n\n\nGentoo penguin (Pygoscelis papua)\n58.0\n4680.0\n282.0\n3950.0\n4462.0\n4700.0\n4875.0\n5200.0\n\n\nMALE\nAdelie Penguin (Pygoscelis adeliae)\n73.0\n4043.0\n347.0\n3325.0\n3800.0\n4000.0\n4300.0\n4775.0\n\n\nChinstrap penguin (Pygoscelis antarctica)\n34.0\n3939.0\n362.0\n3250.0\n3731.0\n3950.0\n4100.0\n4800.0\n\n\nGentoo penguin (Pygoscelis papua)\n61.0\n5485.0\n313.0\n4750.0\n5300.0\n5500.0\n5700.0\n6300.0\n\n\n\n\n\n\n\n\n# pivot tables\npenguins_by_sex_and_species['Body Mass (g)'].mean().reset_index().pivot(index='Sex',columns='Species',values='Body Mass (g)')\n\n\n\n\n\n\n\nSpecies\nAdelie Penguin (Pygoscelis adeliae)\nChinstrap penguin (Pygoscelis antarctica)\nGentoo penguin (Pygoscelis papua)\n\n\nSex\n\n\n\n\n\n\n\nFEMALE\n3368.835616\n3527.205882\n4679.741379\n\n\nMALE\n4043.493151\n3938.970588\n5484.836066"
  },
  {
    "objectID": "chapters/05-WorkingWithData/pandas_penguins.html#pandas-plotting",
    "href": "chapters/05-WorkingWithData/pandas_penguins.html#pandas-plotting",
    "title": "Working with data in python/pandas",
    "section": "Pandas plotting",
    "text": "Pandas plotting\nSome simple plots are available directly from pandas.\n\npenguins[penguins['Species'].str.startswith(\"Adel\")].groupby(['Sex'])['Body Mass (g)'].hist(bins=30,legend=True)\n\nSex\nFEMALE    Axes(0.125,0.11;0.775x0.77)\nMALE      Axes(0.125,0.11;0.775x0.77)\nName: Body Mass (g), dtype: object"
  },
  {
    "objectID": "chapters/05-WorkingWithData/pandas_penguins.html#excel-files",
    "href": "chapters/05-WorkingWithData/pandas_penguins.html#excel-files",
    "title": "Working with data in python/pandas",
    "section": "Excel files",
    "text": "Excel files\nWe can read an excel file. This particular one is complicated for various reasons, including the fact that the column heads are in the third row, not at the top. Also there are a bunch of footnotes starting in row 510 that we don’t want. So we don’t read them in.\n\ncrime2019 = pd.read_excel(\"data/Violent Crime-by state-2019-table-5.xls\",header=3,nrows=510)\ncrime2019\n\n\n\n\n\n\n\n\nState\nArea\nUnnamed: 2\nPopulation\nViolent \\ncrime1\nMurder and \\nnonnegligent \\nmanslaughter\nRape2\nRobbery\nAggravated \\nassault\nProperty \\ncrime\nBurglary\nLarceny-theft\nMotor \\nvehicle \\ntheft\n\n\n\n\n0\nALABAMA\nMetropolitan Statistical Area\nNaN\n3728978.000\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1\nNaN\nNaN\nArea actually reporting\n0.766\n12880\n182.0\n1141.0\n1706.0\n9851\n65789\n12388.0\n47299.0\n6102.0\n\n\n2\nNaN\nNaN\nEstimated total\n1.000\n19951\n300.0\n1542.0\n3432.0\n14677\n104658\n20728.0\n73857.0\n10073.0\n\n\n3\nNaN\nCities outside metropolitan areas\nNaN\n528518.000\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4\nNaN\nNaN\nArea actually reporting\n0.893\n3327\n36.0\n297.0\n266.0\n2728\n17915\n3140.0\n13382.0\n1393.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n505\nNaN\nNonmetropolitan counties\nNaN\n160615.000\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n506\nNaN\nNaN\nArea actually reporting\n0.921\n194\n0.0\n39.0\n0.0\n155\n973\n170.0\n716.0\n87.0\n\n\n507\nNaN\nNaN\nEstimated total\n1.000\n213\n0.0\n42.0\n0.0\n171\n1065\n188.0\n781.0\n96.0\n\n\n508\nNaN\nState Total\nNaN\n578759.000\n1258\n13.0\n324.0\n67.0\n854\n9093\n1396.0\n6984.0\n713.0\n\n\n509\nNaN\nNaN\nRate per 100,000 inhabitants\nNaN\n217.4\n2.2\n56.0\n11.6\n147.6\n1571.1\n241.2\n1206.7\n123.2\n\n\n\n\n510 rows × 13 columns\n\n\n\nThe column names have newlines in them and we’d like to get rid of those.\n\ncrime2019.columns = [x.replace(\" \\n\",\"_\") for x in crime2019.columns]\ncrime2019\n\n\n\n\n\n\n\n\nState\nArea\nUnnamed: 2\nPopulation\nViolent_crime1\nMurder and_nonnegligent_manslaughter\nRape2\nRobbery\nAggravated_assault\nProperty_crime\nBurglary\nLarceny-theft\nMotor_vehicle_theft\n\n\n\n\n0\nALABAMA\nMetropolitan Statistical Area\nNaN\n3728978.000\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1\nNaN\nNaN\nArea actually reporting\n0.766\n12880\n182.0\n1141.0\n1706.0\n9851\n65789\n12388.0\n47299.0\n6102.0\n\n\n2\nNaN\nNaN\nEstimated total\n1.000\n19951\n300.0\n1542.0\n3432.0\n14677\n104658\n20728.0\n73857.0\n10073.0\n\n\n3\nNaN\nCities outside metropolitan areas\nNaN\n528518.000\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4\nNaN\nNaN\nArea actually reporting\n0.893\n3327\n36.0\n297.0\n266.0\n2728\n17915\n3140.0\n13382.0\n1393.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n505\nNaN\nNonmetropolitan counties\nNaN\n160615.000\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n506\nNaN\nNaN\nArea actually reporting\n0.921\n194\n0.0\n39.0\n0.0\n155\n973\n170.0\n716.0\n87.0\n\n\n507\nNaN\nNaN\nEstimated total\n1.000\n213\n0.0\n42.0\n0.0\n171\n1065\n188.0\n781.0\n96.0\n\n\n508\nNaN\nState Total\nNaN\n578759.000\n1258\n13.0\n324.0\n67.0\n854\n9093\n1396.0\n6984.0\n713.0\n\n\n509\nNaN\nNaN\nRate per 100,000 inhabitants\nNaN\n217.4\n2.2\n56.0\n11.6\n147.6\n1571.1\n241.2\n1206.7\n123.2\n\n\n\n\n510 rows × 13 columns\n\n\n\nLet’s look at the states.\n\nstates = crime2019[\"State\"].dropna().values\nstates\n\narray(['ALABAMA', 'ALASKA', 'ARIZONA', 'ARKANSAS', 'CALIFORNIA',\n       'COLORADO', 'CONNECTICUT', 'DELAWARE', 'DISTRICT OF COLUMBIA3',\n       'FLORIDA', 'GEORGIA', 'HAWAII', 'IDAHO', 'ILLINOIS', 'INDIANA',\n       'IOWA', 'KANSAS', 'KENTUCKY', 'LOUISIANA', 'MAINE', 'MARYLAND',\n       'MASSACHUSETTS', 'MICHIGAN', 'MINNESOTA', 'MISSISSIPPI4',\n       'MISSOURI', 'MONTANA', 'NEBRASKA', 'NEVADA', 'NEW HAMPSHIRE',\n       'NEW JERSEY', 'NEW MEXICO', 'NEW YORK', 'NORTH CAROLINA',\n       'NORTH DAKOTA', 'OHIO4', 'OKLAHOMA', 'OREGON4', 'PENNSYLVANIA',\n       'PUERTO RICO', 'RHODE ISLAND', 'SOUTH CAROLINA', 'SOUTH DAKOTA',\n       'TENNESSEE', 'TEXAS', 'UTAH', 'VERMONT', 'VIRGINIA', 'WASHINGTON',\n       'WEST VIRGINIA', 'WISCONSIN', 'WYOMING'], dtype=object)\n\n\nSome have footnotes at the end. We don’t want them.\n\nstates = [re.sub(\"[0-9$]\",\"\",x) for x in states]\nstates\n\n['ALABAMA',\n 'ALASKA',\n 'ARIZONA',\n 'ARKANSAS',\n 'CALIFORNIA',\n 'COLORADO',\n 'CONNECTICUT',\n 'DELAWARE',\n 'DISTRICT OF COLUMBIA',\n 'FLORIDA',\n 'GEORGIA',\n 'HAWAII',\n 'IDAHO',\n 'ILLINOIS',\n 'INDIANA',\n 'IOWA',\n 'KANSAS',\n 'KENTUCKY',\n 'LOUISIANA',\n 'MAINE',\n 'MARYLAND',\n 'MASSACHUSETTS',\n 'MICHIGAN',\n 'MINNESOTA',\n 'MISSISSIPPI',\n 'MISSOURI',\n 'MONTANA',\n 'NEBRASKA',\n 'NEVADA',\n 'NEW HAMPSHIRE',\n 'NEW JERSEY',\n 'NEW MEXICO',\n 'NEW YORK',\n 'NORTH CAROLINA',\n 'NORTH DAKOTA',\n 'OHIO',\n 'OKLAHOMA',\n 'OREGON',\n 'PENNSYLVANIA',\n 'PUERTO RICO',\n 'RHODE ISLAND',\n 'SOUTH CAROLINA',\n 'SOUTH DAKOTA',\n 'TENNESSEE',\n 'TEXAS',\n 'UTAH',\n 'VERMONT',\n 'VIRGINIA',\n 'WASHINGTON',\n 'WEST VIRGINIA',\n 'WISCONSIN',\n 'WYOMING']\n\n\n] We don’t want to include DC or Puerto Rico.\n\nstates = [x for x in states if x!='DISTRICT OF COLUMBIA' and x!='PUERTO RICO']\nstates\n\n['ALABAMA',\n 'ALASKA',\n 'ARIZONA',\n 'ARKANSAS',\n 'CALIFORNIA',\n 'COLORADO',\n 'CONNECTICUT',\n 'DELAWARE',\n 'FLORIDA',\n 'GEORGIA',\n 'HAWAII',\n 'IDAHO',\n 'ILLINOIS',\n 'INDIANA',\n 'IOWA',\n 'KANSAS',\n 'KENTUCKY',\n 'LOUISIANA',\n 'MAINE',\n 'MARYLAND',\n 'MASSACHUSETTS',\n 'MICHIGAN',\n 'MINNESOTA',\n 'MISSISSIPPI',\n 'MISSOURI',\n 'MONTANA',\n 'NEBRASKA',\n 'NEVADA',\n 'NEW HAMPSHIRE',\n 'NEW JERSEY',\n 'NEW MEXICO',\n 'NEW YORK',\n 'NORTH CAROLINA',\n 'NORTH DAKOTA',\n 'OHIO',\n 'OKLAHOMA',\n 'OREGON',\n 'PENNSYLVANIA',\n 'RHODE ISLAND',\n 'SOUTH CAROLINA',\n 'SOUTH DAKOTA',\n 'TENNESSEE',\n 'TEXAS',\n 'UTAH',\n 'VERMONT',\n 'VIRGINIA',\n 'WASHINGTON',\n 'WEST VIRGINIA',\n 'WISCONSIN',\n 'WYOMING']\n\n\nFinally, we want to pull out the violent crime numbers for the total area of the state. Notice that Puerto Rico and DC use “Total”, not “State Total”, for Area and so they will be excluded.\n\nvcrime2019 = crime2019[crime2019['Area'] == 'State Total']['Violent_crime1'].values\nvcrime2019\n\narray([25046, 6343, 33141, 17643, 174331, 21938, 6546, 4115, 81270, 36170,\n       4042, 4000, 51561, 24966, 8410, 11968, 9701, 25537, 1548, 27456,\n       22578, 43686, 13332, 8272, 30380, 4328, 5821, 15210, 2074, 18375,\n       17450, 69764, 38995, 2169, 34269, 17086, 11995, 39228, 2342, 26323,\n       3530, 40647, 121474, 7553, 1262, 17753, 22377, 5674, 17070, 1258],\n      dtype=object)"
  },
  {
    "objectID": "chapters/05-WorkingWithData/pythonAndR.html",
    "href": "chapters/05-WorkingWithData/pythonAndR.html",
    "title": "Data Structures and Functions in R and Python",
    "section": "",
    "text": "Both R and Python have data structures like excel spreadsheets that are the basic way to organize tabular data.\nIn R, these tools are packaged together in a family of libraries called the tidyverse.\nIn Python they are packaged in two closely related libraries, numpy (which handles numerical linear algebra) and pandas which handles tabular data.\nIn Python, these tabular data structures are called dataframes; in R they are called tibbles (there are dataframes in R as well but the tidyverse package mainly uses tibbles.)"
  },
  {
    "objectID": "chapters/05-WorkingWithData/pythonAndR.html#basic-data-structures-for-analysis",
    "href": "chapters/05-WorkingWithData/pythonAndR.html#basic-data-structures-for-analysis",
    "title": "Data Structures and Functions in R and Python",
    "section": "",
    "text": "Both R and Python have data structures like excel spreadsheets that are the basic way to organize tabular data.\nIn R, these tools are packaged together in a family of libraries called the tidyverse.\nIn Python they are packaged in two closely related libraries, numpy (which handles numerical linear algebra) and pandas which handles tabular data.\nIn Python, these tabular data structures are called dataframes; in R they are called tibbles (there are dataframes in R as well but the tidyverse package mainly uses tibbles.)"
  },
  {
    "objectID": "chapters/05-WorkingWithData/pythonAndR.html#features",
    "href": "chapters/05-WorkingWithData/pythonAndR.html#features",
    "title": "Data Structures and Functions in R and Python",
    "section": "Features",
    "text": "Features\nThe basic operations that both R and Python offer are\n\nmapping a function to a column of data and creating a new column\nselecting a particular column\nfiltering to select rows where column entries meet a condition\ngrouping rows by keys\nsummarizing data by computing sums, counts, averages, variances, and so on."
  },
  {
    "objectID": "chapters/05-WorkingWithData/pythonAndR.html#visualization",
    "href": "chapters/05-WorkingWithData/pythonAndR.html#visualization",
    "title": "Data Structures and Functions in R and Python",
    "section": "Visualization",
    "text": "Visualization\nIn addition, both R and Python have plotting libraries that rely on dataframes/tibbles as input and libraries that apply ML algorithms to tabular data stored in dataframes/tibbles."
  },
  {
    "objectID": "chapters/05-WorkingWithData/pythonAndR.html#walkthroughs",
    "href": "chapters/05-WorkingWithData/pythonAndR.html#walkthroughs",
    "title": "Data Structures and Functions in R and Python",
    "section": "Walkthroughs",
    "text": "Walkthroughs\n\nPython/basics of python programming\nPython/pandas walkthrough\nR/tidyverse walkthrough"
  },
  {
    "objectID": "chapters/05-WorkingWithData/python_programming.html",
    "href": "chapters/05-WorkingWithData/python_programming.html",
    "title": "Basics of Programming in Python",
    "section": "",
    "text": "Key ingredients of programming language:\n\ndata types and data structures\nfunctions\ncontrol flow (iteration and logical branches)"
  },
  {
    "objectID": "chapters/05-WorkingWithData/python_programming.html#basics-of-programming-in-python",
    "href": "chapters/05-WorkingWithData/python_programming.html#basics-of-programming-in-python",
    "title": "Basics of Programming in Python",
    "section": "",
    "text": "Key ingredients of programming language:\n\ndata types and data structures\nfunctions\ncontrol flow (iteration and logical branches)"
  },
  {
    "objectID": "chapters/05-WorkingWithData/python_programming.html#key-data-types-in-python",
    "href": "chapters/05-WorkingWithData/python_programming.html#key-data-types-in-python",
    "title": "Basics of Programming in Python",
    "section": "Key data types in python",
    "text": "Key data types in python\n\nnumbers (integers and floating point)\nstrings\nlists\nnumpy arrays (*)\ndictionaries\npandas dataframes (*)"
  },
  {
    "objectID": "chapters/05-WorkingWithData/python_programming.html#basic-examples",
    "href": "chapters/05-WorkingWithData/python_programming.html#basic-examples",
    "title": "Basics of Programming in Python",
    "section": "Basic examples",
    "text": "Basic examples\nFrom before, remember:\n\nn = 56  # integer\nm = 1234.48  # floating point\nL = [1, 2, 3, 4]  # list\nname = \"Jeremy\"  # string\n\nThe typeof operator tells you what something is.\n\nprint(\"type of n is {}, type of name is {}\".format(type(n), type(name)))\n\ntype of n is &lt;class 'int'&gt;, type of name is &lt;class 'str'&gt;"
  },
  {
    "objectID": "chapters/05-WorkingWithData/python_programming.html#dictionaries",
    "href": "chapters/05-WorkingWithData/python_programming.html#dictionaries",
    "title": "Basics of Programming in Python",
    "section": "Dictionaries",
    "text": "Dictionaries\nA dictionary (or a HashMap, or an associative array) is like an array with arbitrary subscripts.\n\nD = {\"first_name\": \"Jeremy\", \"last_name\": \"Teitelbaum\"}\nD[\"middle_name\"] = \"Thau\"\nprint(D[\"first_name\"])\nD[\"Title\"] = \"Emperor\"\nprint(D)\n# D[\"Subtitle\"]\n\nJeremy\n{'first_name': 'Jeremy', 'last_name': 'Teitelbaum', 'middle_name': 'Thau', 'Title': 'Emperor'}"
  },
  {
    "objectID": "chapters/05-WorkingWithData/python_programming.html#arrays",
    "href": "chapters/05-WorkingWithData/python_programming.html#arrays",
    "title": "Basics of Programming in Python",
    "section": "Arrays",
    "text": "Arrays\n\nimport numpy as np\n\nx=np.array([1,2,3,4])\nx=np.linspace(-5,5,10)"
  },
  {
    "objectID": "chapters/05-WorkingWithData/python_programming.html#booleans",
    "href": "chapters/05-WorkingWithData/python_programming.html#booleans",
    "title": "Basics of Programming in Python",
    "section": "Booleans",
    "text": "Booleans\n\nT = True\nF = False\nprint(T or F) # or\nprint(T and F) # and \n3 == 5 # equality\n3 &gt; 5 # \n3 &lt; 5 #\nx = (3 &lt;= 5) #\nprint(x)\ny = (3 != 5) #\nprint(y)\n\nTrue\nFalse\nTrue\nTrue"
  },
  {
    "objectID": "chapters/05-WorkingWithData/python_programming.html#functions",
    "href": "chapters/05-WorkingWithData/python_programming.html#functions",
    "title": "Basics of Programming in Python",
    "section": "Functions",
    "text": "Functions\n\nimport scipy.stats as sps\n\ndef my_function(n,mu,s):\n    x = sps.norm.rvs(mu,s,size=n)\n    return x\n\nImportant concepts: - arguments - scope - return values"
  },
  {
    "objectID": "chapters/05-WorkingWithData/python_programming.html#scope",
    "href": "chapters/05-WorkingWithData/python_programming.html#scope",
    "title": "Basics of Programming in Python",
    "section": "Scope",
    "text": "Scope\nBasic rule of scope: Variables created inside functions are completely separate from those outside the function, changing them has no effect.\nException: some operations (such as list append) modify an element in place and in these cases you may end up modifying something.\n\ndef f(a,b):\n    x=a+b\n    return x\n\n\nx=3\nprint(\"before executing f, x={}\".format(x))\nprint(f(2,5))\nprint(\"after executing f, x={}\".format(x))\n\nbefore executing f, x=3\n7\nafter executing f, x=3\n\n\n\ndef f(x):\n    x=x+[\"d\"]\n    return x\n\nL=[\"a\",\"b\",\"c\"]\nprint(\"L before is {}\".format(L))\nprint(\"result of f(L) is {}\".format(f(L)))\nprint(\"L after is {}\".format(L))\n\nL before is ['a', 'b', 'c']\nresult of f(L) is ['a', 'b', 'c', 'd']\nL after is ['a', 'b', 'c']\n\n\n\ndef f(x):\n    x.append(\"d\") #\n    return x\n\n# Warning\nx = [\"a\",\"b\",\"c\"]\nprint(f(x))\nprint(x)\n\n['a', 'b', 'c', 'd']\n['a', 'b', 'c', 'd']\n\n\n\nx = 55\n\ndef f(n):\n    n = n+x\n    return n\n\nf(24)\n\n79"
  },
  {
    "objectID": "chapters/05-WorkingWithData/python_programming.html#iteration",
    "href": "chapters/05-WorkingWithData/python_programming.html#iteration",
    "title": "Basics of Programming in Python",
    "section": "Iteration",
    "text": "Iteration\n\nfor x in range(10):\n    print(x,end=',')\nprint('\\n---')\n\nfor x in [\"a\",\"b\",\"c\"]:\n    print(x,end=',')\n\n# Also available: while\n\n0,1,2,3,4,5,6,7,8,9,\n---\na,b,c,"
  },
  {
    "objectID": "chapters/05-WorkingWithData/python_programming.html#logic",
    "href": "chapters/05-WorkingWithData/python_programming.html#logic",
    "title": "Basics of Programming in Python",
    "section": "logic",
    "text": "logic\n\nif 3&lt;5:\n    print(\"ha\")\nelse:\n    print(\"ba\")\n\nha\n\n\n\nif 3+5==8 and 3-5==-2:\n    print(\"Yeah!\")\nelse:\n    print(\"Nah!\")\n\nYeah!\n\n\n\nif 3+5 in [1,2,3,4,5,6,7]:\n    print(\"Yeah\")\nelse:\n    print(\"nah!\")\n\nnah!"
  },
  {
    "objectID": "chapters/05-WorkingWithData/python_programming.html#a-few-other-tricks",
    "href": "chapters/05-WorkingWithData/python_programming.html#a-few-other-tricks",
    "title": "Basics of Programming in Python",
    "section": "A few other tricks",
    "text": "A few other tricks\n\ndefault arguments\ndocstrings\n\n\ndef f(x=0,y=1):\n    return x+y\n\nprint(f())\nprint(f(1))\nprint(f(3,4))\n\n1\n2\n7\n\n\n\ndef first_letter_cap(s):\n    \"Returns s but first letter of string is upper case\"\n    return s[0].upper()+s[1:]"
  },
  {
    "objectID": "chapters/05-WorkingWithData/python_programming.html#some-examples",
    "href": "chapters/05-WorkingWithData/python_programming.html#some-examples",
    "title": "Basics of Programming in Python",
    "section": "Some examples",
    "text": "Some examples\nTake a string and make its first character upper case and the rest lower.\n\ndef f(s):\n    l = s[0].upper()+s[1:].lower()\n    return l\n\nprint(f(\"hello\"),f(\"Hello\"),f(\"HELLO\"))\n\nHello Hello Hello\n\n\nNow do this for each element of a list.\n\ndef h(L):\n    N=[]\n    for x in L:\n        N = N + [f(x)]\n    return N\n\nh([\"hello\",\"HELLO\",\"jeremy\",\"JEREMY\",\"jerEmy\"])\n\n['Hello', 'Hello', 'Jeremy', 'Jeremy', 'Jeremy']"
  },
  {
    "objectID": "chapters/05-WorkingWithData/python_programming.html#list-comprehensions",
    "href": "chapters/05-WorkingWithData/python_programming.html#list-comprehensions",
    "title": "Basics of Programming in Python",
    "section": "list Comprehensions",
    "text": "list Comprehensions\nThis is one of the most useful things about python.\n\nL = [\"hello\",\"Hello\",\"HELLO\",\"jeremy\",\"jereMy\"]\nN = [f(x) for x in L]\nM = [f(x) for x in L if x[0]==\"H\"]\nprint(N,M)\n\n['Hello', 'Hello', 'Hello', 'Jeremy', 'Jeremy'] ['Hello', 'Hello']"
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html",
    "href": "chapters/05-WorkingWithData/r_penguins.html",
    "title": "Working with data in R",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.1     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\ncat(paste(R.version$version.string, \"\\n\"))\n\nR version 4.2.3 (2023-03-15)"
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html#load-the-required-libraries",
    "href": "chapters/05-WorkingWithData/r_penguins.html#load-the-required-libraries",
    "title": "Working with data in R",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.1     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\ncat(paste(R.version$version.string, \"\\n\"))\n\nR version 4.2.3 (2023-03-15)"
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html#read-the-penguins-data-from-a-csv-file",
    "href": "chapters/05-WorkingWithData/r_penguins.html#read-the-penguins-data-from-a-csv-file",
    "title": "Working with data in R",
    "section": "read the penguins data from a csv file",
    "text": "read the penguins data from a csv file\n\npenguins &lt;- read_csv(\"data/penguins-raw.csv\")\n\nRows: 344 Columns: 17\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (9): studyName, Species, Region, Island, Stage, Individual ID, Clutch C...\ndbl  (7): Sample Number, Culmen Length (mm), Culmen Depth (mm), Flipper Leng...\ndate (1): Date Egg\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html#print-the-number-of-rows-and-columns-in-the-data-frame",
    "href": "chapters/05-WorkingWithData/r_penguins.html#print-the-number-of-rows-and-columns-in-the-data-frame",
    "title": "Working with data in R",
    "section": "print the number of rows and columns in the data frame",
    "text": "print the number of rows and columns in the data frame\n\ncat(\"Rows:\", nrow(penguins), \", Columns:\", ncol(penguins), \"\\n\")\n\nRows: 344 , Columns: 17"
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html#print-the-column-names",
    "href": "chapters/05-WorkingWithData/r_penguins.html#print-the-column-names",
    "title": "Working with data in R",
    "section": "print the column names",
    "text": "print the column names\n\ncat(\"Columns:\\n\")\n\nColumns:\n\nprint(colnames(penguins))\n\n [1] \"studyName\"           \"Sample Number\"       \"Species\"            \n [4] \"Region\"              \"Island\"              \"Stage\"              \n [7] \"Individual ID\"       \"Clutch Completion\"   \"Date Egg\"           \n[10] \"Culmen Length (mm)\"  \"Culmen Depth (mm)\"   \"Flipper Length (mm)\"\n[13] \"Body Mass (g)\"       \"Sex\"                 \"Delta 15 N (o/oo)\"  \n[16] \"Delta 13 C (o/oo)\"   \"Comments\""
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html#select-a-subset-of-columns",
    "href": "chapters/05-WorkingWithData/r_penguins.html#select-a-subset-of-columns",
    "title": "Working with data in R",
    "section": "select a subset of columns",
    "text": "select a subset of columns\n\nsimpler &lt;- penguins |&gt; select(Species, `Body Mass (g)`, `Flipper Length (mm)`)\nhead(simpler)\n\n# A tibble: 6 × 3\n  Species                             `Body Mass (g)` `Flipper Length (mm)`\n  &lt;chr&gt;                                         &lt;dbl&gt;                 &lt;dbl&gt;\n1 Adelie Penguin (Pygoscelis adeliae)            3750                   181\n2 Adelie Penguin (Pygoscelis adeliae)            3800                   186\n3 Adelie Penguin (Pygoscelis adeliae)            3250                   195\n4 Adelie Penguin (Pygoscelis adeliae)              NA                    NA\n5 Adelie Penguin (Pygoscelis adeliae)            3450                   193\n6 Adelie Penguin (Pygoscelis adeliae)            3650                   190"
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html#print-the-index",
    "href": "chapters/05-WorkingWithData/r_penguins.html#print-the-index",
    "title": "Working with data in R",
    "section": "print the index",
    "text": "print the index\n\nprint(rownames(penguins))\n\n  [1] \"1\"   \"2\"   \"3\"   \"4\"   \"5\"   \"6\"   \"7\"   \"8\"   \"9\"   \"10\"  \"11\"  \"12\" \n [13] \"13\"  \"14\"  \"15\"  \"16\"  \"17\"  \"18\"  \"19\"  \"20\"  \"21\"  \"22\"  \"23\"  \"24\" \n [25] \"25\"  \"26\"  \"27\"  \"28\"  \"29\"  \"30\"  \"31\"  \"32\"  \"33\"  \"34\"  \"35\"  \"36\" \n [37] \"37\"  \"38\"  \"39\"  \"40\"  \"41\"  \"42\"  \"43\"  \"44\"  \"45\"  \"46\"  \"47\"  \"48\" \n [49] \"49\"  \"50\"  \"51\"  \"52\"  \"53\"  \"54\"  \"55\"  \"56\"  \"57\"  \"58\"  \"59\"  \"60\" \n [61] \"61\"  \"62\"  \"63\"  \"64\"  \"65\"  \"66\"  \"67\"  \"68\"  \"69\"  \"70\"  \"71\"  \"72\" \n [73] \"73\"  \"74\"  \"75\"  \"76\"  \"77\"  \"78\"  \"79\"  \"80\"  \"81\"  \"82\"  \"83\"  \"84\" \n [85] \"85\"  \"86\"  \"87\"  \"88\"  \"89\"  \"90\"  \"91\"  \"92\"  \"93\"  \"94\"  \"95\"  \"96\" \n [97] \"97\"  \"98\"  \"99\"  \"100\" \"101\" \"102\" \"103\" \"104\" \"105\" \"106\" \"107\" \"108\"\n[109] \"109\" \"110\" \"111\" \"112\" \"113\" \"114\" \"115\" \"116\" \"117\" \"118\" \"119\" \"120\"\n[121] \"121\" \"122\" \"123\" \"124\" \"125\" \"126\" \"127\" \"128\" \"129\" \"130\" \"131\" \"132\"\n[133] \"133\" \"134\" \"135\" \"136\" \"137\" \"138\" \"139\" \"140\" \"141\" \"142\" \"143\" \"144\"\n[145] \"145\" \"146\" \"147\" \"148\" \"149\" \"150\" \"151\" \"152\" \"153\" \"154\" \"155\" \"156\"\n[157] \"157\" \"158\" \"159\" \"160\" \"161\" \"162\" \"163\" \"164\" \"165\" \"166\" \"167\" \"168\"\n[169] \"169\" \"170\" \"171\" \"172\" \"173\" \"174\" \"175\" \"176\" \"177\" \"178\" \"179\" \"180\"\n[181] \"181\" \"182\" \"183\" \"184\" \"185\" \"186\" \"187\" \"188\" \"189\" \"190\" \"191\" \"192\"\n[193] \"193\" \"194\" \"195\" \"196\" \"197\" \"198\" \"199\" \"200\" \"201\" \"202\" \"203\" \"204\"\n[205] \"205\" \"206\" \"207\" \"208\" \"209\" \"210\" \"211\" \"212\" \"213\" \"214\" \"215\" \"216\"\n[217] \"217\" \"218\" \"219\" \"220\" \"221\" \"222\" \"223\" \"224\" \"225\" \"226\" \"227\" \"228\"\n[229] \"229\" \"230\" \"231\" \"232\" \"233\" \"234\" \"235\" \"236\" \"237\" \"238\" \"239\" \"240\"\n[241] \"241\" \"242\" \"243\" \"244\" \"245\" \"246\" \"247\" \"248\" \"249\" \"250\" \"251\" \"252\"\n[253] \"253\" \"254\" \"255\" \"256\" \"257\" \"258\" \"259\" \"260\" \"261\" \"262\" \"263\" \"264\"\n[265] \"265\" \"266\" \"267\" \"268\" \"269\" \"270\" \"271\" \"272\" \"273\" \"274\" \"275\" \"276\"\n[277] \"277\" \"278\" \"279\" \"280\" \"281\" \"282\" \"283\" \"284\" \"285\" \"286\" \"287\" \"288\"\n[289] \"289\" \"290\" \"291\" \"292\" \"293\" \"294\" \"295\" \"296\" \"297\" \"298\" \"299\" \"300\"\n[301] \"301\" \"302\" \"303\" \"304\" \"305\" \"306\" \"307\" \"308\" \"309\" \"310\" \"311\" \"312\"\n[313] \"313\" \"314\" \"315\" \"316\" \"317\" \"318\" \"319\" \"320\" \"321\" \"322\" \"323\" \"324\"\n[325] \"325\" \"326\" \"327\" \"328\" \"329\" \"330\" \"331\" \"332\" \"333\" \"334\" \"335\" \"336\"\n[337] \"337\" \"338\" \"339\" \"340\" \"341\" \"342\" \"343\" \"344\""
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html#print-the-23rd-row",
    "href": "chapters/05-WorkingWithData/r_penguins.html#print-the-23rd-row",
    "title": "Working with data in R",
    "section": "print the 23rd row",
    "text": "print the 23rd row\n\npenguins[23, ]\n\n# A tibble: 1 × 17\n  studyName `Sample Number` Species          Region Island Stage `Individual ID`\n  &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;          \n1 PAL0708                23 Adelie Penguin … Anvers Biscoe Adul… N12A1          \n# ℹ 10 more variables: `Clutch Completion` &lt;chr&gt;, `Date Egg` &lt;date&gt;,\n#   `Culmen Length (mm)` &lt;dbl&gt;, `Culmen Depth (mm)` &lt;dbl&gt;,\n#   `Flipper Length (mm)` &lt;dbl&gt;, `Body Mass (g)` &lt;dbl&gt;, Sex &lt;chr&gt;,\n#   `Delta 15 N (o/oo)` &lt;dbl&gt;, `Delta 13 C (o/oo)` &lt;dbl&gt;, Comments &lt;chr&gt;"
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html#print-the-value-of-the-culmen-length-mm-column-in-the-23rd-row",
    "href": "chapters/05-WorkingWithData/r_penguins.html#print-the-value-of-the-culmen-length-mm-column-in-the-23rd-row",
    "title": "Working with data in R",
    "section": "print the value of the “Culmen Length (mm)” column in the 23rd row",
    "text": "print the value of the “Culmen Length (mm)” column in the 23rd row\n\npenguins[23, \"Culmen Length (mm)\"]\n\n# A tibble: 1 × 1\n  `Culmen Length (mm)`\n                 &lt;dbl&gt;\n1                 35.9"
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html#print-the-sex-and-date-egg-columns-for-rows-23-to-28-remember-that-r-numbers-rows-from",
    "href": "chapters/05-WorkingWithData/r_penguins.html#print-the-sex-and-date-egg-columns-for-rows-23-to-28-remember-that-r-numbers-rows-from",
    "title": "Working with data in R",
    "section": "print the “Sex” and “Date Egg” columns for rows 23 to 28 (remember that r numbers rows from !)",
    "text": "print the “Sex” and “Date Egg” columns for rows 23 to 28 (remember that r numbers rows from !)\n\npenguins[23:28, c(\"Sex\", \"Date Egg\")]\n\n# A tibble: 6 × 2\n  Sex    `Date Egg`\n  &lt;chr&gt;  &lt;date&gt;    \n1 FEMALE 2007-11-12\n2 MALE   2007-11-12\n3 MALE   2007-11-10\n4 FEMALE 2007-11-10\n5 MALE   2007-11-12\n6 FEMALE 2007-11-12"
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html#count-the-number-of-occurrences-of-each-value-in-the-island-column",
    "href": "chapters/05-WorkingWithData/r_penguins.html#count-the-number-of-occurrences-of-each-value-in-the-island-column",
    "title": "Working with data in R",
    "section": "count the number of occurrences of each value in the “Island” column",
    "text": "count the number of occurrences of each value in the “Island” column\n\npenguins |&gt; count(Island)\n\n# A tibble: 3 × 2\n  Island        n\n  &lt;chr&gt;     &lt;int&gt;\n1 Biscoe      168\n2 Dream       124\n3 Torgersen    52"
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html#count-the-number-of-occurrences-of-each-value-in-the-species-column",
    "href": "chapters/05-WorkingWithData/r_penguins.html#count-the-number-of-occurrences-of-each-value-in-the-species-column",
    "title": "Working with data in R",
    "section": "count the number of occurrences of each value in the “Species” column",
    "text": "count the number of occurrences of each value in the “Species” column\n\npenguins |&gt; count(Species)\n\n# A tibble: 3 × 2\n  Species                                       n\n  &lt;chr&gt;                                     &lt;int&gt;\n1 Adelie Penguin (Pygoscelis adeliae)         152\n2 Chinstrap penguin (Pygoscelis antarctica)    68\n3 Gentoo penguin (Pygoscelis papua)           124"
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html#filter-the-data-to-keep-only-rows-where-sex-is-female",
    "href": "chapters/05-WorkingWithData/r_penguins.html#filter-the-data-to-keep-only-rows-where-sex-is-female",
    "title": "Working with data in R",
    "section": "filter the data to keep only rows where “Sex” is “FEMALE”",
    "text": "filter the data to keep only rows where “Sex” is “FEMALE”\n\nfemales &lt;- penguins |&gt; filter(Sex == \"FEMALE\")\nhead(females)\n\n# A tibble: 6 × 17\n  studyName `Sample Number` Species          Region Island Stage `Individual ID`\n  &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;          \n1 PAL0708                 2 Adelie Penguin … Anvers Torge… Adul… N1A2           \n2 PAL0708                 3 Adelie Penguin … Anvers Torge… Adul… N2A1           \n3 PAL0708                 5 Adelie Penguin … Anvers Torge… Adul… N3A1           \n4 PAL0708                 7 Adelie Penguin … Anvers Torge… Adul… N4A1           \n5 PAL0708                13 Adelie Penguin … Anvers Torge… Adul… N7A1           \n6 PAL0708                16 Adelie Penguin … Anvers Torge… Adul… N8A2           \n# ℹ 10 more variables: `Clutch Completion` &lt;chr&gt;, `Date Egg` &lt;date&gt;,\n#   `Culmen Length (mm)` &lt;dbl&gt;, `Culmen Depth (mm)` &lt;dbl&gt;,\n#   `Flipper Length (mm)` &lt;dbl&gt;, `Body Mass (g)` &lt;dbl&gt;, Sex &lt;chr&gt;,\n#   `Delta 15 N (o/oo)` &lt;dbl&gt;, `Delta 13 C (o/oo)` &lt;dbl&gt;, Comments &lt;chr&gt;"
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html#filter-the-data-to-keep-only-rows-where-flipper-length-mm-is-greater-than-body-mass-g-divided-by-20",
    "href": "chapters/05-WorkingWithData/r_penguins.html#filter-the-data-to-keep-only-rows-where-flipper-length-mm-is-greater-than-body-mass-g-divided-by-20",
    "title": "Working with data in R",
    "section": "filter the data to keep only rows where “Flipper Length (mm)” is greater than “Body Mass (g)” divided by 20",
    "text": "filter the data to keep only rows where “Flipper Length (mm)” is greater than “Body Mass (g)” divided by 20\n\npenguins |&gt; filter(`Flipper Length (mm)` &gt; `Body Mass (g)` / 20)\n\n# A tibble: 147 × 17\n   studyName `Sample Number` Species         Region Island Stage `Individual ID`\n   &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;          \n 1 PAL0708                 3 Adelie Penguin… Anvers Torge… Adul… N2A1           \n 2 PAL0708                 5 Adelie Penguin… Anvers Torge… Adul… N3A1           \n 3 PAL0708                 6 Adelie Penguin… Anvers Torge… Adul… N3A2           \n 4 PAL0708                 9 Adelie Penguin… Anvers Torge… Adul… N5A1           \n 5 PAL0708                11 Adelie Penguin… Anvers Torge… Adul… N6A1           \n 6 PAL0708                13 Adelie Penguin… Anvers Torge… Adul… N7A1           \n 7 PAL0708                14 Adelie Penguin… Anvers Torge… Adul… N7A2           \n 8 PAL0708                17 Adelie Penguin… Anvers Torge… Adul… N9A1           \n 9 PAL0708                19 Adelie Penguin… Anvers Torge… Adul… N10A1          \n10 PAL0708                21 Adelie Penguin… Anvers Biscoe Adul… N11A1          \n# ℹ 137 more rows\n# ℹ 10 more variables: `Clutch Completion` &lt;chr&gt;, `Date Egg` &lt;date&gt;,\n#   `Culmen Length (mm)` &lt;dbl&gt;, `Culmen Depth (mm)` &lt;dbl&gt;,\n#   `Flipper Length (mm)` &lt;dbl&gt;, `Body Mass (g)` &lt;dbl&gt;, Sex &lt;chr&gt;,\n#   `Delta 15 N (o/oo)` &lt;dbl&gt;, `Delta 13 C (o/oo)` &lt;dbl&gt;, Comments &lt;chr&gt;"
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html#count-the-number-of-missing-values-in-each-column",
    "href": "chapters/05-WorkingWithData/r_penguins.html#count-the-number-of-missing-values-in-each-column",
    "title": "Working with data in R",
    "section": "count the number of missing values in each column",
    "text": "count the number of missing values in each column\n\ncolSums(is.na(penguins))\n\n          studyName       Sample Number             Species              Region \n                  0                   0                   0                   0 \n             Island               Stage       Individual ID   Clutch Completion \n                  0                   0                   0                   0 \n           Date Egg  Culmen Length (mm)   Culmen Depth (mm) Flipper Length (mm) \n                  0                   2                   2                   2 \n      Body Mass (g)                 Sex   Delta 15 N (o/oo)   Delta 13 C (o/oo) \n                  2                  11                  14                  13 \n           Comments \n                290"
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html#drop-the-comments-column",
    "href": "chapters/05-WorkingWithData/r_penguins.html#drop-the-comments-column",
    "title": "Working with data in R",
    "section": "drop the “Comments” column",
    "text": "drop the “Comments” column\n\npenguins &lt;- penguins |&gt; select(-Comments)"
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html#drop-rows-with-missing-values",
    "href": "chapters/05-WorkingWithData/r_penguins.html#drop-rows-with-missing-values",
    "title": "Working with data in R",
    "section": "drop rows with missing values",
    "text": "drop rows with missing values\n\npenguins_nona &lt;- penguins |&gt; drop_na()\ndim(penguins_nona)\n\n[1] 324  16"
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html#impute-missing-values-in-the-culmen-length-mm-column-with-the-mean-value",
    "href": "chapters/05-WorkingWithData/r_penguins.html#impute-missing-values-in-the-culmen-length-mm-column-with-the-mean-value",
    "title": "Working with data in R",
    "section": "impute missing values in the “Culmen Length (mm)” column with the mean value",
    "text": "impute missing values in the “Culmen Length (mm)” column with the mean value\n\npenguins_imputed &lt;- penguins |&gt;\n    mutate(`Culmen Length (mm)` = if_else(is.na(`Culmen Length (mm)`), mean(`Culmen Length (mm)`, na.rm = TRUE), `Culmen Length (mm)`))"
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html#set-the-sex-column-as-a-categorical-variable",
    "href": "chapters/05-WorkingWithData/r_penguins.html#set-the-sex-column-as-a-categorical-variable",
    "title": "Working with data in R",
    "section": "set the “Sex” column as a categorical variable",
    "text": "set the “Sex” column as a categorical variable\n\npenguins &lt;- penguins |&gt; mutate(Sex = as.factor(Sex))"
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html#create-a-new-column-simplespecies-by-extracting-the-first-word-from-the-species-column",
    "href": "chapters/05-WorkingWithData/r_penguins.html#create-a-new-column-simplespecies-by-extracting-the-first-word-from-the-species-column",
    "title": "Working with data in R",
    "section": "create a new column “SimpleSpecies” by extracting the first word from the “Species” column",
    "text": "create a new column “SimpleSpecies” by extracting the first word from the “Species” column\n\npenguins &lt;- penguins |&gt; mutate(SimpleSpecies = word(Species, 1))"
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html#create-a-new-column-body-mass-kg-by-dividing-the-body-mass-g-column-by-1000",
    "href": "chapters/05-WorkingWithData/r_penguins.html#create-a-new-column-body-mass-kg-by-dividing-the-body-mass-g-column-by-1000",
    "title": "Working with data in R",
    "section": "create a new column “Body Mass (kg)” by dividing the “Body Mass (g)” column by 1000",
    "text": "create a new column “Body Mass (kg)” by dividing the “Body Mass (g)” column by 1000\n\npenguins &lt;- penguins |&gt; mutate(`Body Mass (kg)` = `Body Mass (g)` / 1000)"
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html#sort-the-data-by-body-mass-g-in-ascending-order",
    "href": "chapters/05-WorkingWithData/r_penguins.html#sort-the-data-by-body-mass-g-in-ascending-order",
    "title": "Working with data in R",
    "section": "sort the data by “Body Mass (g)” in ascending order",
    "text": "sort the data by “Body Mass (g)” in ascending order\n\npenguins_small &lt;- penguins |&gt; select(Species, Island, `Body Mass (g)`)\npenguins_small |&gt; arrange(`Body Mass (g)`)\n\n# A tibble: 344 × 3\n   Species                                   Island    `Body Mass (g)`\n   &lt;chr&gt;                                     &lt;chr&gt;               &lt;dbl&gt;\n 1 Chinstrap penguin (Pygoscelis antarctica) Dream                2700\n 2 Adelie Penguin (Pygoscelis adeliae)       Biscoe               2850\n 3 Adelie Penguin (Pygoscelis adeliae)       Biscoe               2850\n 4 Adelie Penguin (Pygoscelis adeliae)       Biscoe               2900\n 5 Adelie Penguin (Pygoscelis adeliae)       Dream                2900\n 6 Adelie Penguin (Pygoscelis adeliae)       Torgersen            2900\n 7 Chinstrap penguin (Pygoscelis antarctica) Dream                2900\n 8 Adelie Penguin (Pygoscelis adeliae)       Biscoe               2925\n 9 Adelie Penguin (Pygoscelis adeliae)       Dream                2975\n10 Adelie Penguin (Pygoscelis adeliae)       Dream                3000\n# ℹ 334 more rows"
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html#group-the-data-by-species",
    "href": "chapters/05-WorkingWithData/r_penguins.html#group-the-data-by-species",
    "title": "Working with data in R",
    "section": "group the data by “Species”",
    "text": "group the data by “Species”\n\npenguins_by_species &lt;- penguins |&gt; group_by(Species)"
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html#summarize-the-body-mass-g-column-for-each-group",
    "href": "chapters/05-WorkingWithData/r_penguins.html#summarize-the-body-mass-g-column-for-each-group",
    "title": "Working with data in R",
    "section": "summarize the “Body Mass (g)” column for each group",
    "text": "summarize the “Body Mass (g)” column for each group\n\npenguins_by_species |&gt; summarize(mean = mean(`Body Mass (g)`), sd = sd(`Body Mass (g)`), n = n())\n\n# A tibble: 3 × 4\n  Species                                    mean    sd     n\n  &lt;chr&gt;                                     &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;\n1 Adelie Penguin (Pygoscelis adeliae)         NA    NA    152\n2 Chinstrap penguin (Pygoscelis antarctica) 3733.  384.    68\n3 Gentoo penguin (Pygoscelis papua)           NA    NA    124"
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html#group-the-data-by-sex-and-species",
    "href": "chapters/05-WorkingWithData/r_penguins.html#group-the-data-by-sex-and-species",
    "title": "Working with data in R",
    "section": "group the data by “Sex” and “Species”",
    "text": "group the data by “Sex” and “Species”\n\npenguins_by_sex_and_species &lt;- penguins |&gt; group_by(Sex, Species)"
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html#summarize-the-body-mass-g-column-for-each-group-1",
    "href": "chapters/05-WorkingWithData/r_penguins.html#summarize-the-body-mass-g-column-for-each-group-1",
    "title": "Working with data in R",
    "section": "summarize the “Body Mass (g)” column for each group",
    "text": "summarize the “Body Mass (g)” column for each group\n\npenguins_by_sex_and_species |&gt; summarize(mean = mean(`Body Mass (g)`), sd = sd(`Body Mass (g)`), n = n())\n\n`summarise()` has grouped output by 'Sex'. You can override using the `.groups`\nargument.\n\n\n# A tibble: 8 × 5\n# Groups:   Sex [3]\n  Sex    Species                                    mean    sd     n\n  &lt;fct&gt;  &lt;chr&gt;                                     &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;\n1 FEMALE Adelie Penguin (Pygoscelis adeliae)       3369.  269.    73\n2 FEMALE Chinstrap penguin (Pygoscelis antarctica) 3527.  285.    34\n3 FEMALE Gentoo penguin (Pygoscelis papua)         4680.  282.    58\n4 MALE   Adelie Penguin (Pygoscelis adeliae)       4043.  347.    73\n5 MALE   Chinstrap penguin (Pygoscelis antarctica) 3939.  362.    34\n6 MALE   Gentoo penguin (Pygoscelis papua)         5485.  313.    61\n7 &lt;NA&gt;   Adelie Penguin (Pygoscelis adeliae)         NA    NA      6\n8 &lt;NA&gt;   Gentoo penguin (Pygoscelis papua)           NA    NA      5"
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html#create-a-pivot-table-of-the-mean-body-mass-g-for-each-combination-of-sex-and-species",
    "href": "chapters/05-WorkingWithData/r_penguins.html#create-a-pivot-table-of-the-mean-body-mass-g-for-each-combination-of-sex-and-species",
    "title": "Working with data in R",
    "section": "create a pivot table of the mean “Body Mass (g)” for each combination of “Sex” and “Species”",
    "text": "create a pivot table of the mean “Body Mass (g)” for each combination of “Sex” and “Species”\n\npenguins_by_sex_and_species |&gt;\n    summarize(mean = mean(`Body Mass (g)`)) |&gt;\n    pivot_wider(names_from = Species, values_from = mean)\n\n`summarise()` has grouped output by 'Sex'. You can override using the `.groups`\nargument.\n\n\n# A tibble: 3 × 4\n# Groups:   Sex [3]\n  Sex    Adelie Penguin (Pygosce…¹ Chinstrap penguin (P…² Gentoo penguin (Pygo…³\n  &lt;fct&gt;                      &lt;dbl&gt;                  &lt;dbl&gt;                  &lt;dbl&gt;\n1 FEMALE                     3369.                  3527.                  4680.\n2 MALE                       4043.                  3939.                  5485.\n3 &lt;NA&gt;                         NA                     NA                     NA \n# ℹ abbreviated names: ¹​`Adelie Penguin (Pygoscelis adeliae)`,\n#   ²​`Chinstrap penguin (Pygoscelis antarctica)`,\n#   ³​`Gentoo penguin (Pygoscelis papua)`"
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html#plot-a-histogram-of-body-mass-g-for-female-adelie-and-gentoo-penguins",
    "href": "chapters/05-WorkingWithData/r_penguins.html#plot-a-histogram-of-body-mass-g-for-female-adelie-and-gentoo-penguins",
    "title": "Working with data in R",
    "section": "plot a histogram of “Body Mass (g)” for female Adelie and Gentoo penguins",
    "text": "plot a histogram of “Body Mass (g)” for female Adelie and Gentoo penguins\n\npenguins |&gt;\n    filter(Species %in% c(\"Adelie Penguin (Pygoscelis adeliae)\", \"Gentoo penguin (Pygoscelis papua)\"), Sex == \"FEMALE\") |&gt;\n    ggplot(aes(x = `Body Mass (g)`)) +\n    geom_histogram(bins = 30) +\n    facet_wrap(~Species)"
  },
  {
    "objectID": "chapters/05-WorkingWithData/r_penguins.html#excel-files",
    "href": "chapters/05-WorkingWithData/r_penguins.html#excel-files",
    "title": "Working with data in R",
    "section": "excel files",
    "text": "excel files\nOne can also work with excel files. You need the readxl library.\n\nlibrary(\"readxl\")\n\nAs an example, we use an excel spreadsheet violent crime data from the FBI."
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra.html",
    "href": "chapters/06-LinearAlgebra/linear_algebra.html",
    "title": "Essential Linear Algebra",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Arrow\n\n\ndef make_plot(xmin, ymin, xmax, ymax):\n    fig, ax = plt.subplots()\n    ax.set_xlim(xmin, xmax)\n    ax.set_ylim(ymin, ymax)\n    ax.set_xticks(np.arange(xmin, xmax, 1))\n    ax.set_yticks(np.arange(ymin, ymax, 1))\n    ax.set_aspect(\"equal\")\n    ax.grid(visible=True)\n    return fig, ax\n\n\ndef draw_arrow(x0, y0, x1, y1, axes, color=\"blue\", alpha=1):\n    axes.add_patch(Arrow(x0, y0, x1 - x0, y1 - y0, width=0.3, color=color, alpha=alpha))\n    return axes"
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra.html#r-and-python",
    "href": "chapters/06-LinearAlgebra/linear_algebra.html#r-and-python",
    "title": "Essential Linear Algebra",
    "section": "R and Python",
    "text": "R and Python\nFor a look at linear algebra basics in R and Python, see:\n\nPython Linear Algebra\nR Linear Algebra"
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra.html#vectors-and-scalars",
    "href": "chapters/06-LinearAlgebra/linear_algebra.html#vectors-and-scalars",
    "title": "Essential Linear Algebra",
    "section": "Vectors and Scalars",
    "text": "Vectors and Scalars\n\\(\\mathbf{R}^{n}\\) is the set of vectors (ordered tuples) of real numbers of length \\(n\\). A scalar is a real number.\n\nVectors are added componentwise.\nA vector can be multiplied by a scalar."
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra.html#addition",
    "href": "chapters/06-LinearAlgebra/linear_algebra.html#addition",
    "title": "Essential Linear Algebra",
    "section": "Addition",
    "text": "Addition\n\nfig, ax = make_plot(0, 0, 12, 12)\nax.set_title(\"Vector Addition\")\nax = draw_arrow(0, 0, 3, 5, ax)\nax = draw_arrow(0, 0, 1, 4, ax)\nax = draw_arrow(1, 4, 4, 9, ax)\nax = draw_arrow(3, 5, 4, 9, ax)\nplt.show()"
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra.html#scalar-multiplication",
    "href": "chapters/06-LinearAlgebra/linear_algebra.html#scalar-multiplication",
    "title": "Essential Linear Algebra",
    "section": "Scalar Multiplication",
    "text": "Scalar Multiplication\n\nfig, ax = make_plot(0, 0, 12, 12)\nax.set_title(\"Scalar Multiplication\")\nax = draw_arrow(0, 0, 3, 5, ax)\nax = draw_arrow(0, 0, 6, 10, ax, color=\"red\", alpha=0.5)"
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra.html#geometric-interpretation-in-2-and-3-dimensions",
    "href": "chapters/06-LinearAlgebra/linear_algebra.html#geometric-interpretation-in-2-and-3-dimensions",
    "title": "Essential Linear Algebra",
    "section": "Geometric Interpretation in 2 and 3 dimensions",
    "text": "Geometric Interpretation in 2 and 3 dimensions"
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra.html#feature-space",
    "href": "chapters/06-LinearAlgebra/linear_algebra.html#feature-space",
    "title": "Essential Linear Algebra",
    "section": "Feature Space",
    "text": "Feature Space\nEach ‘dimension’ in feature space corresponds to a ‘feature’ or measurement of the data. Here we are assuming for now that the features are continuous and measured by real numbers.\nLet’s choose some numerical features of the penguins dataset.\n\ndata = pd.read_csv(\"data/penguins-raw.csv\")\ndata = (\n    data[\n        [\n            \"Culmen Length (mm)\",\n            \"Culmen Depth (mm)\",\n            \"Flipper Length (mm)\",\n            \"Body Mass (g)\",\n        ]\n    ]\n    .dropna()\n    .values\n)\n\nEach penguin is represented by a vector in \\(\\mathbf{R}^{4}\\). So for example penguin number 34 is represented as follows.\n\ndata[34, :]\n\narray([  39.2,   21.1,  196. , 4150. ])\n\n\nThis abstraction of penguins into vectors is sometimes called “an embedding”."
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra.html#features",
    "href": "chapters/06-LinearAlgebra/linear_algebra.html#features",
    "title": "Essential Linear Algebra",
    "section": "Features",
    "text": "Features\nWe can also look at a single feature for all of the penguins. For example, ‘Culmen Length (mm)’ is a feature and there is a vector in \\(\\mathbf{R}^{342}\\) consisting of all of the Culmen Lengths for all of the penguins.\nIn the tidy convention, we summarize our data in an array or matrix where each row corresponds to a sample and each column to a feature. So our penguin data has \\(342\\) rows (corresponding to the 342 penguins with no missing data) and 4 columns corresponding to four features."
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra.html#image-embeddings",
    "href": "chapters/06-LinearAlgebra/linear_algebra.html#image-embeddings",
    "title": "Essential Linear Algebra",
    "section": "Image Embeddings",
    "text": "Image Embeddings\nEach sample in the MNIST database is a \\(28x28\\) gray scale image, represented by a \\(28\\times 28\\) array of integers between 0 and 255.\n\nwith open(\"data/train-images.idx3-ubyte\", \"rb\") as f:\n    f.read(16)\n    buf = f.read(28 * 28)\n    data = np.frombuffer(buf, dtype=np.uint8).astype(np.float32)\n    data = data.reshape(1, 28, 28)\nfor x in range(28):\n    for y in range(28):\n        print(\"{:&gt;4}\".format(int(data[0, x, y])), end=\"\")\n    print(\"\\n\")\n\nimage = np.asarray(data[0].squeeze())\nplt.imshow(image)\n\n   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n\n   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n\n   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n\n   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n\n   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n\n   0   0   0   0   0   0   0   0   0   0   0   0   3  18  18  18 126 136 175  26 166 255 247 127   0   0   0   0\n\n   0   0   0   0   0   0   0   0  30  36  94 154 170 253 253 253 253 253 225 172 253 242 195  64   0   0   0   0\n\n   0   0   0   0   0   0   0  49 238 253 253 253 253 253 253 253 253 251  93  82  82  56  39   0   0   0   0   0\n\n   0   0   0   0   0   0   0  18 219 253 253 253 253 253 198 182 247 241   0   0   0   0   0   0   0   0   0   0\n\n   0   0   0   0   0   0   0   0  80 156 107 253 253 205  11   0  43 154   0   0   0   0   0   0   0   0   0   0\n\n   0   0   0   0   0   0   0   0   0  14   1 154 253  90   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n\n   0   0   0   0   0   0   0   0   0   0   0 139 253 190   2   0   0   0   0   0   0   0   0   0   0   0   0   0\n\n   0   0   0   0   0   0   0   0   0   0   0  11 190 253  70   0   0   0   0   0   0   0   0   0   0   0   0   0\n\n   0   0   0   0   0   0   0   0   0   0   0   0  35 241 225 160 108   1   0   0   0   0   0   0   0   0   0   0\n\n   0   0   0   0   0   0   0   0   0   0   0   0   0  81 240 253 253 119  25   0   0   0   0   0   0   0   0   0\n\n   0   0   0   0   0   0   0   0   0   0   0   0   0   0  45 186 253 253 150  27   0   0   0   0   0   0   0   0\n\n   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0  16  93 252 253 187   0   0   0   0   0   0   0   0\n\n   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 249 253 249  64   0   0   0   0   0   0   0\n\n   0   0   0   0   0   0   0   0   0   0   0   0   0   0  46 130 183 253 253 207   2   0   0   0   0   0   0   0\n\n   0   0   0   0   0   0   0   0   0   0   0   0  39 148 229 253 253 253 250 182   0   0   0   0   0   0   0   0\n\n   0   0   0   0   0   0   0   0   0   0  24 114 221 253 253 253 253 201  78   0   0   0   0   0   0   0   0   0\n\n   0   0   0   0   0   0   0   0  23  66 213 253 253 253 253 198  81   2   0   0   0   0   0   0   0   0   0   0\n\n   0   0   0   0   0   0  18 171 219 253 253 253 253 195  80   9   0   0   0   0   0   0   0   0   0   0   0   0\n\n   0   0   0   0  55 172 226 253 253 253 253 244 133  11   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n\n   0   0   0   0 136 253 253 253 212 135 132  16   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n\n   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n\n   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n\n   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n\n\n\n&lt;matplotlib.image.AxesImage at 0x1457df550&gt;\n\n\n\n\n\nHere we can view each image as a vector in a 784 dimensional (=28*28) space.\nA collection of 100 images would be represented by an array with 100 rows and 784 columns\nA 28x28 image in color has 28283 numbers to account for the RGB channels."
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra.html#one-hot-embedding",
    "href": "chapters/06-LinearAlgebra/linear_algebra.html#one-hot-embedding",
    "title": "Essential Linear Algebra",
    "section": "One Hot Embedding",
    "text": "One Hot Embedding\nNormally categorical variables don’t embed direcly into \\(\\mathbf{R}^{n}\\) but one can use “one-hot” embedding.\nSuppose our categorical vector has 4 levels: red, green, blue, orange.\nThe “one-hot” embedding uses four features, and each color corresponds to a vector with a one in the column corresponding to the color and zeros elsewhere.\n\n\n\nred\ngreen\nblue\norange\n\n\n\n\n1\n0\n0\n0\n\n\n0\n1\n0\n0\n\n\n0\n0\n1\n0\n\n\n0\n0\n0\n1\n\n\n\nSo to use one-hot encoding of our feature data, we’d add four columns to our data matrix."
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra.html#word-embeddings",
    "href": "chapters/06-LinearAlgebra/linear_algebra.html#word-embeddings",
    "title": "Essential Linear Algebra",
    "section": "Word embeddings",
    "text": "Word embeddings\nWord2vec is a technique developed by scientists at google that embeds a vocabulary into \\(\\mathbf{R}^{n}\\). Each of 3 million words has a 300 dimensional vector representing it.\nSee this google page."
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra.html#linear-combinations",
    "href": "chapters/06-LinearAlgebra/linear_algebra.html#linear-combinations",
    "title": "Essential Linear Algebra",
    "section": "Linear combinations",
    "text": "Linear combinations\nIf \\(v_1,\\ldots, v_k\\) are vectors in \\(\\mathbf{R}^{n}\\) then a weighted sum of the \\(v_{i}\\) is called a linear combination.\n\\[\nw = \\sum b_{i}v_{i}\n\\]\nSuppose our data is the performance of students on 2 homeworks, 1 midterm, and one final, all scored on a 100 points scale, with each homework worth 10% of the total, the midterm worth 25% and the final worth 55%. If there are 20 students our data is a \\(20 x 4\\) array with each row having the grades of a single student and each column having all the scores for a particular assignment.\nLet \\(v_1, v_2, v_3, v_4\\) be the four columns. Then the final score is the linear combination \\[\ns=.1v_1+.1v_2+.25v_3+.55v_4\n\\]\nThe vector \\(s\\), the score, is a linear combination of the features."
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra.html#linear-dependence-and-linear-independence",
    "href": "chapters/06-LinearAlgebra/linear_algebra.html#linear-dependence-and-linear-independence",
    "title": "Essential Linear Algebra",
    "section": "Linear Dependence and Linear Independence",
    "text": "Linear Dependence and Linear Independence\nIn the example above, the final score is a linear combination of the features. We say that the final score is dependent on the features. More generally, a collection of vectors is linearly dependent if there are constants, not all zero, so that\n\\[\nb_1v_1+...+b_kv_k=0.\n\\]\nIf they’re dependent, it means one of them can be written in terms of the other.\nIf they aren’t dependent, they are independent. This means that the only way you can get \\[\nb_1v_1+...+b_kv_k=0\n\\] is if all the constants are zero.\nNone of the vectors can be written in terms of the others.\nMathematically, dependence is an exact relationship."
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra.html#linear-relations-in-python",
    "href": "chapters/06-LinearAlgebra/linear_algebra.html#linear-relations-in-python",
    "title": "Essential Linear Algebra",
    "section": "Linear relations in python",
    "text": "Linear relations in python\n\nvectors = [np.random.uniform(size=8) for i in range(5)]  # 10 random vectors\nscalars = [np.random.normal() for i in range(5)]  # 10 random scalars\nprods = [scalars[i] * vectors[i] for i in range(5)]  # products\nresult = sum(prods)  # sum of products\nprint(result)\n\n[ 0.18527785 -0.43013598 -0.15687057 -0.54376556  0.72923098  0.34018484\n  0.33108924  0.03113495]"
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra.html#approximate-linear-dependence",
    "href": "chapters/06-LinearAlgebra/linear_algebra.html#approximate-linear-dependence",
    "title": "Essential Linear Algebra",
    "section": "Approximate linear dependence",
    "text": "Approximate linear dependence\nSometimes two features are “almost” linearly related.\nIn an old dataset about car models, with 398 types of cars and 9 features, two features are “miles per gallon” and “engine displacement”. If we look at mpg and displacement relative to their means by subtracting their averages values, we see that\nHere, miles per gallon (relative to its mean value) is roughly linearly dependent on displacement (relative to its mean). \\[\n\\mathrm{mpg}-\\overline{\\mathrm{mpg}} = -.0603(\\mathrm{disp}-\\overline{\\mathrm{disp}})\n\\]\nSo we don’t learn much new from ‘mpg’ that isn’t already in ‘displacement’.\n\nimport statsmodels.api as sm\n\nmpg = pd.read_csv(\"data/auto-mpg.csv\")\nx = mpg[\"displacement\"].values\nx = x - np.mean(x)\ny = mpg[\"mpg\"].values\ny = y - np.mean(y)\nx1 = sm.add_constant(x)\nmodel = sm.OLS(y, x1).fit()\nx0 = np.linspace(-100, 300, 10)\nx1 = sm.add_constant(x0)\npredictions = model.predict(x1)\nplt.scatter(x, y)\nplt.plot(x0, predictions, color=\"red\")\nplt.title(\"Miles per Gallon vs Engine Displacement\")\nplt.xlabel(\"Displacement\")\n\nText(0.5, 0, 'Displacement')\n\n\n\n\n\nLinear Regression (studied later) tries to capture this."
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra.html#span",
    "href": "chapters/06-LinearAlgebra/linear_algebra.html#span",
    "title": "Essential Linear Algebra",
    "section": "Span",
    "text": "Span\nThe span of a collection of vectors is the set of all linear combinations of those vectors."
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra.html#basis-and-dimension",
    "href": "chapters/06-LinearAlgebra/linear_algebra.html#basis-and-dimension",
    "title": "Essential Linear Algebra",
    "section": "Basis and dimension",
    "text": "Basis and dimension\nA basis is a linearly independent, spanning set. The number of elements in a basis is always the same; it is called the dimension of the vector space.\nThe dimension of \\(\\mathbf{R}^{n}\\) is \\(n\\) (the standard vectors are independent and span)."
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra.html#distances-and-the-euclidean-norm",
    "href": "chapters/06-LinearAlgebra/linear_algebra.html#distances-and-the-euclidean-norm",
    "title": "Essential Linear Algebra",
    "section": "Distances and the euclidean norm",
    "text": "Distances and the euclidean norm\nThe norm of a vector \\(v=(a_1,\\ldots, a_n)\\) is \\[\n\\|v\\| = (\\sum a_{i}^2)^{1/2}\n\\]\nIt is the “length” of the vector.\nThe Euclidean distance between two points \\(v\\) and \\(w\\) is \\[\n\\|v-w\\|\n\\]"
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra.html#mean-squared-error-in-vector-form",
    "href": "chapters/06-LinearAlgebra/linear_algebra.html#mean-squared-error-in-vector-form",
    "title": "Essential Linear Algebra",
    "section": "Mean Squared Error in vector form",
    "text": "Mean Squared Error in vector form\nRemember our example the “almost” dependence of mpg and displacement.\n\nmpg0 = mpg[\"mpg\"] - np.mean(mpg[\"mpg\"])\ndisp0 = mpg[\"displacement\"] - np.mean(mpg[\"displacement\"])\npredicted = -0.0603 * disp0\nplt.scatter(disp0, mpg0)\nplt.scatter(disp0, predicted)\nplt.title(\"MSE={:.2f}\".format(np.linalg.norm(mpg0 - predicted) / mpg0.shape[0]))\n\nText(0.5, 1.0, 'MSE=0.23')\n\n\n\n\n\nThe mean squared error is the squared distance between a true and predicted value, divided by the number of values."
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra.html#the-dot-product",
    "href": "chapters/06-LinearAlgebra/linear_algebra.html#the-dot-product",
    "title": "Essential Linear Algebra",
    "section": "The dot product",
    "text": "The dot product\nSuppose we have two vectors: \\[\\begin{aligned}\nv_1 & =[a_1,a_2,\\dots, a_n] \\\\\nv_2 &= [b_1,b_2,\\ldots, b_n]\n\\end{aligned}\n\\]\nThe “dot product” or “inner product” of these two vectors is: \\[\nv_1\\cdot v_2 = \\sum_{i=1}^{n} a_i b_i.\n\\]\nImportant: The dot product *converts two vectors into a scalar!"
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra.html#properties-of-the-dot-product",
    "href": "chapters/06-LinearAlgebra/linear_algebra.html#properties-of-the-dot-product",
    "title": "Essential Linear Algebra",
    "section": "Properties of the dot product",
    "text": "Properties of the dot product\n\n\\(v_1\\cdot v_1 = \\|v_1\\|^2\\)\n\\((av_1+bv_2)\\cdot v_3 = a(v_1\\cdot v_2) + b(v_2\\cdot v_2)\\)\n\\(v_1\\cdot v_2 = v_2 \\cdot v_1\\)."
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra.html#angles-and-cauchy-schwartz",
    "href": "chapters/06-LinearAlgebra/linear_algebra.html#angles-and-cauchy-schwartz",
    "title": "Essential Linear Algebra",
    "section": "Angles and Cauchy-Schwartz",
    "text": "Angles and Cauchy-Schwartz\nThe law of cosines: \\[\\|v_1\\|^2+\\|v_2\\|^2 - 2\\|v_1\\|\\|v_2\\|\\cos(\\theta) =\\|v_1-v_2\\|^2\\]\nmeans that\n\\[\nv_1\\cdot v_2 = \\|v_1\\|\\|v_2\\|\\cos(\\theta)\n\\tag{1}\\]\nIn particular:\n\\[|v_1\\cdot v_2|\\le \\|v_1\\|\\|v_2\\|\n\\tag{2}\\]\nThis says \\[\n|\\sum_{i=1}^{n} a_{i}b_{i}|^2\\le (\\sum_{i=1}^{n} a_{i}^2)(\\sum_{i=1}^{n} b_{i}^2)\n\\]\nEquation 2 is called the “Cauchy-Schwartz inequality.”"
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra.html#python",
    "href": "chapters/06-LinearAlgebra/linear_algebra.html#python",
    "title": "Essential Linear Algebra",
    "section": "Python",
    "text": "Python\n\nListing 1: Dot product computation\n# python\nv = np.array([1,2,3,4,5])\nw = np.array([2,4,6,8,10])\nprint('Entry by entry product = {}'.format(v*w))\nprint('Dot product = {}'.format(np.dot(v,w)))\n\nNote: In R, the symbol for dot product is %*%.\nIn Listing 1 we show how to compute the dot product in python."
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra.html#orthogonality",
    "href": "chapters/06-LinearAlgebra/linear_algebra.html#orthogonality",
    "title": "Essential Linear Algebra",
    "section": "Orthogonality",
    "text": "Orthogonality\nIf \\(v_1\\cdot v_2=0\\) then either one of \\(v_1\\) or \\(v_2\\) is zero, or the angle between then is 90 degrees.\nIn this case we saw the vectors are orthogonal."
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra.html#unit-vectors-and-projection",
    "href": "chapters/06-LinearAlgebra/linear_algebra.html#unit-vectors-and-projection",
    "title": "Essential Linear Algebra",
    "section": "Unit vectors and projection",
    "text": "Unit vectors and projection\nA vector \\(u\\) is a unit vector if \\(u\\cdot u=1\\).\nThe quantity \\(v\\cdot u\\) measures the projection of \\(v\\) into the direction given by \\(u\\)."
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra.html#variance-correlation-and-cosine-similarity",
    "href": "chapters/06-LinearAlgebra/linear_algebra.html#variance-correlation-and-cosine-similarity",
    "title": "Essential Linear Algebra",
    "section": "Variance, Correlation and cosine similarity",
    "text": "Variance, Correlation and cosine similarity\nIf \\(v\\) is a feature vector, let \\(\\overline{v}=\\frac{1}{n}\\sum_{i=1}^{n} v_{i}\\).\nNotice that \\(\\overline{v}=v\\cdot E\\) where \\(E\\) is the vector with \\(1/n\\) in each entry.\n\\[\n\\|(v-\\overline{v}E)\\|=\\sigma^{2}\n\\]"
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra.html#covariance",
    "href": "chapters/06-LinearAlgebra/linear_algebra.html#covariance",
    "title": "Essential Linear Algebra",
    "section": "Covariance",
    "text": "Covariance\nIf \\(v\\) and \\(w\\) are two vectors, their covariance is \\[\n\\sigma_{vw} = (v-\\overline{v}E)\\cdot (w-\\overline{w}E)\n\\]"
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra.html#correlation",
    "href": "chapters/06-LinearAlgebra/linear_algebra.html#correlation",
    "title": "Essential Linear Algebra",
    "section": "Correlation",
    "text": "Correlation\nThe correlation coefficient of \\(v\\) and \\(w\\) is \\[\nr_{vw}^2 = \\frac{\\sigma_{vw}}{\\sigma{v}\\sigma{w}}\n\\]\nIt measures the cosine of the angle between \\(v-\\overline{v}E\\) and \\(w-\\overline{w}E\\)."
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra.html#cosine-similarity",
    "href": "chapters/06-LinearAlgebra/linear_algebra.html#cosine-similarity",
    "title": "Essential Linear Algebra",
    "section": "Cosine similarity",
    "text": "Cosine similarity\nIn general,\n\\[\n\\cos(\\theta) = \\frac{v\\cdot w}{\\|v\\|\\|w\\|}\n\\] measures the angle between two feature vectors and is a measure of “similarity” between \\(0\\) and \\(1\\)."
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra.html#hyperplanes",
    "href": "chapters/06-LinearAlgebra/linear_algebra.html#hyperplanes",
    "title": "Essential Linear Algebra",
    "section": "Hyperplanes",
    "text": "Hyperplanes\nA (linear) hyperplane is a subspace of dimension \\(n-1\\) in a vector space of dimension \\(n\\). It is given by an equation of the form\n\\[\n\\sum a_{i}x_{i}=0.\n\\]\nGeometrically this can be written \\(v\\cdot x=0\\) where \\(v=[a_1,\\ldots, a_n]\\) and \\(x=[x_1,\\ldots, x_n]\\). The vector \\(v\\) is called the normal vector to the hyperplane.\nAn (affine) hyperplane is given by an equation of the form \\[\nv\\cdot x = b\n\\] for some constant \\(b\\)\n\nx = np.linspace(-5, 5, 10)\ny = 2 / 3 * x\nplt.plot(x, y)\nplt.grid(True)\nplt.gca().set_aspect(\"equal\")\n\nplt.plot([0, -2], [0, 3])\nplt.plot([-2, -2], [3, 2])\nplt.plot([-2, -1], [3, 2.6])\nplt.title(\"Hyperplane 2x-3y=0 with normal vector [-2,3]\")\n\nText(0.5, 1.0, 'Hyperplane 2x-3y=0 with normal vector [-2,3]')"
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra.html#affine-hyperplanes",
    "href": "chapters/06-LinearAlgebra/linear_algebra.html#affine-hyperplanes",
    "title": "Essential Linear Algebra",
    "section": "Affine hyperplanes",
    "text": "Affine hyperplanes\nFor fixed \\(v\\) and varying \\(b\\), the hyperplanes \\(v\\cdot x=b\\) form a parallel family."
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra.html#distance-from-a-point-to-a-hyperplane",
    "href": "chapters/06-LinearAlgebra/linear_algebra.html#distance-from-a-point-to-a-hyperplane",
    "title": "Essential Linear Algebra",
    "section": "Distance from a point to a hyperplane",
    "text": "Distance from a point to a hyperplane\nThe distance from a point \\(w\\) to the hyperplane \\(v\\cdot x = b\\) is \\[\nD = \\frac{w\\cdot v-b}{\\|v\\|}.\n\\]\nThis is the projection of the line from \\(w\\) to a point \\(x\\) on the hyperplane against the unit normal \\(\\frac{v}{\\|v\\|}\\).\n\\[\n(w-x)\\cdot\\frac{v}{\\|v\\|} =\\frac{(w\\cdot v -x\\cdot v)}{\\|v\\|} = \\frac{(w\\cdot v - b)}{\\|v\\|}\n\\]\n\nx = np.linspace(-4, 4, 10)\ny = 2 / 3 * x\nplt.plot(x, y)\nplt.grid(True)\nplt.gca().set_aspect(\"equal\")\nplt.title(\"Dist. from point to hyperplane\")\nplt.plot([0, -2 / np.sqrt(13)], [0, 3 / np.sqrt(13)], color=\"red\", linewidth=3)\nplt.plot([0, -2], [0, 3])\nplt.plot([-3, -2], [-2, 3])\nplt.text(-2.4, 3, r\"w\")\nplt.text(-3, -2.3, r\"x\")\nplt.text(-3.6, 0, r\"$\\|w-x\\|$\")\nplt.text(-1.9, 2.2, r\"$\\theta$\")\nplt.text(-0.5, 1.4, r\"$\\|w-x\\|\\cos(\\theta)$\")\n\nText(-0.5, 1.4, '$\\\\|w-x\\\\|\\\\cos(\\\\theta)$')"
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra.html#matrices",
    "href": "chapters/06-LinearAlgebra/linear_algebra.html#matrices",
    "title": "Essential Linear Algebra",
    "section": "Matrices",
    "text": "Matrices\nAn \\(n\\times m\\) matrix is an array of real numbers with \\(n\\) rows, \\(m\\) columns, and a total of \\(nm\\) entries."
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra.html#matrix-times-vector",
    "href": "chapters/06-LinearAlgebra/linear_algebra.html#matrix-times-vector",
    "title": "Essential Linear Algebra",
    "section": "Matrix times Vector",
    "text": "Matrix times Vector\nIf \\(M\\) is an \\(n\\times m\\) matrix and \\(v\\) is an \\(m\\times 1\\) vector (a column vector) then \\(Mv\\) is the \\(n\\times 1\\) column vector whose entries are \\[\nM[i,:]\\cdot v\n\\] where \\(i\\) runs from 1 to \\(n\\). Here \\(M[i,:]\\) is the \\(i^{th}\\) row of \\(M\\).\nIf \\(v\\) is a \\(1\\times n\\) row vector then \\(vM\\) is the \\(1\\times m\\) row vector whose entries are \\(v\\cdot M[:,i]\\) as \\(i\\) runs from 1 to \\(m\\)."
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra.html#matrix-times-vector-is-linear",
    "href": "chapters/06-LinearAlgebra/linear_algebra.html#matrix-times-vector-is-linear",
    "title": "Essential Linear Algebra",
    "section": "Matrix times vector is linear",
    "text": "Matrix times vector is linear\n\\[M(v+w) = Mv+Mw\\] \\[M(aw) = aMw\\]"
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra.html#matrix-times-standard-vector-gives-rowcolumn",
    "href": "chapters/06-LinearAlgebra/linear_algebra.html#matrix-times-standard-vector-gives-rowcolumn",
    "title": "Essential Linear Algebra",
    "section": "Matrix times standard vector gives row/column",
    "text": "Matrix times standard vector gives row/column\nIf \\(v\\) is a column vector with a a \\(1\\) in position \\(i\\) and zeros elsewhere, then \\(Mv\\) is the \\(i^{th}\\) column of \\(M\\).\nIf \\(v\\) is a row vector with a \\(1\\) in position \\(i\\) and zeros elsewhere, then \\(vM\\) is the \\(i^{th}\\) row of \\(M\\)."
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra.html#mvvm-gives-linear-combination-of-columnsrows",
    "href": "chapters/06-LinearAlgebra/linear_algebra.html#mvvm-gives-linear-combination-of-columnsrows",
    "title": "Essential Linear Algebra",
    "section": "\\(Mv\\)/\\(vM\\) gives linear combination of columns/rows",
    "text": "\\(Mv\\)/\\(vM\\) gives linear combination of columns/rows\n\\(Mv\\) is a linear combination of the columns of \\(M\\) weighted by the entries of \\(v\\).\n\\(vM\\) is a linear combination of the rows of \\(M\\) weighted by the entries of \\(v\\)."
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra.html#matrix-times-matrix",
    "href": "chapters/06-LinearAlgebra/linear_algebra.html#matrix-times-matrix",
    "title": "Essential Linear Algebra",
    "section": "Matrix times matrix",
    "text": "Matrix times matrix\nAn \\(n\\times m\\) matrix times an \\(m\\times k\\) matrix yields an \\(n\\times k\\) matrix.\nYou can view \\(MN\\) as \\(Mv\\) where \\(v\\) runs through the columns of \\(N\\). Each column has \\(n\\) rows.\n\\[\nMN=\\left[\n    \\begin{matrix}\n     M[0,:]N & M[1,:]N &\\cdots&M[m,:]N\\\\\n    \\end{matrix}\n    \\right]\n\\]\nOR you can view \\(MN\\) as \\(wN\\) where \\(w\\) runs through the rows of \\(M\\).\n\\[\nMN = \\left[\\begin{matrix} MN[:,0] \\\\ MN[:,1] \\\\\\vdots\\\\MN[:,k]\\end{matrix}\\right]\n\\]\nOR\nyou can view \\(MN\\) where the \\(i,j\\) entry of \\(MN\\) is the dot product of the \\(i^{th}\\) row of \\(M\\) with the \\(j^{th}\\) column of \\(N\\) (each of which has \\(m\\) entries).\n\\[(MN)_{ij} = M[i,:]\\cdot N[;,j]\\]"
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra.html#python-1",
    "href": "chapters/06-LinearAlgebra/linear_algebra.html#python-1",
    "title": "Essential Linear Algebra",
    "section": "Python",
    "text": "Python\nThe ‘@’ sign gives matrix multiplication in python. In R, it’s %*%.\n\nM = np.array([[1, 2, 3], [2, 3, 4], [3, 4, 5]])\nv = np.array([[-1], [0], [1]])\nprint(M)\nprint(v)\nprint(M @ v)\nprint(\"Compare -M[:,0]+M[:,2] with M@v\\n both are {}\".format(-M[:, 0] + M[:, 2]))\n\n[[1 2 3]\n [2 3 4]\n [3 4 5]]\n[[-1]\n [ 0]\n [ 1]]\n[[2]\n [2]\n [2]]\nCompare -M[:,0]+M[:,2] with M@v\n both are [2 2 2]"
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra.html#where-does-matrix-multiplication-come-from",
    "href": "chapters/06-LinearAlgebra/linear_algebra.html#where-does-matrix-multiplication-come-from",
    "title": "Essential Linear Algebra",
    "section": "Where does matrix multiplication come from?",
    "text": "Where does matrix multiplication come from?\nIf \\(v\\) is in \\(\\mathbf{R}^{m}\\) as a column vector, and \\(M\\) is an \\(n\\times m\\) matrix, then \\(Mv\\in\\mathbf{R}^{n}\\). So the function \\(v\\to Mv\\) is a function from \\(\\mathbf{R}^{m}\\to \\mathbf{R}^{m}\\).\nNow if \\(N\\) is a \\(k\\times n\\) matrix, then \\(NMv\\) is in \\(\\mathbf{R}^{k}\\).\nIf we want \\(N(Mv)=(NM)v\\) to be true then this forces the definition of matrix multiplication.\nThe Matrix Product gives composition of functions"
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra.html#transpose-of-a-matrix",
    "href": "chapters/06-LinearAlgebra/linear_algebra.html#transpose-of-a-matrix",
    "title": "Essential Linear Algebra",
    "section": "Transpose of a matrix",
    "text": "Transpose of a matrix\nThe transpose \\(M^{T}\\) of a matrix is the matrix obtained from \\(M\\) by switching rows and columns.\nThe transpose switches the order of a product.\n\\[(MN)^{T}=N^{T}M^{T}\\]"
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra.html#covariance-matrix",
    "href": "chapters/06-LinearAlgebra/linear_algebra.html#covariance-matrix",
    "title": "Essential Linear Algebra",
    "section": "Covariance Matrix",
    "text": "Covariance Matrix\nRemember that if \\(v\\) and \\(w\\) are feature vectors, then \\((v-\\overline{v})\\cdot (w-\\overline{w})\\) is the covariance of \\(v\\) and \\(w\\).\nSuppose \\(v_1,\\ldots, v_n\\) are features forming a data matrix \\(X\\).\nLet \\(X_{0}\\) be the matrix whose columns are \\(v_{i}-\\overline{v_{i}}\\).\nThen \\(\\frac{1}{N}X_{0}^{T}X_{0}\\) is \\(n\\times n\\) and called the covariance matrix.\nIf \\(Y_{0}\\) is obtained from \\(X_{0}\\) by dividing each column by its norm, then \\(Y_{0}^{T}Y_{0}\\) is the correlation matrix – ones on the diagonal, correlation coefficients off diagonal.\n\ndata = pd.read_csv(\"data/penguins-raw.csv\")\ndata = (\n    data[\n        [\n            \"Culmen Length (mm)\",\n            \"Culmen Depth (mm)\",\n            \"Flipper Length (mm)\",\n            \"Body Mass (g)\",\n        ]\n    ]\n    .dropna()\n    .values\n)\n# axis=0 means take the average of the columns (summarize over rows)\ndata.mean(axis=0)\n\n# \"center\" each column; scale column 3\ndata0 = data - data.mean(axis=0)\nprint(np.linalg.norm(data0, axis=0))\ndata0 = data0 / np.linalg.norm(data0, axis=0)\nD = data0.transpose() @ data0\nprint(D)\nplt.imshow(D, cmap=\"hot\", interpolation=\"nearest\")\nplt.title(\"covariance matrix heatmap\")\n\n[  100.81768459    36.46689639   259.66621062 14809.0410685 ]\n[[ 1.         -0.23505287  0.65618134  0.59510982]\n [-0.23505287  1.         -0.58385122 -0.47191562]\n [ 0.65618134 -0.58385122  1.          0.87120177]\n [ 0.59510982 -0.47191562  0.87120177  1.        ]]\n\n\nText(0.5, 1.0, 'covariance matrix heatmap')\n\n\n\n\n\n\nplt.scatter(x=data0[:, 2], y=data0[:, 3])\n\n&lt;matplotlib.collections.PathCollection at 0x1551b9050&gt;"
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra.html#rank-and-invertibility",
    "href": "chapters/06-LinearAlgebra/linear_algebra.html#rank-and-invertibility",
    "title": "Essential Linear Algebra",
    "section": "Rank and invertibility",
    "text": "Rank and invertibility\nThe column rank of a matrix is the dimension of the space spanned by its columns; this is the number of linearly independent columns.\nThe row rank is the number of linearly independent rows.\nTheorem: These two numbers are equal."
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra_python.html",
    "href": "chapters/06-LinearAlgebra/linear_algebra_python.html",
    "title": "Overview of linear algebra operations in python",
    "section": "",
    "text": "The numpy library is the main tool for linear algebra in python.\nimport numpy as np\nimport pandas as pd"
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra_python.html#creating-and-shaping-arrays",
    "href": "chapters/06-LinearAlgebra/linear_algebra_python.html#creating-and-shaping-arrays",
    "title": "Overview of linear algebra operations in python",
    "section": "Creating and shaping arrays",
    "text": "Creating and shaping arrays\n\nm = np.array([1, 2, 3, 4, 5, 6, 7, 8])\nprint(\"Array {} with shape {} (a row vector)\".format(m, m.shape))\nprint(\"Reshaped array to shape (2,4):\\n {}\".format(m.reshape((2, 4))))\nprint(\"Reshaped array to column vector:\\n {}\".format(m.reshape(8, 1)))\n\nArray [1 2 3 4 5 6 7 8] with shape (8,) (a row vector)\nReshaped array to shape (2,4):\n [[1 2 3 4]\n [5 6 7 8]]\nReshaped array to column vector:\n [[1]\n [2]\n [3]\n [4]\n [5]\n [6]\n [7]\n [8]]"
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra_python.html#some-special-arrays",
    "href": "chapters/06-LinearAlgebra/linear_algebra_python.html#some-special-arrays",
    "title": "Overview of linear algebra operations in python",
    "section": "Some special arrays",
    "text": "Some special arrays\n\none = np.ones(shape=(3, 4))\nprint(one)\nzero = np.zeros(shape=(3, 3))\nprint(zero)\nd = np.diag([1, 2, 3, 4])\nprint(d)\n\n[[1. 1. 1. 1.]\n [1. 1. 1. 1.]\n [1. 1. 1. 1.]]\n[[0. 0. 0.]\n [0. 0. 0.]\n [0. 0. 0.]]\n[[1 0 0 0]\n [0 2 0 0]\n [0 0 3 0]\n [0 0 0 4]]"
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra_python.html#addition-and-scalar-multiplication",
    "href": "chapters/06-LinearAlgebra/linear_algebra_python.html#addition-and-scalar-multiplication",
    "title": "Overview of linear algebra operations in python",
    "section": "Addition and scalar multiplication",
    "text": "Addition and scalar multiplication\n\nx = np.random.normal(size=(4,))\ny = np.random.normal(size=(4,))\nprint(x + y)\nu = np.random.normal(size=(2,))\ntry:\n    print(x + u)\nexcept:\n    print(\"Cant Mix These\")\n\n[-2.23492327 -0.42622013 -0.19966578 -0.86986687]\nCant Mix These"
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra_python.html#broadcasting",
    "href": "chapters/06-LinearAlgebra/linear_algebra_python.html#broadcasting",
    "title": "Overview of linear algebra operations in python",
    "section": "Broadcasting",
    "text": "Broadcasting\n\nx = np.array([[1, 2], [3, 4]])\nprint(\"x={}\".format(x))\nprint(\"x-1={}\".format(x - 1))\nz = np.array([1, 2])\nprint(\"z={}\".format(z))\nprint(\"x-z={}\".format(x - z))\nz = np.array([[3], [4]])\nprint(\"z={}\".format(z))\nprint(\"x-z={}\".format(x - z))\n\nx=[[1 2]\n [3 4]]\nx-1=[[0 1]\n [2 3]]\nz=[1 2]\nx-z=[[0 0]\n [2 2]]\nz=[[3]\n [4]]\nx-z=[[-2 -1]\n [-1  0]]"
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra_python.html#element-by-element",
    "href": "chapters/06-LinearAlgebra/linear_algebra_python.html#element-by-element",
    "title": "Overview of linear algebra operations in python",
    "section": "Element by Element",
    "text": "Element by Element\n\nx = np.array([[1, 2, 3], [2, 3, 4], [4, 5, 6]])\nprint(1 / x)\nprint(np.log(x))\n\n[[1.         0.5        0.33333333]\n [0.5        0.33333333 0.25      ]\n [0.25       0.2        0.16666667]]\n[[0.         0.69314718 1.09861229]\n [0.69314718 1.09861229 1.38629436]\n [1.38629436 1.60943791 1.79175947]]"
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra_python.html#multiplication",
    "href": "chapters/06-LinearAlgebra/linear_algebra_python.html#multiplication",
    "title": "Overview of linear algebra operations in python",
    "section": "Multiplication",
    "text": "Multiplication\n\nx = np.random.normal(size=(3, 4))\nprint(x)\ny = np.random.normal(size=(4, 1))\nprint(y)\nprint(x @ y)\n\n[[-0.45784285  0.47744274 -0.8723834  -2.50387104]\n [ 0.49408399  0.30969901  2.33541391 -0.65169834]\n [ 1.33679339  0.15295022  0.21707944  1.06446201]]\n[[ 1.80034642]\n [ 1.49312465]\n [-1.52944159]\n [ 0.79809264]]\n[[-0.77545581]\n [-2.74005323]\n [ 3.15259392]]"
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra_python.html#transpose",
    "href": "chapters/06-LinearAlgebra/linear_algebra_python.html#transpose",
    "title": "Overview of linear algebra operations in python",
    "section": "Transpose",
    "text": "Transpose\n\nx = np.array([[1, 2, 3], [2, 3, 4], [3, 4, 5]])\nprint(x)\nprint(x.transpose())\n\n[[1 2 3]\n [2 3 4]\n [3 4 5]]\n[[1 2 3]\n [2 3 4]\n [3 4 5]]"
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra_python.html#norm",
    "href": "chapters/06-LinearAlgebra/linear_algebra_python.html#norm",
    "title": "Overview of linear algebra operations in python",
    "section": "Norm",
    "text": "Norm\n\nx = np.array([[1, 2], [3, 4]])\nprint(x)\ny = np.linalg.norm(x)\nprint(y)\ny = np.linalg.norm(x, axis=0)\nprint(\"axis=0 yields row norms: {}\".format(y))\ny = np.linalg.norm(x, axis=1)\nprint(\"axis=1 yields column norms: {}\".format(y))\n\n[[1 2]\n [3 4]]\n5.477225575051661\naxis=0 yields row norms: [3.16227766 4.47213595]\naxis=1 yields column norms: [2.23606798 5.        ]"
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra_python.html#dataframes-and-matrices",
    "href": "chapters/06-LinearAlgebra/linear_algebra_python.html#dataframes-and-matrices",
    "title": "Overview of linear algebra operations in python",
    "section": "Dataframes and matrices",
    "text": "Dataframes and matrices\n\ndata = pd.read_csv(\"data/penguins-raw.csv\")\nprint(data[[\"Body Mass (g)\"]])\nprint(data[[\"Body Mass (g)\"]].values)\n\n     Body Mass (g)\n0           3750.0\n1           3800.0\n2           3250.0\n3              NaN\n4           3450.0\n..             ...\n339         4000.0\n340         3400.0\n341         3775.0\n342         4100.0\n343         3775.0\n\n[344 rows x 1 columns]\n[[3750.]\n [3800.]\n [3250.]\n [  nan]\n [3450.]\n [3650.]\n [3625.]\n [4675.]\n [3475.]\n [4250.]\n [3300.]\n [3700.]\n [3200.]\n [3800.]\n [4400.]\n [3700.]\n [3450.]\n [4500.]\n [3325.]\n [4200.]\n [3400.]\n [3600.]\n [3800.]\n [3950.]\n [3800.]\n [3800.]\n [3550.]\n [3200.]\n [3150.]\n [3950.]\n [3250.]\n [3900.]\n [3300.]\n [3900.]\n [3325.]\n [4150.]\n [3950.]\n [3550.]\n [3300.]\n [4650.]\n [3150.]\n [3900.]\n [3100.]\n [4400.]\n [3000.]\n [4600.]\n [3425.]\n [2975.]\n [3450.]\n [4150.]\n [3500.]\n [4300.]\n [3450.]\n [4050.]\n [2900.]\n [3700.]\n [3550.]\n [3800.]\n [2850.]\n [3750.]\n [3150.]\n [4400.]\n [3600.]\n [4050.]\n [2850.]\n [3950.]\n [3350.]\n [4100.]\n [3050.]\n [4450.]\n [3600.]\n [3900.]\n [3550.]\n [4150.]\n [3700.]\n [4250.]\n [3700.]\n [3900.]\n [3550.]\n [4000.]\n [3200.]\n [4700.]\n [3800.]\n [4200.]\n [3350.]\n [3550.]\n [3800.]\n [3500.]\n [3950.]\n [3600.]\n [3550.]\n [4300.]\n [3400.]\n [4450.]\n [3300.]\n [4300.]\n [3700.]\n [4350.]\n [2900.]\n [4100.]\n [3725.]\n [4725.]\n [3075.]\n [4250.]\n [2925.]\n [3550.]\n [3750.]\n [3900.]\n [3175.]\n [4775.]\n [3825.]\n [4600.]\n [3200.]\n [4275.]\n [3900.]\n [4075.]\n [2900.]\n [3775.]\n [3350.]\n [3325.]\n [3150.]\n [3500.]\n [3450.]\n [3875.]\n [3050.]\n [4000.]\n [3275.]\n [4300.]\n [3050.]\n [4000.]\n [3325.]\n [3500.]\n [3500.]\n [4475.]\n [3425.]\n [3900.]\n [3175.]\n [3975.]\n [3400.]\n [4250.]\n [3400.]\n [3475.]\n [3050.]\n [3725.]\n [3000.]\n [3650.]\n [4250.]\n [3475.]\n [3450.]\n [3750.]\n [3700.]\n [4000.]\n [4500.]\n [5700.]\n [4450.]\n [5700.]\n [5400.]\n [4550.]\n [4800.]\n [5200.]\n [4400.]\n [5150.]\n [4650.]\n [5550.]\n [4650.]\n [5850.]\n [4200.]\n [5850.]\n [4150.]\n [6300.]\n [4800.]\n [5350.]\n [5700.]\n [5000.]\n [4400.]\n [5050.]\n [5000.]\n [5100.]\n [4100.]\n [5650.]\n [4600.]\n [5550.]\n [5250.]\n [4700.]\n [5050.]\n [6050.]\n [5150.]\n [5400.]\n [4950.]\n [5250.]\n [4350.]\n [5350.]\n [3950.]\n [5700.]\n [4300.]\n [4750.]\n [5550.]\n [4900.]\n [4200.]\n [5400.]\n [5100.]\n [5300.]\n [4850.]\n [5300.]\n [4400.]\n [5000.]\n [4900.]\n [5050.]\n [4300.]\n [5000.]\n [4450.]\n [5550.]\n [4200.]\n [5300.]\n [4400.]\n [5650.]\n [4700.]\n [5700.]\n [4650.]\n [5800.]\n [4700.]\n [5550.]\n [4750.]\n [5000.]\n [5100.]\n [5200.]\n [4700.]\n [5800.]\n [4600.]\n [6000.]\n [4750.]\n [5950.]\n [4625.]\n [5450.]\n [4725.]\n [5350.]\n [4750.]\n [5600.]\n [4600.]\n [5300.]\n [4875.]\n [5550.]\n [4950.]\n [5400.]\n [4750.]\n [5650.]\n [4850.]\n [5200.]\n [4925.]\n [4875.]\n [4625.]\n [5250.]\n [4850.]\n [5600.]\n [4975.]\n [5500.]\n [4725.]\n [5500.]\n [4700.]\n [5500.]\n [4575.]\n [5500.]\n [5000.]\n [5950.]\n [4650.]\n [5500.]\n [4375.]\n [5850.]\n [4875.]\n [6000.]\n [4925.]\n [  nan]\n [4850.]\n [5750.]\n [5200.]\n [5400.]\n [3500.]\n [3900.]\n [3650.]\n [3525.]\n [3725.]\n [3950.]\n [3250.]\n [3750.]\n [4150.]\n [3700.]\n [3800.]\n [3775.]\n [3700.]\n [4050.]\n [3575.]\n [4050.]\n [3300.]\n [3700.]\n [3450.]\n [4400.]\n [3600.]\n [3400.]\n [2900.]\n [3800.]\n [3300.]\n [4150.]\n [3400.]\n [3800.]\n [3700.]\n [4550.]\n [3200.]\n [4300.]\n [3350.]\n [4100.]\n [3600.]\n [3900.]\n [3850.]\n [4800.]\n [2700.]\n [4500.]\n [3950.]\n [3650.]\n [3550.]\n [3500.]\n [3675.]\n [4450.]\n [3400.]\n [4300.]\n [3250.]\n [3675.]\n [3325.]\n [3950.]\n [3600.]\n [4050.]\n [3350.]\n [3450.]\n [3250.]\n [4050.]\n [3800.]\n [3525.]\n [3950.]\n [3650.]\n [3650.]\n [4000.]\n [3400.]\n [3775.]\n [4100.]\n [3775.]]"
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra_python.html#datatypes",
    "href": "chapters/06-LinearAlgebra/linear_algebra_python.html#datatypes",
    "title": "Overview of linear algebra operations in python",
    "section": "Datatypes",
    "text": "Datatypes\n\nx = np.array([[1, 2, 3], [2, 3, 4]], dtype=int)\nprint(x)\ny = np.array([[1, 2, 3], [2, 3, 4]], dtype=float)\nprint(y)\nprint(x + y)\n\n[[1 2 3]\n [2 3 4]]\n[[1. 2. 3.]\n [2. 3. 4.]]\n[[2. 4. 6.]\n [4. 6. 8.]]"
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra_r.html#creating-matrices",
    "href": "chapters/06-LinearAlgebra/linear_algebra_r.html#creating-matrices",
    "title": "Fundamentals of Machine Learning",
    "section": "Creating matrices",
    "text": "Creating matrices\n\nm &lt;- matrix(c(1, 2, 3, 4, 5, 6, 7, 8), nrow = 1)\nn &lt;- matrix(c(1, 2, 3, 4, 5, 6, 7, 8), nrow = 2)\nprint(m)\n\n     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]\n[1,]    1    2    3    4    5    6    7    8\n\nprint(n)\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    3    5    7\n[2,]    2    4    6    8"
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra_r.html#reshaping-and-broadcasting",
    "href": "chapters/06-LinearAlgebra/linear_algebra_r.html#reshaping-and-broadcasting",
    "title": "Fundamentals of Machine Learning",
    "section": "Reshaping and broadcasting",
    "text": "Reshaping and broadcasting\n\nm &lt;- matrix(1:8)\nprint(m)\n\n     [,1]\n[1,]    1\n[2,]    2\n[3,]    3\n[4,]    4\n[5,]    5\n[6,]    6\n[7,]    7\n[8,]    8\n\nm &lt;- matrix(m, nrow = 2)\nprint(m)\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    3    5    7\n[2,]    2    4    6    8\n\nm &lt;- matrix(m, ncol = 2)\nprint(m)\n\n     [,1] [,2]\n[1,]    1    5\n[2,]    2    6\n[3,]    3    7\n[4,]    4    8\n\n# note that R repeats things if they fit\nm &lt;- matrix(c(1, 2), ncol = 10)\nprint(m)\n\n     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]\n[1,]    1    2    1    2    1    2    1    2    1     2"
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra_r.html#special-matrices",
    "href": "chapters/06-LinearAlgebra/linear_algebra_r.html#special-matrices",
    "title": "Fundamentals of Machine Learning",
    "section": "Special matrices",
    "text": "Special matrices\n\none &lt;- matrix(1, nrow = 2, ncol = 3)\nprint(one)\n\n     [,1] [,2] [,3]\n[1,]    1    1    1\n[2,]    1    1    1\n\nzero &lt;- matrix(0, nrow = 2, ncol = 3)\nprint(zero)\n\n     [,1] [,2] [,3]\n[1,]    0    0    0\n[2,]    0    0    0\n\nd &lt;- diag(c(1, 2, 3, 4, 5))\nprint(d)\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    0    0    0    0\n[2,]    0    2    0    0    0\n[3,]    0    0    3    0    0\n[4,]    0    0    0    4    0\n[5,]    0    0    0    0    5"
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra_r.html#addition-and-scalar-multiplication",
    "href": "chapters/06-LinearAlgebra/linear_algebra_r.html#addition-and-scalar-multiplication",
    "title": "Fundamentals of Machine Learning",
    "section": "Addition and scalar multiplication",
    "text": "Addition and scalar multiplication\n\nx &lt;- rnorm(4)\ny &lt;- rnorm(4)\nprint(x + y)\n\n[1]  1.216647  2.725915 -1.298336  1.074431\n\n# note that in R this makes sense\nu &lt;- rnorm(2)\nprint(x + u)\n\n[1] 2.1200559 1.2262603 2.3748433 0.4811315"
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra_r.html#element-by-element",
    "href": "chapters/06-LinearAlgebra/linear_algebra_r.html#element-by-element",
    "title": "Fundamentals of Machine Learning",
    "section": "Element by element",
    "text": "Element by element\n\nu = matrix(rnorm(20), ncol = 4)\nv = matrix(rnorm(20), ncol = 4)\nprint(u + v)\n\n          [,1]      [,2]       [,3]         [,4]\n[1,] -3.186565 -1.260810 -0.1553059  1.143387571\n[2,] -1.431713 -1.659286 -1.1532921  0.248313198\n[3,] -2.076270  0.983122 -0.7076893  0.730946223\n[4,] -0.993149  1.670223  0.3028872 -0.925443781\n[5,] -1.158276  1.521980 -0.6954782 -0.004167275\n\nprint(u)\n\n            [,1]       [,2]        [,3]          [,4]\n[1,] -0.62567019 -0.3414062  1.13546426 -0.5325242870\n[2,] -0.98569282 -1.4252494 -0.05949371  1.1109648282\n[3,] -0.02088589 -0.4157639 -1.42559180  0.4430799253\n[4,] -0.24480470  1.2777992  0.52970357  0.2711733775\n[5,] -0.04913448  1.7486336 -1.71932953  0.0006992849\n\nprint(1 / u)\n\n           [,1]       [,2]        [,3]         [,4]\n[1,]  -1.598286 -2.9290623   0.8806970   -1.8778486\n[2,]  -1.014515 -0.7016316 -16.8084989    0.9001185\n[3,] -47.879220 -2.4052112  -0.7014631    2.2569292\n[4,]  -4.084889  0.7825956   1.8878483    3.6876776\n[5,] -20.352306  0.5718751  -0.5816221 1430.0323975\n\nprint(log(abs(u)))\n\n            [,1]       [,2]       [,3]       [,4]\n[1,] -0.46893189 -1.0746823  0.1270416 -0.6301268\n[2,] -0.01441051  0.3543468 -2.8218846  0.1052289\n[3,] -3.86868160 -0.8776377  0.3545870 -0.8140051\n[4,] -1.40729452  0.2451392 -0.6354377 -1.3049969\n[5,] -3.01319420  0.5588347  0.5419344 -7.2654524"
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra_r.html#slices-using-apply",
    "href": "chapters/06-LinearAlgebra/linear_algebra_r.html#slices-using-apply",
    "title": "Fundamentals of Machine Learning",
    "section": "Slices using apply",
    "text": "Slices using apply\n\nu = matrix(rnorm(20), ncol = 4)\nprint(colMeans(u))\n\n[1]  0.3801581 -0.1898176 -0.3230691  0.4231319\n\nprint(rowMeans(u))\n\n[1] -0.23495453  0.20954714  0.78901931 -0.03268172 -0.36792617\n\napply(u, 1, function(x) mean(x))\n\n[1] -0.23495453  0.20954714  0.78901931 -0.03268172 -0.36792617\n\napply(u, 2, function(x) var(x))\n\n[1] 0.9079908 0.2241471 0.5068262 0.2760094"
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra_r.html#multiplication",
    "href": "chapters/06-LinearAlgebra/linear_algebra_r.html#multiplication",
    "title": "Fundamentals of Machine Learning",
    "section": "Multiplication",
    "text": "Multiplication\n\nx = matrix(rnorm(12), nrow = 3)\ny = matrix(rnorm(15), ncol = 3)\nprint(y %*% x)\n\n            [,1]        [,2]        [,3]       [,4]\n[1,]  0.46676934 -2.77187396  1.47277235 -3.2066976\n[2,] -0.07203253  0.16389927 -0.16228511 -0.6793228\n[3,] -0.55514649 -0.04189816 -0.17037407 -0.4284706\n[4,]  0.51905134  0.42021954 -0.05692835  0.3847446\n[5,] -5.80952629 -0.57498309 -1.42642075 -0.5751049"
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra_r.html#transpose",
    "href": "chapters/06-LinearAlgebra/linear_algebra_r.html#transpose",
    "title": "Fundamentals of Machine Learning",
    "section": "Transpose",
    "text": "Transpose\n\nx = matrix(rnorm(12), nrow = 3)\nprint(t(x))\n\n           [,1]       [,2]        [,3]\n[1,]  1.0227351  0.6153002 -0.02011024\n[2,]  0.0421658 -0.4932516  0.80478679\n[3,] -0.8505073  0.1266555  0.55195020\n[4,]  0.5069073  0.6829402  0.02203289\n\nprint(nrow(t(x)))\n\n[1] 4"
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra_r.html#norm",
    "href": "chapters/06-LinearAlgebra/linear_algebra_r.html#norm",
    "title": "Fundamentals of Machine Learning",
    "section": "Norm",
    "text": "Norm\n\nx = matrix(c(1, 2, 3, 4), nrow = 2)\nnorm(x, type = \"2\")\n\n[1] 5.464986\n\napply(x, 2, function(x) norm(x, type = \"2\"))\n\n[1] 2.236068 5.000000\n\napply(x, 1, function(x) norm(x, type = \"2\"))\n\n[1] 3.162278 4.472136"
  },
  {
    "objectID": "chapters/06-LinearAlgebra/linear_algebra_r.html#dataframes-and-arrays",
    "href": "chapters/06-LinearAlgebra/linear_algebra_r.html#dataframes-and-arrays",
    "title": "Fundamentals of Machine Learning",
    "section": "Dataframes and arrays",
    "text": "Dataframes and arrays\nUse the “[[]]” or as.vector to convert tibbles to vectors.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.1     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\ndata = read_csv(\"data/penguins-raw.csv\")\n\nRows: 344 Columns: 17\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (9): studyName, Species, Region, Island, Stage, Individual ID, Clutch C...\ndbl  (7): Sample Number, Culmen Length (mm), Culmen Depth (mm), Flipper Leng...\ndate (1): Date Egg\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nmass &lt;- data |&gt; select(\"Body Mass (g)\")\nprint(mass)\n\n# A tibble: 344 × 1\n   `Body Mass (g)`\n             &lt;dbl&gt;\n 1            3750\n 2            3800\n 3            3250\n 4              NA\n 5            3450\n 6            3650\n 7            3625\n 8            4675\n 9            3475\n10            4250\n# ℹ 334 more rows\n\nprint(as.vector(mass))\n\n$`Body Mass (g)`\n  [1] 3750 3800 3250   NA 3450 3650 3625 4675 3475 4250 3300 3700 3200 3800 4400\n [16] 3700 3450 4500 3325 4200 3400 3600 3800 3950 3800 3800 3550 3200 3150 3950\n [31] 3250 3900 3300 3900 3325 4150 3950 3550 3300 4650 3150 3900 3100 4400 3000\n [46] 4600 3425 2975 3450 4150 3500 4300 3450 4050 2900 3700 3550 3800 2850 3750\n [61] 3150 4400 3600 4050 2850 3950 3350 4100 3050 4450 3600 3900 3550 4150 3700\n [76] 4250 3700 3900 3550 4000 3200 4700 3800 4200 3350 3550 3800 3500 3950 3600\n [91] 3550 4300 3400 4450 3300 4300 3700 4350 2900 4100 3725 4725 3075 4250 2925\n[106] 3550 3750 3900 3175 4775 3825 4600 3200 4275 3900 4075 2900 3775 3350 3325\n[121] 3150 3500 3450 3875 3050 4000 3275 4300 3050 4000 3325 3500 3500 4475 3425\n[136] 3900 3175 3975 3400 4250 3400 3475 3050 3725 3000 3650 4250 3475 3450 3750\n[151] 3700 4000 4500 5700 4450 5700 5400 4550 4800 5200 4400 5150 4650 5550 4650\n[166] 5850 4200 5850 4150 6300 4800 5350 5700 5000 4400 5050 5000 5100 4100 5650\n[181] 4600 5550 5250 4700 5050 6050 5150 5400 4950 5250 4350 5350 3950 5700 4300\n[196] 4750 5550 4900 4200 5400 5100 5300 4850 5300 4400 5000 4900 5050 4300 5000\n[211] 4450 5550 4200 5300 4400 5650 4700 5700 4650 5800 4700 5550 4750 5000 5100\n[226] 5200 4700 5800 4600 6000 4750 5950 4625 5450 4725 5350 4750 5600 4600 5300\n[241] 4875 5550 4950 5400 4750 5650 4850 5200 4925 4875 4625 5250 4850 5600 4975\n[256] 5500 4725 5500 4700 5500 4575 5500 5000 5950 4650 5500 4375 5850 4875 6000\n[271] 4925   NA 4850 5750 5200 5400 3500 3900 3650 3525 3725 3950 3250 3750 4150\n[286] 3700 3800 3775 3700 4050 3575 4050 3300 3700 3450 4400 3600 3400 2900 3800\n[301] 3300 4150 3400 3800 3700 4550 3200 4300 3350 4100 3600 3900 3850 4800 2700\n[316] 4500 3950 3650 3550 3500 3675 4450 3400 4300 3250 3675 3325 3950 3600 4050\n[331] 3350 3450 3250 4050 3800 3525 3950 3650 3650 4000 3400 3775 4100 3775\n\n\nprint(data[“Body Mass (g)”]) print(data[[‘Body Mass (g)’]])"
  },
  {
    "objectID": "chapters/07-Calculus/calculus.html",
    "href": "chapters/07-Calculus/calculus.html",
    "title": "Key ideas from calculus",
    "section": "",
    "text": "import numpy as np\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-v0_8-dark')"
  },
  {
    "objectID": "chapters/07-Calculus/calculus.html#why-calculus-in-data-science",
    "href": "chapters/07-Calculus/calculus.html#why-calculus-in-data-science",
    "title": "Key ideas from calculus",
    "section": "Why Calculus in data science?",
    "text": "Why Calculus in data science?\nThe central application of calculus in data science is in the problem of “optimization.” ML algorithms generally ask for the “best fit” of something, and the “best fit” usually means finding the parameters where a measure of error, a loss function, is as small as possible.\n(Differential) calculus is the most powerful tool we have for finding the minimal (or maximum) values of functions.\nCalculus also plays a key role in Probability and Statistics, because questions about probability in continuous settings relies on the idea of an integral."
  },
  {
    "objectID": "chapters/07-Calculus/calculus.html#one-variable-differential-calculus",
    "href": "chapters/07-Calculus/calculus.html#one-variable-differential-calculus",
    "title": "Key ideas from calculus",
    "section": "One-variable differential calculus",
    "text": "One-variable differential calculus\n\nSimple function with one input variable and one output variable\nDerivative measures rate of change of output with respect to input\nFamous formula: given a function \\(f:\\mathbf{R}\\to\\mathbf{R}\\), the derivative is defined by \\[\nf'(x) = \\lim_{h\\to 0}\\frac{f(x+h)-f(x)}{h}\n\\]"
  },
  {
    "objectID": "chapters/07-Calculus/calculus.html#interpretations-of-the-derivative",
    "href": "chapters/07-Calculus/calculus.html#interpretations-of-the-derivative",
    "title": "Key ideas from calculus",
    "section": "Interpretations of the derivative",
    "text": "Interpretations of the derivative\n\n“Slope of the curve”\n“Rate of change”\n\n\nx=np.linspace(0,1, 100)\ny=x**3*(1-x)**5\nplt.plot(x,y)\n1m = (y[41]-y[40])/.01\n2ytan = y[40]+m*(x-x[40])\nplt.grid()\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('$x^3(1-x)^5$ with tangent line at $x=.4$')\nim = plt.plot(x,ytan)\n\n\n1\n\nHere we compute the (approximate) slope/derivative m at the point (x[40],y[40])\n\n2\n\nThis is the equation of the line through that point with the computed slope.\n\n\n\n\n\n\n\nKey facts:\n\nDerivative is positive means function is increasing\nDerivative is negative means function is decreasing\nDerivative is zero means a critical point, often a local maximum or local minimum."
  },
  {
    "objectID": "chapters/07-Calculus/calculus.html#an-example",
    "href": "chapters/07-Calculus/calculus.html#an-example",
    "title": "Key ideas from calculus",
    "section": "An example",
    "text": "An example\n\nfig, axes = plt.subplots(1, 2, sharey=\"row\")\nfig.set_size_inches(8, 4)\n# ----\nx = np.linspace(0, 1, 100)\ny = x**3 * (1 - x) ** 5\naxes[0].plot(x, y)\nt1 = axes[0].set_title(r\"$f(x)=x^3(1-x)^5$\")\naxes[0].grid()\n# ----\n1yprime = (y[1:] - y[:-1]) / 0.01\naxes[1].plot(x[1:], yprime)\naxes[1].grid()\nt2 = axes[1].set_title(r\"$f'(x)$\")\n\n\n1\n\nThe array y has the y values corresponding to the x values in the array x. So the difference y[1:]-y[:-1] is \\(f(x+h)-f(x)\\). Since there are 100 x values between 0 and 1, \\(h=.01\\)."
  },
  {
    "objectID": "chapters/07-Calculus/calculus.html#some-key-reminders-from-differential-calculus",
    "href": "chapters/07-Calculus/calculus.html#some-key-reminders-from-differential-calculus",
    "title": "Key ideas from calculus",
    "section": "Some key reminders from differential calculus",
    "text": "Some key reminders from differential calculus\n\nThe derivative is linear, so the derivative of a sum is the sum of the derivatives and the derivative \\((af(x))'\\) is \\(af'(x)\\).\nThe derivative of a constant is zero.\nThe derivative of \\(x^{n}\\) is \\(nx^{n-1}\\).\n\nThe derivative of \\(e^{x}\\) is \\(e^{x}\\).\nThe derivative of \\(\\log(x)\\) is \\(1/x\\) (natural logarithm)."
  },
  {
    "objectID": "chapters/07-Calculus/calculus.html#notation",
    "href": "chapters/07-Calculus/calculus.html#notation",
    "title": "Key ideas from calculus",
    "section": "Notation",
    "text": "Notation\nSometimes we write \\(f'(x)\\), sometimes \\(\\frac{df}{dx}\\)."
  },
  {
    "objectID": "chapters/07-Calculus/calculus.html#the-product-rule",
    "href": "chapters/07-Calculus/calculus.html#the-product-rule",
    "title": "Key ideas from calculus",
    "section": "The product rule",
    "text": "The product rule\nThe derivative of a product of functions \\(fg\\) satisfies the product rule \\[\n(fg)'=fg'+f'g\n\\]"
  },
  {
    "objectID": "chapters/07-Calculus/calculus.html#the-chain-rule",
    "href": "chapters/07-Calculus/calculus.html#the-chain-rule",
    "title": "Key ideas from calculus",
    "section": "The chain rule",
    "text": "The chain rule\nThe chain rule is a key fact from one variable calculus. Its simple form is\n\\[\n\\frac{d}{dt}f(x+th)|_{t=0}=hf'(x)\n\\]\nand more generally\n\\[\n\\frac{d}{dx}(f(g(x))) = f'(g(x))g'(x)\n\\]"
  },
  {
    "objectID": "chapters/07-Calculus/calculus.html#functions-of-several-variables",
    "href": "chapters/07-Calculus/calculus.html#functions-of-several-variables",
    "title": "Key ideas from calculus",
    "section": "Functions of several variables",
    "text": "Functions of several variables\nIn data science, we generally want to look at functions that depend on many variables, rather than just one.\nFor example, let us consider the problem of finding the line of best fit to a collection of points \\((x,y)\\).\nFirst we generate some random data to work with.\n\nx=np.linspace(0,5,20)\n1y=3*x+1+np.random.normal(0,2,size=x.shape[0])\nplt.scatter(x,y)\nplt.grid()\nplt.title(\"$y=3+1+\\epsilon$ where $\\epsilon$ is a normal error\")\n\n\n1\n\nHere we find \\(y=3x+1+\\epsilon\\) where \\(\\epsilon\\) is drawn from a normal random variable with standard deviation \\(2\\).\n\n\n\n\nText(0.5, 1.0, '$y=3+1+\\\\epsilon$ where $\\\\epsilon$ is a normal error')\n\n\n\n\n\nThe line of best fit has the equation \\(y=mx+b\\) where \\(m\\) and \\(b\\) are the unknowns. The “error” is \\[\nE(m,b) = \\frac{1}{N}\\sum_{i=1}^{N} (y_i-mx_i-b)^2\n\\]\nThe \\(x_i\\) and \\(y_i\\) are the data, and \\(m\\) and \\(b\\) are the things we want to find. So this is a function of two variables.\nIt is a (possibly very big) quadratic function of \\(m\\) and \\(b\\).\nBut in more general regression problems we may have many slopes \\(m_{i}\\) so our error depends on many variables.\nIn neural networks there may be billions of parameters."
  },
  {
    "objectID": "chapters/07-Calculus/calculus.html#visualization-of-functions-of-two-variables",
    "href": "chapters/07-Calculus/calculus.html#visualization-of-functions-of-two-variables",
    "title": "Key ideas from calculus",
    "section": "Visualization of functions of two variables",
    "text": "Visualization of functions of two variables\nContour plots are a way to represent a function of two variables. For example suppose \\(f(x,y)=3x^2+2xy+5y^22\\).\n\nfig,ax = plt.subplots()\nx=np.linspace(-3,3,40)\ny=np.linspace(-3,3,40)\n1ax.set_aspect('equal')\n2xx,yy = np.meshgrid(x,y)\nz = 3*xx**2+2*xx*yy+5*yy**2\nax.contour(xx,yy,z)\nax.grid()\n\n\n1\n\nWhy do you need this?\n\n2\n\nmeshgrid changes two one-dimensional arrays into two two dimensional arrays - examine them to see what happens.\n\n\n\n\n\n\n\n\nfrom scipy.stats import norm\nfig,ax = plt.subplots()\nx=np.linspace(-10,10,50)\ny=np.linspace(-10,10,50)\nxx,yy = np.meshgrid(x,y)\nz = 3*norm.pdf(np.sqrt((xx-2)**2+(xx-2)*(yy-3)+(yy-3)**2))-5*norm.pdf(np.sqrt((xx+3)**2+(yy+1)**2))\nP=ax.contourf(xx,yy,z,levels=10)\nQ=ax.contour(xx,yy,z,levels=np.linspace(-1,1,19),colors='black')\nt=ax.clabel(Q,inline=True,fontsize=5)\nt=ax.set_title(\"Contour Plot of sum of two Gaussians\")"
  },
  {
    "objectID": "chapters/07-Calculus/calculus.html#plotting-in-3d",
    "href": "chapters/07-Calculus/calculus.html#plotting-in-3d",
    "title": "Key ideas from calculus",
    "section": "Plotting in 3d",
    "text": "Plotting in 3d\nGenerally 3d plots aren’t that useful, but sometimes you just really want one.\n\nfrom mpl_toolkits.mplot3d import Axes3D\n\nfig = plt.figure()\nfig.set_size_inches(20,10)\nax = fig.add_subplot(211,projection='3d')\nx = np.linspace(-5,5,30)\ny = np.linspace(-5,5,30)\nxx,yy = np.meshgrid(x,y)\nz = norm.pdf(np.sqrt(xx**2+yy**2))\nax.plot_wireframe(xx,yy,z,cmap='gray')\nax = fig.add_subplot(212)\nQ=ax.contour(xx,yy,z)\nax.clabel(Q)\nax.set_aspect('equal')\n\n\n\n\n\nfig = plt.figure()\nfig.set_size_inches(20,10)\nax = fig.add_subplot(211,projection='3d')\nx = np.linspace(-5,5,30)\ny = np.linspace(-5,5,30)\nxx,yy = np.meshgrid(x,y)\nz = xx**2-yy**2\nax.plot_wireframe(xx,yy,z,cmap='gray')\nax = fig.add_subplot(212)\nQ=ax.contour(xx,yy,z,levels=10)\nax.clabel(Q)\nax.set_aspect('equal')\nax.grid()"
  },
  {
    "objectID": "chapters/07-Calculus/calculus.html#vectors-and-functions",
    "href": "chapters/07-Calculus/calculus.html#vectors-and-functions",
    "title": "Key ideas from calculus",
    "section": "Vectors and functions",
    "text": "Vectors and functions\nIt’s useful to think of a function of multiple variables \\(x_1,\\ldots, x_n\\) as a function of a vector \\(\\mathbf{x}=(x_1,\\ldots, x_n)\\).\nIf \\(x_0\\) is a point in \\(\\mathbf{R}^{n}\\) (thought of as a vector) and \\(v\\) is another vector, then the points \\[\n\\ell(t) = x_0+tv\n\\]\ntrace out a line as \\(t\\) varies.\nFor example if \\(x_0=(1,1)\\) and \\(v=(-2,3)\\) then \\[\n\\ell(t) = (1-2t,2+3t)\n\\]\n\n1x = np.array([1,1]).reshape(2,1)\nv = np.array([-2,3]).reshape(2,1)\nt=np.arange(-5,5,1)\npts = x+t*v\nplt.grid()\nplt.plot(pts[0,:],pts[1,:],color='black')\nplt.plot([1],[1],marker=\"*\",markersize=12,color='red')\nplt.arrow(1,1,-2,3,color='blue',width=.4)\nplt.scatter(pts[0,:],pts[1,:])\nplt.title(\"Vector form of a line from (1,1) towards v=(-2,3)\")\nplt.xlabel('x')\n_=plt.ylabel('y')\n\n\n1\n\nTo see why x and v need to be column vectors, try this without the reshape and look at the error you get.\n\n\n\n\n\n\n\nIn this version, the vector \\(v\\) represents the velocity of a point travelling along the line. So the dots are the position of the object at different times \\(t\\).\nIf we scale \\(v\\) by a constant:\n\nthe line stays the same\nthe speed is different\n\nThe speed is \\(\\|v\\|\\)."
  },
  {
    "objectID": "chapters/07-Calculus/calculus.html#directional-derivatives",
    "href": "chapters/07-Calculus/calculus.html#directional-derivatives",
    "title": "Key ideas from calculus",
    "section": "Directional Derivatives",
    "text": "Directional Derivatives\nFor a function of multiple variables, the directional derivative is the rate of change in a particular direction.\n\\[\nD_{v}(f)(\\mathbf{x}) = \\frac{d}{dt}f(\\mathbf{x}+t\\mathbf{v})|_{t=0}\n\\]\nThis means: how fast is \\(f\\) at time zero as you travel through space in a straight line with velocity \\(v\\) passing through point \\(x\\).\nDepends on direction and magnitude of \\(v\\).\nSuppose that \\(f(\\overline{x})=x_1^2-x_0^2\\), that \\(\\mathbf{x}=(1,1)\\) and that \\(v=(-.4,.6)\\) Then\n\\[\n\\mathbf{x}+t\\mathbf{v} = (1-.4t,1+.6t)\n\\]\nand \\[\nf(\\mathbf{x}+t\\mathbf{v}) = (1-.4t)^2-(1+.6t)^2\n\\]\n\nfig = plt.figure()\nfig.set_size_inches(20,10)\nax = fig.add_subplot(211)\nax.set_title('contour plot with path')\nx = np.linspace(-5,5,30)\ny = np.linspace(-5,5,30)\nxx,yy = np.meshgrid(x,y)\nz = xx**2-yy**2\nQ=ax.contour(xx,yy,z,levels=10)\nax.clabel(Q)\nax.set_aspect('equal')\nax.grid()\n\nx = np.array([1,1]).reshape(2,1) \nv = np.array([-.4,.6]).reshape(2,1)\nt=np.arange(-10,10,1)\npts = x+t*v\nax.set_xlim((-5,5))\nax.set_ylim((-5,5))\nax.plot(pts[0,:],pts[1,:],color='black')\nax.plot([1],[1],marker=\"*\",markersize=12,color='red')\nax.arrow(1,1,-.4,.6,color='blue',width=.2)\nax.scatter(pts[0,:],pts[1,:])\n\nax1 = fig.add_subplot(212)\nax1.set_aspect('equal')\nax1.set_xticks(np.arange(-10,11,4))\nax1.set_title('Height vs time along path')\nht = -(1+0.6*t)**2+(1-0.4*t)**2\nax1.plot(np.arange(-10,10,1),ht)\nax1.plot([0],[0],marker='*',markersize=10)\nax1.grid()"
  },
  {
    "objectID": "chapters/07-Calculus/calculus.html#partial-derivatives",
    "href": "chapters/07-Calculus/calculus.html#partial-derivatives",
    "title": "Key ideas from calculus",
    "section": "Partial Derivatives",
    "text": "Partial Derivatives\nThe partial derivatives of a function are the special cases of the directional derivative in the direction of coordinate axes.\nSo if \\(f\\) is a function of \\(\\mathbf{x}=(x_0,\\ldots, x_{n-1})\\) and if \\(\\mathbf{e}_{i}\\) is the vector \\[\ne_{i} = (0,0,\\ldots,0,1,0,\\ldots, 0)\n\\] where the \\(1\\) is in the \\(i^{th}\\) position, then \\[\n\\frac{\\partial f}{\\partial x_{i}}=D_{e_{i}}f.\n\\]\nYou can compute the partial derivatives using calculus rules where you treat all of the variables except \\(x_{i}\\) as constants."
  },
  {
    "objectID": "chapters/07-Calculus/calculus.html#the-vector-chain-rule",
    "href": "chapters/07-Calculus/calculus.html#the-vector-chain-rule",
    "title": "Key ideas from calculus",
    "section": "The vector chain rule",
    "text": "The vector chain rule\nThe vector chain rule says that \\[\n\\frac{d}{dt}f(x_1(t),x_2(t),\\ldots, x_n(t))=\\frac{\\partial f}{\\partial x_1}\\frac{d x_1}{d t}+\\frac{\\partial f}{\\partial x_2}\\frac{d x_2}{d t}+\\cdots+\\frac{\\partial f}{\\partial x_n}\\frac{d x_n}{d t}\n\\]\nHere \\((x_1(t),\\ldots,x_n(t))\\) can be thought of as a path where the \\(x_i\\) vary with time \\(t\\)."
  },
  {
    "objectID": "chapters/07-Calculus/calculus.html#the-gradient",
    "href": "chapters/07-Calculus/calculus.html#the-gradient",
    "title": "Key ideas from calculus",
    "section": "The gradient",
    "text": "The gradient\nSuppose that \\(f\\) is a function of variables \\(x_1,\\ldots, x_n\\). The gradient of \\(f\\), written \\(\\nabla f\\), is a vector valued function where\n\\[\n\\nabla f (x) = \\left[\\begin{matrix} \\frac{\\partial f}{\\partial x_0} & \\frac{\\partial f}{\\partial x_1} & \\cdots & \\frac{\\partial f}{\\partial x_n} \\end{matrix}\\right]\n\\]\nThe gradient of \\(f\\) gives a vector at each point."
  },
  {
    "objectID": "chapters/07-Calculus/calculus.html#key-property-of-the-gradient",
    "href": "chapters/07-Calculus/calculus.html#key-property-of-the-gradient",
    "title": "Key ideas from calculus",
    "section": "Key property of the gradient",
    "text": "Key property of the gradient\nTheorem: If \\(v\\) is any vector, then the directional derivative \\(D_{v}(f)=\\nabla f \\cdot v\\). As a result of this fact:\n\nThe gradient points in the direction where \\(f\\) increases most rapidly.\n\\(-\\nabla f\\) points in the direction where \\(f\\) decreases most rapidly.\nThe gradient is perpendicular to the contour lines of the function.\nThe gradient is zero at local minima and maxima of a function (but possibly also at other places)\n\nThese facts follow from the chain rule and properties of the dot product.\nFirst of all, \\[\nD_{v}(f)(\\mathbf{x}) = \\frac{d}{dt}f(\\mathbf{x}+t\\mathbf{v})=f(x_1+tv_1,x_2+tv_2,\\ldots, x_n+tv_n)|_{t=0}\n\\]\nFrom the vector chain rule this is the same as\n\\[\nD_{v}(f)(\\mathbf{x}) = \\frac{\\partial f}{\\partial x_1}v_1+\\frac{\\partial f}{\\partial x_2}v_2+\\cdots+\\frac{\\partial f}{\\partial x_n}v_{n}|_{t=0}\n\\] which is\n\\[\n(\\nabla f)(\\mathbf{x})\\cdot \\mathbf{v}.\n\\]\nBut the dot product satisfies\n\\[\n(\\nabla f)(\\mathbf{x})\\cdot \\mathbf{v} = \\|(\\nabla f)(\\mathbf{x})\\|\\|v\\|\\cos(\\theta)\n\\]\nwhere \\(\\theta\\) is the angle between the gradient and the vector \\(v\\). This is maximum when \\(\\theta=0\\), and minimum when \\(\\theta=\\pi\\).\nTo see the significance of this, check out this page.."
  },
  {
    "objectID": "chapters/07-Calculus/calculus.html#functions-from-mathbfrm-to-mathbfrn-and-their-derivatives",
    "href": "chapters/07-Calculus/calculus.html#functions-from-mathbfrm-to-mathbfrn-and-their-derivatives",
    "title": "Key ideas from calculus",
    "section": "Functions from \\(\\mathbf{R}^{m}\\) to \\(\\mathbf{R}^{n}\\) and their derivatives",
    "text": "Functions from \\(\\mathbf{R}^{m}\\) to \\(\\mathbf{R}^{n}\\) and their derivatives\nThe most general situation we might want to consider is a function that converts a point in \\(\\mathbf{R}^{m}\\) to a point in \\(\\mathbf{R}^{n}\\):\n\\[\nF:\\mathbf{R}^{m}\\to \\mathbf{R}^{n}\n\\]\nHere is an example. Suppose we have \\(28\\times 28\\) images represented as arrays of pixel values. And suppose that we know that this image is a handwritten number between \\(0\\) and \\(9\\).\nAn image recognition neural network takes such an image an outputs a vector of length \\(10\\) of the form \\((p_0,\\ldots, p_{9})\\) where \\(p_i\\) is the probability that the image represents the digit \\(i\\).\nThis neural network is a function \\(F:\\mathbf{R}^{784}\\to \\mathbf{R}^{10}\\).\nSuch a function is actually given by \\(10\\) (or, more generally, \\(n\\)) “coordinate functions” \\(f_{i}\\), each of which is a function of \\(m\\) variables. So the neural network function \\(F\\) consists of functions \\[\np_{i} = F_{i}(x_0,\\ldots, x_{783})\\quad i=0,\\ldots, 9\n\\]\nEach of these functions has a gradient which measures how \\(p_{i}\\) changes if you modify the \\(x_i\\). The total derivative of \\(F\\) is made up of all of these gradients. You can think of this as a column vector of row vectors: \\[\nDF = \\left[\\begin{matrix} \\nabla F_{0} \\\\ \\nabla F_{1} \\\\  \\cdots \\\\ \\nabla F_{n}\\end{matrix}\\right]\n\\]\nwhere each \\(\\nabla F_{i}\\) is a row with \\(m\\) entries.\nBut this is really a matrix called the total derivative \\(DF\\) of \\(F\\) of size \\(n\\times m\\).\nThe total derivative tells us how a small step in \\(\\mathbf{R}^{m}\\) translates to a step in \\(\\mathbf{R}^{m}\\) when you apply the function \\(F:\\mathbf{R}^{m}\\to mathbf{R}^{n}\\)."
  },
  {
    "objectID": "chapters/07-Calculus/calculus.html#linear-functions",
    "href": "chapters/07-Calculus/calculus.html#linear-functions",
    "title": "Key ideas from calculus",
    "section": "Linear functions",
    "text": "Linear functions\nA very special case of a function from \\(F:\\mathbf{R}^{m}\\to mathbf{R}^{n}\\) is the situation where \\[\nF(x) = Ax\n\\] for an \\(n\\times m\\) matrix.\nIn this special case, the total derivative \\(DF\\) of \\(F\\) is the matrix \\(A\\)."
  },
  {
    "objectID": "chapters/07-Calculus/calculus.html#the-chain-rule-in-the-general-case",
    "href": "chapters/07-Calculus/calculus.html#the-chain-rule-in-the-general-case",
    "title": "Key ideas from calculus",
    "section": "The chain rule in the general case",
    "text": "The chain rule in the general case\nIf \\(F:\\mathbf{R}^{m}\\to\\mathbf{R}^{n}\\) is a function, and \\(G:\\mathbf{R}^{n}\\to\\mathbf{R}^{k}\\) is another function, then it makes sense to compute \\(G(F(x))\\) for \\(x\\in \\mathbf{R}^{m}\\), and the result is in \\(\\mathbf{R}^{k}\\).\nThe chain rule in general says that the derivative of \\(G(F(x))\\) is the product of the matrices corresponding to \\(DG\\) and \\(DF\\). Here \\(DG\\) is \\(k\\times n\\) and \\(DF\\) is \\(n\\times m\\) so \\((DG)(DF)\\) is \\(k\\times m\\) as it should be."
  },
  {
    "objectID": "chapters/99-Resources/Cheatsheets.html",
    "href": "chapters/99-Resources/Cheatsheets.html",
    "title": "Cheatsheets and other References",
    "section": "",
    "text": "This is a compilation of resources from various sites on the web.\n\n\nFrom the pandas home page.\n\npandas cheatsheet\n\n\n\n\nThanks to the matplotlib home page.\n\nbeginner cheatsheet\nintermediate cheatsheet\ntip sheet\ncomplete (front)\ncomplete (back)\nstyles\n\n\n\n\nSeaborn is a fancier interface to matplotlib that offers high quality statistical plots of various types.\n\nseaborn cheatsheet\n\n\n\n\nFrom the posit home page\n\nbase r cheatsheet\ntidyverse cheatsheet\nr markdown cheatsheet\n\n\n\n\nFrom the posit home page\n\nggplot cheatsheet\n\n\n\n\nFrom the vscode home page\n\nwindows keybindings\nmac keybindings\nlinux keybindings\n\n\n\n\n\nMarkdown Cheat Sheet"
  },
  {
    "objectID": "chapters/99-Resources/Cheatsheets.html#cheatsheets",
    "href": "chapters/99-Resources/Cheatsheets.html#cheatsheets",
    "title": "Cheatsheets and other References",
    "section": "",
    "text": "This is a compilation of resources from various sites on the web.\n\n\nFrom the pandas home page.\n\npandas cheatsheet\n\n\n\n\nThanks to the matplotlib home page.\n\nbeginner cheatsheet\nintermediate cheatsheet\ntip sheet\ncomplete (front)\ncomplete (back)\nstyles\n\n\n\n\nSeaborn is a fancier interface to matplotlib that offers high quality statistical plots of various types.\n\nseaborn cheatsheet\n\n\n\n\nFrom the posit home page\n\nbase r cheatsheet\ntidyverse cheatsheet\nr markdown cheatsheet\n\n\n\n\nFrom the posit home page\n\nggplot cheatsheet\n\n\n\n\nFrom the vscode home page\n\nwindows keybindings\nmac keybindings\nlinux keybindings\n\n\n\n\n\nMarkdown Cheat Sheet"
  },
  {
    "objectID": "chapters/999-Problems/Distributions.html",
    "href": "chapters/999-Problems/Distributions.html",
    "title": "Supplement to Class Sep. 1, 2023",
    "section": "",
    "text": "As I mentioned in class, every probability distribution in R comes with 4 functions. In the case of the binomial distribution, they are:\n\nrbinom – draws random samples\ndbinom – computes the probability distribution\npbinom – gives the cumulative distribution\nqbinom – gives the quantile function\n\nAlso, we need ggplot2.\n\nlibrary(ggplot2)\n\nExamples\n\nSuppose that the probability of heads is .3 and we flip a coin 15 times. What’s the chance of getting 6 heads?\n\n\np&lt;-dbinom(6,15,.3)\ncat(\"The chance is \",p)\n\nThe chance is  0.147236\n\n\n\nLet’s find the probabilities of each number of heads.\n\n\nxs&lt;-seq(0,10) # x holds 0,1,...,10\nfs&lt;-dbinom(xs,10,.3)\nprint(fs)\n\n [1] 0.0282475249 0.1210608210 0.2334744405 0.2668279320 0.2001209490\n [6] 0.1029193452 0.0367569090 0.0090016920 0.0014467005 0.0001377810\n[11] 0.0000059049\n\n\n\nLet’s plot this. We’ll use ggplot. This is a very simple use of ggplot to make a bar chart. We’ll talk about ggplot more comprehensively later. For now, you can use this as a “black box”. In the part that says aes(x=?,y=?) you put the data for the x and y coordinates. The scale_x_continous(break=?) says where to put the x-ticks. The xlab(\"?\") labels the x-axis. The ylab labels the y-axis.\n\n\nggplot()+geom_col(aes(x=xs,y=fs))+scale_x_continuous(breaks=seq(0,10))+xlab(\"Number of Heads\")+ylab(\"Probability\")\n\n\n\n\n\nLet’s sample this distribution. We’ll flip a coin with p=.3 10 times, and we’ll repeat this experiment 100 times, counting how many heads we get each repetition.\n\n\nheads &lt;- rbinom(100,10,.3)\nheads\n\n  [1] 4 2 3 4 3 4 5 5 2 3 4 5 5 2 3 4 5 3 0 5 4 5 3 2 3 2 1 4 3 3 3 3 5 1 2 3 1\n [38] 0 6 5 2 5 5 4 3 1 3 2 5 0 5 3 2 5 0 5 4 1 0 6 4 1 4 0 4 5 4 5 1 3 5 1 2 1\n [75] 2 3 4 4 5 3 5 1 3 5 6 3 3 1 3 3 1 3 2 1 3 3 1 1 5 4\n\n\nNow let’s make a histogram. Again, here is a “black box” command for ggplot. Again, you put the data in aes(x=?) and you put the location for the x-ticks in scale_x_continous(breaks=?).\n\nggplot()+geom_histogram(aes(x=heads),stat='count')+scale_x_continuous(breaks=seq(0,10))+xlab(\"Number of Heads\")+ylab(\"Count\")\n\nWarning in geom_histogram(aes(x = heads), stat = \"count\"): Ignoring unknown\nparameters: `binwidth`, `bins`, and `pad`\n\n\n\n\n\n\nSuppose we flip the coin 80 times (and p=.3). What’s the chance of getting between 20 and 40 heads? This is what pbinom is for. pbinom(40,80,.3) is the chance of getting fewer than or equal to 40 heads. If we want 20 to 40 inclusive we need to look at pbinom(41,80,.3).\n\n\nchance&lt;-pbinom(40,80,.3)-pbinom(19,80,.3)\ncat(\"Chance  of between 40 and 20 inclusive is \",chance)\n\nChance  of between 40 and 20 inclusive is  0.86472\n\n\n\nAmong the number of heads in 100 flips of a coin with .3, what’s the 25th percentile for the number of heads? That’s what qbinom is for.\n\n\ntwentyFifth&lt;-qbinom(.25,100,.3)\npaste(\"The 25th percentile is \",twentyFifth)\n\n[1] \"The 25th percentile is  27\"\n\n\nLet’s check.\n\ncheck&lt;-pbinom(twentyFifth,100,.3)\ncheck\n\n[1] 0.2963662\n\n\nThis says that the chance of fewer than 27 heads is actually a bit more than .25 but the chance of fewer than 26 heads is less than .25.\n\nAn experiment\n\nLet’s sample from the binomial 10000 times and look at the 25th percentile.\n\ndata&lt;-rbinom(10000,100,.3)\nt1&lt;-sum(data&lt;twentyFifth)\nt2&lt;-sum(data&lt;twentyFifth+1)\ncat(\"Number less than \",twentyFifth, \"is \",t1,\"\\n\")\n\nNumber less than  27 is  2266 \n\ncat(\"Number less than \",twentyFifth+1,\"is\",t2)\n\nNumber less than  28 is 3012\n\n\nThese numbers show that the 25th percentile (2500 heads) is somewhere between these two values."
  },
  {
    "objectID": "chapters/999-Problems/Distributions.html#things-i-did-in-class-on-friday-september-1.",
    "href": "chapters/999-Problems/Distributions.html#things-i-did-in-class-on-friday-september-1.",
    "title": "Supplement to Class Sep. 1, 2023",
    "section": "",
    "text": "As I mentioned in class, every probability distribution in R comes with 4 functions. In the case of the binomial distribution, they are:\n\nrbinom – draws random samples\ndbinom – computes the probability distribution\npbinom – gives the cumulative distribution\nqbinom – gives the quantile function\n\nAlso, we need ggplot2.\n\nlibrary(ggplot2)\n\nExamples\n\nSuppose that the probability of heads is .3 and we flip a coin 15 times. What’s the chance of getting 6 heads?\n\n\np&lt;-dbinom(6,15,.3)\ncat(\"The chance is \",p)\n\nThe chance is  0.147236\n\n\n\nLet’s find the probabilities of each number of heads.\n\n\nxs&lt;-seq(0,10) # x holds 0,1,...,10\nfs&lt;-dbinom(xs,10,.3)\nprint(fs)\n\n [1] 0.0282475249 0.1210608210 0.2334744405 0.2668279320 0.2001209490\n [6] 0.1029193452 0.0367569090 0.0090016920 0.0014467005 0.0001377810\n[11] 0.0000059049\n\n\n\nLet’s plot this. We’ll use ggplot. This is a very simple use of ggplot to make a bar chart. We’ll talk about ggplot more comprehensively later. For now, you can use this as a “black box”. In the part that says aes(x=?,y=?) you put the data for the x and y coordinates. The scale_x_continous(break=?) says where to put the x-ticks. The xlab(\"?\") labels the x-axis. The ylab labels the y-axis.\n\n\nggplot()+geom_col(aes(x=xs,y=fs))+scale_x_continuous(breaks=seq(0,10))+xlab(\"Number of Heads\")+ylab(\"Probability\")\n\n\n\n\n\nLet’s sample this distribution. We’ll flip a coin with p=.3 10 times, and we’ll repeat this experiment 100 times, counting how many heads we get each repetition.\n\n\nheads &lt;- rbinom(100,10,.3)\nheads\n\n  [1] 4 2 3 4 3 4 5 5 2 3 4 5 5 2 3 4 5 3 0 5 4 5 3 2 3 2 1 4 3 3 3 3 5 1 2 3 1\n [38] 0 6 5 2 5 5 4 3 1 3 2 5 0 5 3 2 5 0 5 4 1 0 6 4 1 4 0 4 5 4 5 1 3 5 1 2 1\n [75] 2 3 4 4 5 3 5 1 3 5 6 3 3 1 3 3 1 3 2 1 3 3 1 1 5 4\n\n\nNow let’s make a histogram. Again, here is a “black box” command for ggplot. Again, you put the data in aes(x=?) and you put the location for the x-ticks in scale_x_continous(breaks=?).\n\nggplot()+geom_histogram(aes(x=heads),stat='count')+scale_x_continuous(breaks=seq(0,10))+xlab(\"Number of Heads\")+ylab(\"Count\")\n\nWarning in geom_histogram(aes(x = heads), stat = \"count\"): Ignoring unknown\nparameters: `binwidth`, `bins`, and `pad`\n\n\n\n\n\n\nSuppose we flip the coin 80 times (and p=.3). What’s the chance of getting between 20 and 40 heads? This is what pbinom is for. pbinom(40,80,.3) is the chance of getting fewer than or equal to 40 heads. If we want 20 to 40 inclusive we need to look at pbinom(41,80,.3).\n\n\nchance&lt;-pbinom(40,80,.3)-pbinom(19,80,.3)\ncat(\"Chance  of between 40 and 20 inclusive is \",chance)\n\nChance  of between 40 and 20 inclusive is  0.86472\n\n\n\nAmong the number of heads in 100 flips of a coin with .3, what’s the 25th percentile for the number of heads? That’s what qbinom is for.\n\n\ntwentyFifth&lt;-qbinom(.25,100,.3)\npaste(\"The 25th percentile is \",twentyFifth)\n\n[1] \"The 25th percentile is  27\"\n\n\nLet’s check.\n\ncheck&lt;-pbinom(twentyFifth,100,.3)\ncheck\n\n[1] 0.2963662\n\n\nThis says that the chance of fewer than 27 heads is actually a bit more than .25 but the chance of fewer than 26 heads is less than .25.\n\nAn experiment\n\nLet’s sample from the binomial 10000 times and look at the 25th percentile.\n\ndata&lt;-rbinom(10000,100,.3)\nt1&lt;-sum(data&lt;twentyFifth)\nt2&lt;-sum(data&lt;twentyFifth+1)\ncat(\"Number less than \",twentyFifth, \"is \",t1,\"\\n\")\n\nNumber less than  27 is  2266 \n\ncat(\"Number less than \",twentyFifth+1,\"is\",t2)\n\nNumber less than  28 is 3012\n\n\nThese numbers show that the 25th percentile (2500 heads) is somewhere between these two values."
  },
  {
    "objectID": "chapters/999-Problems/Distributions.html#practice",
    "href": "chapters/999-Problems/Distributions.html#practice",
    "title": "Supplement to Class Sep. 1, 2023",
    "section": "Practice",
    "text": "Practice\n\nLet X be a binomial random variable with n=50 and p=.7.\n\n\n\nDraw 1000 samples from X. How many of your sampled values are less than 30?\nBased on the probability distribution, how many sampled values would you expect to see that are less than 30?\nPlot a histogram of your sampled values.\n\n\nThe poisson distribution is a discrete probability distribution that arises in queuing theory (and many other places). For example, imagine that customers arrive at a server at a rate so that, in a typical one hour period, 20 customers come. But the intervals between customers are random and independent of one another. Then in a randomly chosen hour, the probability of k customers arriving is dpois(k,20).\n\n\n\nSample this distribution 1000 times (hint: use rpois). What is the largest number of people who arrive in an one of these random hours? What is the smallest?\nSuppose you want to design your system so that it can handle the number of arriving customers 95% of the time. How many people should you design for? (Hint: use qpois).\nWhat’s the chance that between 18 and 22 people arrive in a given hour? (Hint: use ppois).\nPlot the Poisson distribution probabilities. (Hint: use dpois)."
  },
  {
    "objectID": "chapters/999-Problems/HW1.html",
    "href": "chapters/999-Problems/HW1.html",
    "title": "Homework One",
    "section": "",
    "text": "This assignment is due Sunday, September 10th by midnight. Please submit it using HuskyCT. Follow the instructions below.\n\nCreate a project directory named Homework_One, and inside it create a subdirectory called python.\nIn the python directory, create a jupyter notebook named Homework_One.ipynb.\nUsing a markdown cell, add text at the beginning of your notebook that yields text following this template:\nHeader: First Homework Assignment for Grad 5100\nText: Submitted by [your name] on [the date]\nTopic: Some features of the python language.\n\n(Hint: you can get the word python formatted this way by using backticks: `python`) 3. Using a code cell, create the following variables:\n\nfirst_name = # your first name (a string)\nlast_name = # your last name (a string)\nyear = # current year, an integer\nstates = # a list of strings containing the names of the New England states (look them up)\n\nWorking in code cells, complete the following\n\nfirst_name_345 = first_name[] # fill in the [] to extract the third, fourth, and fifth letters of your first name (note this could be an empty string, or shorter than three letters)\nprint() # complete the print statement to show your answer\n\n\nlast_name_last = last_name[] # fill in the [] to extract the last letter of your last name. Do not assume you know how many letters are in your last name. \nprint() # complete the print statement to show your answer\n\n\nyear_5 = # compute the year multipled by 5\nprint() # print the answer\n\nThe sorted command takes a list and returns it sorted.\n\nstates_sorted = sorted(states) # sort your list of states\nmid = states+_sorted[][] # complete the []'s to find the last letter of the third New England state in alphabetical order. \nprint() # print the answer\n\n\nExport your jupyter notebook as a pdffile and submit it using HuskyCT.\nGo back to your project directory and create a subdirectory called R. In that directory, start Rstudio.\nCreate an RMD file called Homework_One.rmd and repeat the steps above, but working in R and Rstudio. Notice that you’ll have to make some small modifications to the syntax:\n\nchange “Python” to “R”\nreplace “=” by “&lt;-”\nin R, you use sort not sorted\n\nExport your RMD file as a pdf file and submit it using HuskyCT."
  },
  {
    "objectID": "chapters/999-Problems/HW1.html#first-homework-assignment",
    "href": "chapters/999-Problems/HW1.html#first-homework-assignment",
    "title": "Homework One",
    "section": "",
    "text": "This assignment is due Sunday, September 10th by midnight. Please submit it using HuskyCT. Follow the instructions below.\n\nCreate a project directory named Homework_One, and inside it create a subdirectory called python.\nIn the python directory, create a jupyter notebook named Homework_One.ipynb.\nUsing a markdown cell, add text at the beginning of your notebook that yields text following this template:\nHeader: First Homework Assignment for Grad 5100\nText: Submitted by [your name] on [the date]\nTopic: Some features of the python language.\n\n(Hint: you can get the word python formatted this way by using backticks: `python`) 3. Using a code cell, create the following variables:\n\nfirst_name = # your first name (a string)\nlast_name = # your last name (a string)\nyear = # current year, an integer\nstates = # a list of strings containing the names of the New England states (look them up)\n\nWorking in code cells, complete the following\n\nfirst_name_345 = first_name[] # fill in the [] to extract the third, fourth, and fifth letters of your first name (note this could be an empty string, or shorter than three letters)\nprint() # complete the print statement to show your answer\n\n\nlast_name_last = last_name[] # fill in the [] to extract the last letter of your last name. Do not assume you know how many letters are in your last name. \nprint() # complete the print statement to show your answer\n\n\nyear_5 = # compute the year multipled by 5\nprint() # print the answer\n\nThe sorted command takes a list and returns it sorted.\n\nstates_sorted = sorted(states) # sort your list of states\nmid = states+_sorted[][] # complete the []'s to find the last letter of the third New England state in alphabetical order. \nprint() # print the answer\n\n\nExport your jupyter notebook as a pdffile and submit it using HuskyCT.\nGo back to your project directory and create a subdirectory called R. In that directory, start Rstudio.\nCreate an RMD file called Homework_One.rmd and repeat the steps above, but working in R and Rstudio. Notice that you’ll have to make some small modifications to the syntax:\n\nchange “Python” to “R”\nreplace “=” by “&lt;-”\nin R, you use sort not sorted\n\nExport your RMD file as a pdf file and submit it using HuskyCT."
  }
]