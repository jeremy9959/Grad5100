---
title: "Basics of Programming in R"
subtitle: "Fundamentals of Data Science"
author: "Jeremy Teitelbaum"
format: html
title-block-style: plain
---

## Some basic characteristics of R

- The assignment operator in R is `<-`
- There is no built-in "dictionary" datatype.
-  The basic datatype in R is the vector, which  contains
objects *of the same type*.  
- Vectors are indexed from 1.


```{r}
# n
x <- c("Hello", 1)
class(x)
```

Notice that x is now all characters, and in fact if you now
compute `2*x[2]` you will get an error. 


- Ranges are *inclusive*

```{r}
1:10
```

- TRUE and FALSE instead of True and False

- indentation *does not matter* and you can use `;` to string multiple statements together.

```{r}
x <- 1
y <- 1
z <- 1
```

- `length` gives the length of a vector, `nchar` gives the number of characters of a string.

```{r}
length("Hello")
```

```{r}
length(c("Hello", "GoodBye"))
```

```{r}
nchar("Hello")
```

```{r}
nchar(c("Hello", "GoodBye"))
```

- You need to use `substr` to extract substrings, not subscripts.

```{r}
s <- "Hello"
s[1]
```

- Some things are easy in python but hard in R (extract every other letter from a string).

## Lists

A list can contain objects of different types.

```{r}
lst <- list("a", 1.5)
```

Lists are subscripted by vectors.

## Functions

Functions are constructed like this:

```{r}
f <- function(n) {
    n**2
}
f(5)
```

The last evaluated expression is the value of the function but it is better style to actually use the return statement.

```{r}
f <- function(n) {
    return(n**2)
}
f(10)
```

Functions are automatically "vectorized."

```{r}
f(1:10)
```

R automatically "recyles" when things fit. 

```{r}
1:3 + 1:6
```

## Iteration in R

```{r}
y <- 0
for (x in c(1, 2, 3, 10)) {
    print(x)
    y <- y + x
}
cat("y=", y)
```

```{r}
y<-0
while(y<10) {
    cat("y = ",y," ",sep="")
    y <- y+1
}
```

```{r}

```


## Logical statements
```{r}
if(substr("Hesterday",1,1)=="H") {
    print("Yes")
} else {
    print("No")
}
```

```{r}
less_than_one <- function(x) {
if (any(x<1)) {
    print("Yes")
} 
else {
    print("No")
}
}
```

## Example

Take a string and make its first charactdr upper case and the rest lower.

```{r}
f<-function(s) {
    a<-paste(toupper(substr(s,1,1)),substr(s,2,nchar(s)),sep="")
    return(a)
}
```

You can assign to substrings.

```{r}
f<-function(s) {
    substr(s,1,1)<-toupper(substr(s,1,1))
    return(s)
}
```

